%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(usp_record_1_1).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Record.PayloadSecurity'/1, 'enum_value_by_symbol_Record.PayloadSecurity'/1]).
-export(['enum_symbol_by_value_SessionContextRecord.PayloadSARState'/1, 'enum_value_by_symbol_SessionContextRecord.PayloadSARState'/1]).
-export(['enum_symbol_by_value_Header.MsgType'/1, 'enum_value_by_symbol_Header.MsgType'/1]).
-export(['enum_symbol_by_value_GetSupportedDMResp.ParamAccessType'/1, 'enum_value_by_symbol_GetSupportedDMResp.ParamAccessType'/1]).
-export(['enum_symbol_by_value_GetSupportedDMResp.ObjAccessType'/1, 'enum_value_by_symbol_GetSupportedDMResp.ObjAccessType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("usp_record_1_1.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Record.PayloadSecurity'() :: 'PLAINTEXT' | 'TLS12'.
-type 'SessionContextRecord.PayloadSARState'() :: 'NONE' | 'BEGIN' | 'INPROCESS' | 'COMPLETE'.
-type 'Header.MsgType'() :: 'ERROR' | 'GET' | 'GET_RESP' | 'NOTIFY' | 'SET' | 'SET_RESP' | 'OPERATE' | 'OPERATE_RESP' | 'ADD' | 'ADD_RESP' | 'DELETE' | 'DELETE_RESP' | 'GET_SUPPORTED_DM' | 'GET_SUPPORTED_DM_RESP' | 'GET_INSTANCES' | 'GET_INSTANCES_RESP' | 'NOTIFY_RESP' | 'GET_SUPPORTED_PROTO' | 'GET_SUPPORTED_PROTO_RESP'.
-type 'GetSupportedDMResp.ParamAccessType'() :: 'PARAM_READ_ONLY' | 'PARAM_READ_WRITE' | 'PARAM_WRITE_ONLY'.
-type 'GetSupportedDMResp.ObjAccessType'() :: 'OBJ_READ_ONLY' | 'OBJ_ADD_DELETE' | 'OBJ_ADD_ONLY' | 'OBJ_DELETE_ONLY'.
-export_type(['Record.PayloadSecurity'/0, 'SessionContextRecord.PayloadSARState'/0, 'Header.MsgType'/0, 'GetSupportedDMResp.ParamAccessType'/0, 'GetSupportedDMResp.ObjAccessType'/0]).

%% message types
-type 'Record'() :: #'Record'{}.

-type 'NoSessionContextRecord'() :: #'NoSessionContextRecord'{}.

-type 'SessionContextRecord'() :: #'SessionContextRecord'{}.

-type 'Msg'() :: #'Msg'{}.

-type 'Header'() :: #'Header'{}.

-type 'Body'() :: #'Body'{}.

-type 'Request'() :: #'Request'{}.

-type 'Response'() :: #'Response'{}.

-type 'Error.ParamError'() :: #'Error.ParamError'{}.

-type 'Error'() :: #'Error'{}.

-type 'Get'() :: #'Get'{}.

-type 'GetResp.RequestedPathResult'() :: #'GetResp.RequestedPathResult'{}.

-type 'GetResp.ResolvedPathResult'() :: #'GetResp.ResolvedPathResult'{}.

-type 'GetResp'() :: #'GetResp'{}.

-type 'GetSupportedDM'() :: #'GetSupportedDM'{}.

-type 'GetSupportedDMResp.RequestedObjectResult'() :: #'GetSupportedDMResp.RequestedObjectResult'{}.

-type 'GetSupportedDMResp.SupportedObjectResult'() :: #'GetSupportedDMResp.SupportedObjectResult'{}.

-type 'GetSupportedDMResp.SupportedParamResult'() :: #'GetSupportedDMResp.SupportedParamResult'{}.

-type 'GetSupportedDMResp.SupportedCommandResult'() :: #'GetSupportedDMResp.SupportedCommandResult'{}.

-type 'GetSupportedDMResp.SupportedEventResult'() :: #'GetSupportedDMResp.SupportedEventResult'{}.

-type 'GetSupportedDMResp'() :: #'GetSupportedDMResp'{}.

-type 'GetInstances'() :: #'GetInstances'{}.

-type 'GetInstancesResp.RequestedPathResult'() :: #'GetInstancesResp.RequestedPathResult'{}.

-type 'GetInstancesResp.CurrInstance'() :: #'GetInstancesResp.CurrInstance'{}.

-type 'GetInstancesResp'() :: #'GetInstancesResp'{}.

-type 'GetSupportedProtocol'() :: #'GetSupportedProtocol'{}.

-type 'GetSupportedProtocolResp'() :: #'GetSupportedProtocolResp'{}.

-type 'Add.CreateObject'() :: #'Add.CreateObject'{}.

-type 'Add.CreateParamSetting'() :: #'Add.CreateParamSetting'{}.

-type 'Add'() :: #'Add'{}.

-type 'AddResp.CreatedObjectResult'() :: #'AddResp.CreatedObjectResult'{}.

-type 'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'() :: #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{}.

-type 'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'() :: #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{}.

-type 'AddResp.CreatedObjectResult.OperationStatus'() :: #'AddResp.CreatedObjectResult.OperationStatus'{}.

-type 'AddResp.ParameterError'() :: #'AddResp.ParameterError'{}.

-type 'AddResp'() :: #'AddResp'{}.

-type 'Delete'() :: #'Delete'{}.

-type 'DeleteResp.DeletedObjectResult'() :: #'DeleteResp.DeletedObjectResult'{}.

-type 'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'() :: #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{}.

-type 'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'() :: #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{}.

-type 'DeleteResp.DeletedObjectResult.OperationStatus'() :: #'DeleteResp.DeletedObjectResult.OperationStatus'{}.

-type 'DeleteResp.UnaffectedPathError'() :: #'DeleteResp.UnaffectedPathError'{}.

-type 'DeleteResp'() :: #'DeleteResp'{}.

-type 'Set.UpdateObject'() :: #'Set.UpdateObject'{}.

-type 'Set.UpdateParamSetting'() :: #'Set.UpdateParamSetting'{}.

-type 'Set'() :: #'Set'{}.

-type 'SetResp.UpdatedObjectResult'() :: #'SetResp.UpdatedObjectResult'{}.

-type 'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'() :: #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{}.

-type 'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'() :: #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{}.

-type 'SetResp.UpdatedObjectResult.OperationStatus'() :: #'SetResp.UpdatedObjectResult.OperationStatus'{}.

-type 'SetResp.UpdatedInstanceFailure'() :: #'SetResp.UpdatedInstanceFailure'{}.

-type 'SetResp.UpdatedInstanceResult'() :: #'SetResp.UpdatedInstanceResult'{}.

-type 'SetResp.ParameterError'() :: #'SetResp.ParameterError'{}.

-type 'SetResp'() :: #'SetResp'{}.

-type 'Operate'() :: #'Operate'{}.

-type 'OperateResp.OperationResult'() :: #'OperateResp.OperationResult'{}.

-type 'OperateResp.OperationResult.CommandFailure'() :: #'OperateResp.OperationResult.CommandFailure'{}.

-type 'OperateResp.OperationResult.OutputArgs'() :: #'OperateResp.OperationResult.OutputArgs'{}.

-type 'OperateResp'() :: #'OperateResp'{}.

-type 'Notify.Event'() :: #'Notify.Event'{}.

-type 'Notify.ValueChange'() :: #'Notify.ValueChange'{}.

-type 'Notify.ObjectCreation'() :: #'Notify.ObjectCreation'{}.

-type 'Notify.ObjectDeletion'() :: #'Notify.ObjectDeletion'{}.

-type 'Notify.OperationComplete'() :: #'Notify.OperationComplete'{}.

-type 'Notify.OperationComplete.CommandFailure'() :: #'Notify.OperationComplete.CommandFailure'{}.

-type 'Notify.OperationComplete.OutputArgs'() :: #'Notify.OperationComplete.OutputArgs'{}.

-type 'Notify.OnBoardRequest'() :: #'Notify.OnBoardRequest'{}.

-type 'Notify'() :: #'Notify'{}.

-type 'NotifyResp'() :: #'NotifyResp'{}.

-type 'DoubleValue'() :: #'DoubleValue'{}.

-type 'FloatValue'() :: #'FloatValue'{}.

-type 'Int64Value'() :: #'Int64Value'{}.

-type 'UInt64Value'() :: #'UInt64Value'{}.

-type 'Int32Value'() :: #'Int32Value'{}.

-type 'UInt32Value'() :: #'UInt32Value'{}.

-type 'BoolValue'() :: #'BoolValue'{}.

-type 'StringValue'() :: #'StringValue'{}.

-type 'BytesValue'() :: #'BytesValue'{}.

-export_type(['Record'/0, 'NoSessionContextRecord'/0, 'SessionContextRecord'/0, 'Msg'/0, 'Header'/0, 'Body'/0, 'Request'/0, 'Response'/0, 'Error.ParamError'/0, 'Error'/0, 'Get'/0, 'GetResp.RequestedPathResult'/0, 'GetResp.ResolvedPathResult'/0, 'GetResp'/0, 'GetSupportedDM'/0, 'GetSupportedDMResp.RequestedObjectResult'/0, 'GetSupportedDMResp.SupportedObjectResult'/0, 'GetSupportedDMResp.SupportedParamResult'/0, 'GetSupportedDMResp.SupportedCommandResult'/0, 'GetSupportedDMResp.SupportedEventResult'/0, 'GetSupportedDMResp'/0, 'GetInstances'/0, 'GetInstancesResp.RequestedPathResult'/0, 'GetInstancesResp.CurrInstance'/0, 'GetInstancesResp'/0, 'GetSupportedProtocol'/0, 'GetSupportedProtocolResp'/0, 'Add.CreateObject'/0, 'Add.CreateParamSetting'/0, 'Add'/0, 'AddResp.CreatedObjectResult'/0, 'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'/0, 'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'/0, 'AddResp.CreatedObjectResult.OperationStatus'/0, 'AddResp.ParameterError'/0, 'AddResp'/0, 'Delete'/0, 'DeleteResp.DeletedObjectResult'/0, 'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'/0, 'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'/0, 'DeleteResp.DeletedObjectResult.OperationStatus'/0, 'DeleteResp.UnaffectedPathError'/0, 'DeleteResp'/0, 'Set.UpdateObject'/0, 'Set.UpdateParamSetting'/0, 'Set'/0, 'SetResp.UpdatedObjectResult'/0, 'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'/0, 'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'/0, 'SetResp.UpdatedObjectResult.OperationStatus'/0, 'SetResp.UpdatedInstanceFailure'/0, 'SetResp.UpdatedInstanceResult'/0, 'SetResp.ParameterError'/0, 'SetResp'/0, 'Operate'/0, 'OperateResp.OperationResult'/0, 'OperateResp.OperationResult.CommandFailure'/0, 'OperateResp.OperationResult.OutputArgs'/0, 'OperateResp'/0, 'Notify.Event'/0, 'Notify.ValueChange'/0, 'Notify.ObjectCreation'/0, 'Notify.ObjectDeletion'/0, 'Notify.OperationComplete'/0, 'Notify.OperationComplete.CommandFailure'/0, 'Notify.OperationComplete.OutputArgs'/0, 'Notify.OnBoardRequest'/0, 'Notify'/0, 'NotifyResp'/0, 'DoubleValue'/0, 'FloatValue'/0, 'Int64Value'/0, 'UInt64Value'/0, 'Int32Value'/0, 'UInt32Value'/0, 'BoolValue'/0, 'StringValue'/0, 'BytesValue'/0]).

-record('map<string,string>',{key, value}).
-spec encode_msg(#'Record'{} | #'NoSessionContextRecord'{} | #'SessionContextRecord'{} | #'Msg'{} | #'Header'{} | #'Body'{} | #'Request'{} | #'Response'{} | #'Error.ParamError'{} | #'Error'{} | #'Get'{} | #'GetResp.RequestedPathResult'{} | #'GetResp.ResolvedPathResult'{} | #'GetResp'{} | #'GetSupportedDM'{} | #'GetSupportedDMResp.RequestedObjectResult'{} | #'GetSupportedDMResp.SupportedObjectResult'{} | #'GetSupportedDMResp.SupportedParamResult'{} | #'GetSupportedDMResp.SupportedCommandResult'{} | #'GetSupportedDMResp.SupportedEventResult'{} | #'GetSupportedDMResp'{} | #'GetInstances'{} | #'GetInstancesResp.RequestedPathResult'{} | #'GetInstancesResp.CurrInstance'{} | #'GetInstancesResp'{} | #'GetSupportedProtocol'{} | #'GetSupportedProtocolResp'{} | #'Add.CreateObject'{} | #'Add.CreateParamSetting'{} | #'Add'{} | #'AddResp.CreatedObjectResult'{} | #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{} | #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{} | #'AddResp.CreatedObjectResult.OperationStatus'{} | #'AddResp.ParameterError'{} | #'AddResp'{} | #'Delete'{} | #'DeleteResp.DeletedObjectResult'{} | #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{} | #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{} | #'DeleteResp.DeletedObjectResult.OperationStatus'{} | #'DeleteResp.UnaffectedPathError'{} | #'DeleteResp'{} | #'Set.UpdateObject'{} | #'Set.UpdateParamSetting'{} | #'Set'{} | #'SetResp.UpdatedObjectResult'{} | #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{} | #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{} | #'SetResp.UpdatedObjectResult.OperationStatus'{} | #'SetResp.UpdatedInstanceFailure'{} | #'SetResp.UpdatedInstanceResult'{} | #'SetResp.ParameterError'{} | #'SetResp'{} | #'Operate'{} | #'OperateResp.OperationResult'{} | #'OperateResp.OperationResult.CommandFailure'{} | #'OperateResp.OperationResult.OutputArgs'{} | #'OperateResp'{} | #'Notify.Event'{} | #'Notify.ValueChange'{} | #'Notify.ObjectCreation'{} | #'Notify.ObjectDeletion'{} | #'Notify.OperationComplete'{} | #'Notify.OperationComplete.CommandFailure'{} | #'Notify.OperationComplete.OutputArgs'{} | #'Notify.OnBoardRequest'{} | #'Notify'{} | #'NotifyResp'{} | #'DoubleValue'{} | #'FloatValue'{} | #'Int64Value'{} | #'UInt64Value'{} | #'Int32Value'{} | #'UInt32Value'{} | #'BoolValue'{} | #'StringValue'{} | #'BytesValue'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Record'{} | #'NoSessionContextRecord'{} | #'SessionContextRecord'{} | #'Msg'{} | #'Header'{} | #'Body'{} | #'Request'{} | #'Response'{} | #'Error.ParamError'{} | #'Error'{} | #'Get'{} | #'GetResp.RequestedPathResult'{} | #'GetResp.ResolvedPathResult'{} | #'GetResp'{} | #'GetSupportedDM'{} | #'GetSupportedDMResp.RequestedObjectResult'{} | #'GetSupportedDMResp.SupportedObjectResult'{} | #'GetSupportedDMResp.SupportedParamResult'{} | #'GetSupportedDMResp.SupportedCommandResult'{} | #'GetSupportedDMResp.SupportedEventResult'{} | #'GetSupportedDMResp'{} | #'GetInstances'{} | #'GetInstancesResp.RequestedPathResult'{} | #'GetInstancesResp.CurrInstance'{} | #'GetInstancesResp'{} | #'GetSupportedProtocol'{} | #'GetSupportedProtocolResp'{} | #'Add.CreateObject'{} | #'Add.CreateParamSetting'{} | #'Add'{} | #'AddResp.CreatedObjectResult'{} | #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{} | #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{} | #'AddResp.CreatedObjectResult.OperationStatus'{} | #'AddResp.ParameterError'{} | #'AddResp'{} | #'Delete'{} | #'DeleteResp.DeletedObjectResult'{} | #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{} | #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{} | #'DeleteResp.DeletedObjectResult.OperationStatus'{} | #'DeleteResp.UnaffectedPathError'{} | #'DeleteResp'{} | #'Set.UpdateObject'{} | #'Set.UpdateParamSetting'{} | #'Set'{} | #'SetResp.UpdatedObjectResult'{} | #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{} | #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{} | #'SetResp.UpdatedObjectResult.OperationStatus'{} | #'SetResp.UpdatedInstanceFailure'{} | #'SetResp.UpdatedInstanceResult'{} | #'SetResp.ParameterError'{} | #'SetResp'{} | #'Operate'{} | #'OperateResp.OperationResult'{} | #'OperateResp.OperationResult.CommandFailure'{} | #'OperateResp.OperationResult.OutputArgs'{} | #'OperateResp'{} | #'Notify.Event'{} | #'Notify.ValueChange'{} | #'Notify.ObjectCreation'{} | #'Notify.ObjectDeletion'{} | #'Notify.OperationComplete'{} | #'Notify.OperationComplete.CommandFailure'{} | #'Notify.OperationComplete.OutputArgs'{} | #'Notify.OnBoardRequest'{} | #'Notify'{} | #'NotifyResp'{} | #'DoubleValue'{} | #'FloatValue'{} | #'Int64Value'{} | #'UInt64Value'{} | #'Int32Value'{} | #'UInt32Value'{} | #'BoolValue'{} | #'StringValue'{} | #'BytesValue'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Record'{} | #'NoSessionContextRecord'{} | #'SessionContextRecord'{} | #'Msg'{} | #'Header'{} | #'Body'{} | #'Request'{} | #'Response'{} | #'Error.ParamError'{} | #'Error'{} | #'Get'{} | #'GetResp.RequestedPathResult'{} | #'GetResp.ResolvedPathResult'{} | #'GetResp'{} | #'GetSupportedDM'{} | #'GetSupportedDMResp.RequestedObjectResult'{} | #'GetSupportedDMResp.SupportedObjectResult'{} | #'GetSupportedDMResp.SupportedParamResult'{} | #'GetSupportedDMResp.SupportedCommandResult'{} | #'GetSupportedDMResp.SupportedEventResult'{} | #'GetSupportedDMResp'{} | #'GetInstances'{} | #'GetInstancesResp.RequestedPathResult'{} | #'GetInstancesResp.CurrInstance'{} | #'GetInstancesResp'{} | #'GetSupportedProtocol'{} | #'GetSupportedProtocolResp'{} | #'Add.CreateObject'{} | #'Add.CreateParamSetting'{} | #'Add'{} | #'AddResp.CreatedObjectResult'{} | #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{} | #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{} | #'AddResp.CreatedObjectResult.OperationStatus'{} | #'AddResp.ParameterError'{} | #'AddResp'{} | #'Delete'{} | #'DeleteResp.DeletedObjectResult'{} | #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{} | #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{} | #'DeleteResp.DeletedObjectResult.OperationStatus'{} | #'DeleteResp.UnaffectedPathError'{} | #'DeleteResp'{} | #'Set.UpdateObject'{} | #'Set.UpdateParamSetting'{} | #'Set'{} | #'SetResp.UpdatedObjectResult'{} | #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{} | #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{} | #'SetResp.UpdatedObjectResult.OperationStatus'{} | #'SetResp.UpdatedInstanceFailure'{} | #'SetResp.UpdatedInstanceResult'{} | #'SetResp.ParameterError'{} | #'SetResp'{} | #'Operate'{} | #'OperateResp.OperationResult'{} | #'OperateResp.OperationResult.CommandFailure'{} | #'OperateResp.OperationResult.OutputArgs'{} | #'OperateResp'{} | #'Notify.Event'{} | #'Notify.ValueChange'{} | #'Notify.ObjectCreation'{} | #'Notify.ObjectDeletion'{} | #'Notify.OperationComplete'{} | #'Notify.OperationComplete.CommandFailure'{} | #'Notify.OperationComplete.OutputArgs'{} | #'Notify.OnBoardRequest'{} | #'Notify'{} | #'NotifyResp'{} | #'DoubleValue'{} | #'FloatValue'{} | #'Int64Value'{} | #'UInt64Value'{} | #'Int32Value'{} | #'UInt32Value'{} | #'BoolValue'{} | #'StringValue'{} | #'BytesValue'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Record' ->
	  encode_msg_Record(id(Msg, TrUserData), TrUserData);
      'NoSessionContextRecord' ->
	  encode_msg_NoSessionContextRecord(id(Msg, TrUserData),
					    TrUserData);
      'SessionContextRecord' ->
	  encode_msg_SessionContextRecord(id(Msg, TrUserData),
					  TrUserData);
      'Msg' ->
	  encode_msg_Msg(id(Msg, TrUserData), TrUserData);
      'Header' ->
	  encode_msg_Header(id(Msg, TrUserData), TrUserData);
      'Body' ->
	  encode_msg_Body(id(Msg, TrUserData), TrUserData);
      'Request' ->
	  encode_msg_Request(id(Msg, TrUserData), TrUserData);
      'Response' ->
	  encode_msg_Response(id(Msg, TrUserData), TrUserData);
      'Error.ParamError' ->
	  'encode_msg_Error.ParamError'(id(Msg, TrUserData),
					TrUserData);
      'Error' ->
	  encode_msg_Error(id(Msg, TrUserData), TrUserData);
      'Get' ->
	  encode_msg_Get(id(Msg, TrUserData), TrUserData);
      'GetResp.RequestedPathResult' ->
	  'encode_msg_GetResp.RequestedPathResult'(id(Msg,
						      TrUserData),
						   TrUserData);
      'GetResp.ResolvedPathResult' ->
	  'encode_msg_GetResp.ResolvedPathResult'(id(Msg,
						     TrUserData),
						  TrUserData);
      'GetResp' ->
	  encode_msg_GetResp(id(Msg, TrUserData), TrUserData);
      'GetSupportedDM' ->
	  encode_msg_GetSupportedDM(id(Msg, TrUserData),
				    TrUserData);
      'GetSupportedDMResp.RequestedObjectResult' ->
	  'encode_msg_GetSupportedDMResp.RequestedObjectResult'(id(Msg,
								   TrUserData),
								TrUserData);
      'GetSupportedDMResp.SupportedObjectResult' ->
	  'encode_msg_GetSupportedDMResp.SupportedObjectResult'(id(Msg,
								   TrUserData),
								TrUserData);
      'GetSupportedDMResp.SupportedParamResult' ->
	  'encode_msg_GetSupportedDMResp.SupportedParamResult'(id(Msg,
								  TrUserData),
							       TrUserData);
      'GetSupportedDMResp.SupportedCommandResult' ->
	  'encode_msg_GetSupportedDMResp.SupportedCommandResult'(id(Msg,
								    TrUserData),
								 TrUserData);
      'GetSupportedDMResp.SupportedEventResult' ->
	  'encode_msg_GetSupportedDMResp.SupportedEventResult'(id(Msg,
								  TrUserData),
							       TrUserData);
      'GetSupportedDMResp' ->
	  encode_msg_GetSupportedDMResp(id(Msg, TrUserData),
					TrUserData);
      'GetInstances' ->
	  encode_msg_GetInstances(id(Msg, TrUserData),
				  TrUserData);
      'GetInstancesResp.RequestedPathResult' ->
	  'encode_msg_GetInstancesResp.RequestedPathResult'(id(Msg,
							       TrUserData),
							    TrUserData);
      'GetInstancesResp.CurrInstance' ->
	  'encode_msg_GetInstancesResp.CurrInstance'(id(Msg,
							TrUserData),
						     TrUserData);
      'GetInstancesResp' ->
	  encode_msg_GetInstancesResp(id(Msg, TrUserData),
				      TrUserData);
      'GetSupportedProtocol' ->
	  encode_msg_GetSupportedProtocol(id(Msg, TrUserData),
					  TrUserData);
      'GetSupportedProtocolResp' ->
	  encode_msg_GetSupportedProtocolResp(id(Msg, TrUserData),
					      TrUserData);
      'Add.CreateObject' ->
	  'encode_msg_Add.CreateObject'(id(Msg, TrUserData),
					TrUserData);
      'Add.CreateParamSetting' ->
	  'encode_msg_Add.CreateParamSetting'(id(Msg, TrUserData),
					      TrUserData);
      'Add' ->
	  encode_msg_Add(id(Msg, TrUserData), TrUserData);
      'AddResp.CreatedObjectResult' ->
	  'encode_msg_AddResp.CreatedObjectResult'(id(Msg,
						      TrUserData),
						   TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus.OperationFailure' ->
	  'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(id(Msg,
										       TrUserData),
										    TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess' ->
	  'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(id(Msg,
										       TrUserData),
										    TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus' ->
	  'encode_msg_AddResp.CreatedObjectResult.OperationStatus'(id(Msg,
								      TrUserData),
								   TrUserData);
      'AddResp.ParameterError' ->
	  'encode_msg_AddResp.ParameterError'(id(Msg, TrUserData),
					      TrUserData);
      'AddResp' ->
	  encode_msg_AddResp(id(Msg, TrUserData), TrUserData);
      'Delete' ->
	  encode_msg_Delete(id(Msg, TrUserData), TrUserData);
      'DeleteResp.DeletedObjectResult' ->
	  'encode_msg_DeleteResp.DeletedObjectResult'(id(Msg,
							 TrUserData),
						      TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure' ->
	  'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(id(Msg,
											  TrUserData),
										       TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess' ->
	  'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(id(Msg,
											  TrUserData),
										       TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus' ->
	  'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(id(Msg,
									 TrUserData),
								      TrUserData);
      'DeleteResp.UnaffectedPathError' ->
	  'encode_msg_DeleteResp.UnaffectedPathError'(id(Msg,
							 TrUserData),
						      TrUserData);
      'DeleteResp' ->
	  encode_msg_DeleteResp(id(Msg, TrUserData), TrUserData);
      'Set.UpdateObject' ->
	  'encode_msg_Set.UpdateObject'(id(Msg, TrUserData),
					TrUserData);
      'Set.UpdateParamSetting' ->
	  'encode_msg_Set.UpdateParamSetting'(id(Msg, TrUserData),
					      TrUserData);
      'Set' ->
	  encode_msg_Set(id(Msg, TrUserData), TrUserData);
      'SetResp.UpdatedObjectResult' ->
	  'encode_msg_SetResp.UpdatedObjectResult'(id(Msg,
						      TrUserData),
						   TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure' ->
	  'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(id(Msg,
										       TrUserData),
										    TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess' ->
	  'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(id(Msg,
										       TrUserData),
										    TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus' ->
	  'encode_msg_SetResp.UpdatedObjectResult.OperationStatus'(id(Msg,
								      TrUserData),
								   TrUserData);
      'SetResp.UpdatedInstanceFailure' ->
	  'encode_msg_SetResp.UpdatedInstanceFailure'(id(Msg,
							 TrUserData),
						      TrUserData);
      'SetResp.UpdatedInstanceResult' ->
	  'encode_msg_SetResp.UpdatedInstanceResult'(id(Msg,
							TrUserData),
						     TrUserData);
      'SetResp.ParameterError' ->
	  'encode_msg_SetResp.ParameterError'(id(Msg, TrUserData),
					      TrUserData);
      'SetResp' ->
	  encode_msg_SetResp(id(Msg, TrUserData), TrUserData);
      'Operate' ->
	  encode_msg_Operate(id(Msg, TrUserData), TrUserData);
      'OperateResp.OperationResult' ->
	  'encode_msg_OperateResp.OperationResult'(id(Msg,
						      TrUserData),
						   TrUserData);
      'OperateResp.OperationResult.CommandFailure' ->
	  'encode_msg_OperateResp.OperationResult.CommandFailure'(id(Msg,
								     TrUserData),
								  TrUserData);
      'OperateResp.OperationResult.OutputArgs' ->
	  'encode_msg_OperateResp.OperationResult.OutputArgs'(id(Msg,
								 TrUserData),
							      TrUserData);
      'OperateResp' ->
	  encode_msg_OperateResp(id(Msg, TrUserData), TrUserData);
      'Notify.Event' ->
	  'encode_msg_Notify.Event'(id(Msg, TrUserData),
				    TrUserData);
      'Notify.ValueChange' ->
	  'encode_msg_Notify.ValueChange'(id(Msg, TrUserData),
					  TrUserData);
      'Notify.ObjectCreation' ->
	  'encode_msg_Notify.ObjectCreation'(id(Msg, TrUserData),
					     TrUserData);
      'Notify.ObjectDeletion' ->
	  'encode_msg_Notify.ObjectDeletion'(id(Msg, TrUserData),
					     TrUserData);
      'Notify.OperationComplete' ->
	  'encode_msg_Notify.OperationComplete'(id(Msg,
						   TrUserData),
						TrUserData);
      'Notify.OperationComplete.CommandFailure' ->
	  'encode_msg_Notify.OperationComplete.CommandFailure'(id(Msg,
								  TrUserData),
							       TrUserData);
      'Notify.OperationComplete.OutputArgs' ->
	  'encode_msg_Notify.OperationComplete.OutputArgs'(id(Msg,
							      TrUserData),
							   TrUserData);
      'Notify.OnBoardRequest' ->
	  'encode_msg_Notify.OnBoardRequest'(id(Msg, TrUserData),
					     TrUserData);
      'Notify' ->
	  encode_msg_Notify(id(Msg, TrUserData), TrUserData);
      'NotifyResp' ->
	  encode_msg_NotifyResp(id(Msg, TrUserData), TrUserData);
      'DoubleValue' ->
	  encode_msg_DoubleValue(id(Msg, TrUserData), TrUserData);
      'FloatValue' ->
	  encode_msg_FloatValue(id(Msg, TrUserData), TrUserData);
      'Int64Value' ->
	  encode_msg_Int64Value(id(Msg, TrUserData), TrUserData);
      'UInt64Value' ->
	  encode_msg_UInt64Value(id(Msg, TrUserData), TrUserData);
      'Int32Value' ->
	  encode_msg_Int32Value(id(Msg, TrUserData), TrUserData);
      'UInt32Value' ->
	  encode_msg_UInt32Value(id(Msg, TrUserData), TrUserData);
      'BoolValue' ->
	  encode_msg_BoolValue(id(Msg, TrUserData), TrUserData);
      'StringValue' ->
	  encode_msg_StringValue(id(Msg, TrUserData), TrUserData);
      'BytesValue' ->
	  encode_msg_BytesValue(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Record(Msg, TrUserData) ->
    encode_msg_Record(Msg, <<>>, TrUserData).


encode_msg_Record(#'Record'{version = F1, to_id = F2,
			    from_id = F3, payload_security = F4,
			    mac_signature = F5, sender_cert = F6,
			    record_type = F7},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 'PLAINTEXT'; TrF4 =:= 0 -> B3;
		     true ->
			 'e_enum_Record.PayloadSecurity'(TrF4,
							 <<B3/binary, 32>>,
							 TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case iolist_size(TrF5) of
		    0 -> B4;
		    _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case iolist_size(TrF6) of
		    0 -> B5;
		    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
		  end
		end
	 end,
    if F7 =:= undefined -> B6;
       true ->
	   case id(F7, TrUserData) of
	     {no_session_context, TF7} ->
		 begin
		   TrTF7 = id(TF7, TrUserData),
		   e_mfield_Record_no_session_context(TrTF7,
						      <<B6/binary, 58>>,
						      TrUserData)
		 end;
	     {session_context, TF7} ->
		 begin
		   TrTF7 = id(TF7, TrUserData),
		   e_mfield_Record_session_context(TrTF7,
						   <<B6/binary, 66>>,
						   TrUserData)
		 end
	   end
    end.

encode_msg_NoSessionContextRecord(Msg, TrUserData) ->
    encode_msg_NoSessionContextRecord(Msg, <<>>,
				      TrUserData).


encode_msg_NoSessionContextRecord(#'NoSessionContextRecord'{payload
								= F1},
				  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_bytes(TrF1, <<Bin/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_SessionContextRecord(Msg, TrUserData) ->
    encode_msg_SessionContextRecord(Msg, <<>>, TrUserData).


encode_msg_SessionContextRecord(#'SessionContextRecord'{session_id
							    = F1,
							sequence_id = F2,
							expected_id = F3,
							retransmit_id = F4,
							payload_sar_state = F5,
							payloadrec_sar_state =
							    F6,
							payload = F7},
				Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 'NONE'; TrF5 =:= 0 -> B4;
		     true ->
			 'e_enum_SessionContextRecord.PayloadSARState'(TrF5,
								       <<B4/binary,
									 40>>,
								       TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'NONE'; TrF6 =:= 0 -> B5;
		     true ->
			 'e_enum_SessionContextRecord.PayloadSARState'(TrF6,
								       <<B5/binary,
									 48>>,
								       TrUserData)
		  end
		end
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      if TrF7 == [] -> B6;
	 true ->
	     e_field_SessionContextRecord_payload(TrF7, B6,
						  TrUserData)
      end
    end.

encode_msg_Msg(Msg, TrUserData) ->
    encode_msg_Msg(Msg, <<>>, TrUserData).


encode_msg_Msg(#'Msg'{header = F1, body = F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_Msg_header(TrF1, <<Bin/binary, 10>>,
					     TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_Msg_body(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_Header(Msg, TrUserData) ->
    encode_msg_Header(Msg, <<>>, TrUserData).


encode_msg_Header(#'Header'{msg_id = F1, msg_type = F2},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'ERROR'; TrF2 =:= 0 -> B1;
		true ->
		    'e_enum_Header.MsgType'(TrF2, <<B1/binary, 16>>,
					    TrUserData)
	     end
	   end
    end.

encode_msg_Body(Msg, TrUserData) ->
    encode_msg_Body(Msg, <<>>, TrUserData).


encode_msg_Body(#'Body'{msg_body = F1}, Bin,
		TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {request, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Body_request(TrTF1, <<Bin/binary, 10>>,
					 TrUserData)
		 end;
	     {response, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Body_response(TrTF1, <<Bin/binary, 18>>,
					  TrUserData)
		 end;
	     {error, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Body_error(TrTF1, <<Bin/binary, 26>>,
				       TrUserData)
		 end
	   end
    end.

encode_msg_Request(Msg, TrUserData) ->
    encode_msg_Request(Msg, <<>>, TrUserData).


encode_msg_Request(#'Request'{req_type = F1}, Bin,
		   TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {get, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_get(TrTF1, <<Bin/binary, 10>>,
					TrUserData)
		 end;
	     {get_supported_dm, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_get_supported_dm(TrTF1,
						     <<Bin/binary, 18>>,
						     TrUserData)
		 end;
	     {get_instances, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_get_instances(TrTF1,
						  <<Bin/binary, 26>>,
						  TrUserData)
		 end;
	     {set, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_set(TrTF1, <<Bin/binary, 34>>,
					TrUserData)
		 end;
	     {add, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_add(TrTF1, <<Bin/binary, 42>>,
					TrUserData)
		 end;
	     {delete, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_delete(TrTF1, <<Bin/binary, 50>>,
					   TrUserData)
		 end;
	     {operate, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_operate(TrTF1, <<Bin/binary, 58>>,
					    TrUserData)
		 end;
	     {notify, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_notify(TrTF1, <<Bin/binary, 66>>,
					   TrUserData)
		 end;
	     {get_supported_protocol, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Request_get_supported_protocol(TrTF1,
							   <<Bin/binary, 74>>,
							   TrUserData)
		 end
	   end
    end.

encode_msg_Response(Msg, TrUserData) ->
    encode_msg_Response(Msg, <<>>, TrUserData).


encode_msg_Response(#'Response'{resp_type = F1}, Bin,
		    TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {get_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_get_resp(TrTF1, <<Bin/binary, 10>>,
					      TrUserData)
		 end;
	     {get_supported_dm_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_get_supported_dm_resp(TrTF1,
							   <<Bin/binary, 18>>,
							   TrUserData)
		 end;
	     {get_instances_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_get_instances_resp(TrTF1,
							<<Bin/binary, 26>>,
							TrUserData)
		 end;
	     {set_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_set_resp(TrTF1, <<Bin/binary, 34>>,
					      TrUserData)
		 end;
	     {add_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_add_resp(TrTF1, <<Bin/binary, 42>>,
					      TrUserData)
		 end;
	     {delete_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_delete_resp(TrTF1, <<Bin/binary, 50>>,
						 TrUserData)
		 end;
	     {operate_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_operate_resp(TrTF1,
						  <<Bin/binary, 58>>,
						  TrUserData)
		 end;
	     {notify_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_notify_resp(TrTF1, <<Bin/binary, 66>>,
						 TrUserData)
		 end;
	     {get_supported_protocol_resp, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Response_get_supported_protocol_resp(TrTF1,
								 <<Bin/binary,
								   74>>,
								 TrUserData)
		 end
	   end
    end.

'encode_msg_Error.ParamError'(Msg, TrUserData) ->
    'encode_msg_Error.ParamError'(Msg, <<>>, TrUserData).


'encode_msg_Error.ParamError'(#'Error.ParamError'{param_path
						      = F1,
						  err_code = F2, err_msg = F3},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_Error(Msg, TrUserData) ->
    encode_msg_Error(Msg, <<>>, TrUserData).


encode_msg_Error(#'Error'{err_code = F1, err_msg = F2,
			  param_errs = F3},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_fixed32(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true -> e_field_Error_param_errs(TrF3, B2, TrUserData)
      end
    end.

encode_msg_Get(Msg, TrUserData) ->
    encode_msg_Get(Msg, <<>>, TrUserData).


encode_msg_Get(#'Get'{param_paths = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_Get_param_paths(TrF1, Bin, TrUserData)
      end
    end.

'encode_msg_GetResp.RequestedPathResult'(Msg,
					 TrUserData) ->
    'encode_msg_GetResp.RequestedPathResult'(Msg, <<>>,
					     TrUserData).


'encode_msg_GetResp.RequestedPathResult'(#'GetResp.RequestedPathResult'{requested_path
									    =
									    F1,
									err_code
									    =
									    F2,
									err_msg
									    =
									    F3,
									resolved_path_results
									    =
									    F4},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_GetResp.RequestedPathResult_resolved_path_results'(TrF4,
									 B3,
									 TrUserData)
      end
    end.

'encode_msg_GetResp.ResolvedPathResult'(Msg,
					TrUserData) ->
    'encode_msg_GetResp.ResolvedPathResult'(Msg, <<>>,
					    TrUserData).


'encode_msg_GetResp.ResolvedPathResult'(#'GetResp.ResolvedPathResult'{resolved_path
									  = F1,
								      result_params
									  = F2},
					Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_GetResp.ResolvedPathResult_result_params'(TrF2,
								B1, TrUserData)
      end
    end.

encode_msg_GetResp(Msg, TrUserData) ->
    encode_msg_GetResp(Msg, <<>>, TrUserData).


encode_msg_GetResp(#'GetResp'{req_path_results = F1},
		   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetResp_req_path_results(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_GetSupportedDM(Msg, TrUserData) ->
    encode_msg_GetSupportedDM(Msg, <<>>, TrUserData).


encode_msg_GetSupportedDM(#'GetSupportedDM'{obj_paths =
						F1,
					    first_level_only = F2,
					    return_commands = F3,
					    return_events = F4,
					    return_params = F5},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_GetSupportedDM_obj_paths(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= false -> B4;
		true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
	     end
	   end
    end.

'encode_msg_GetSupportedDMResp.RequestedObjectResult'(Msg,
						      TrUserData) ->
    'encode_msg_GetSupportedDMResp.RequestedObjectResult'(Msg,
							  <<>>, TrUserData).


'encode_msg_GetSupportedDMResp.RequestedObjectResult'(#'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
												      =
												      F1,
												  err_code
												      =
												      F2,
												  err_msg
												      =
												      F3,
												  data_model_inst_uri
												      =
												      F4,
												  supported_objs
												      =
												      F5},
						      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     'e_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(TrF5,
									       B4,
									       TrUserData)
      end
    end.

'encode_msg_GetSupportedDMResp.SupportedObjectResult'(Msg,
						      TrUserData) ->
    'encode_msg_GetSupportedDMResp.SupportedObjectResult'(Msg,
							  <<>>, TrUserData).


'encode_msg_GetSupportedDMResp.SupportedObjectResult'(#'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
												      =
												      F1,
												  access
												      =
												      F2,
												  is_multi_instance
												      =
												      F3,
												  supported_commands
												      =
												      F4,
												  supported_events
												      =
												      F5,
												  supported_params
												      =
												      F6},
						      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 'OBJ_READ_ONLY'; TrF2 =:= 0 -> B1;
		     true ->
			 'e_enum_GetSupportedDMResp.ObjAccessType'(TrF2,
								   <<B1/binary,
								     16>>,
								   TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  'e_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(TrF4,
											B3,
											TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true ->
		  'e_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(TrF5,
										      B4,
										      TrUserData)
	   end
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      if TrF6 == [] -> B5;
	 true ->
	     'e_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(TrF6,
										 B5,
										 TrUserData)
      end
    end.

'encode_msg_GetSupportedDMResp.SupportedParamResult'(Msg,
						     TrUserData) ->
    'encode_msg_GetSupportedDMResp.SupportedParamResult'(Msg,
							 <<>>, TrUserData).


'encode_msg_GetSupportedDMResp.SupportedParamResult'(#'GetSupportedDMResp.SupportedParamResult'{param_name
												    =
												    F1,
												access
												    =
												    F2},
						     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'PARAM_READ_ONLY'; TrF2 =:= 0 -> B1;
		true ->
		    'e_enum_GetSupportedDMResp.ParamAccessType'(TrF2,
								<<B1/binary,
								  16>>,
								TrUserData)
	     end
	   end
    end.

'encode_msg_GetSupportedDMResp.SupportedCommandResult'(Msg,
						       TrUserData) ->
    'encode_msg_GetSupportedDMResp.SupportedCommandResult'(Msg,
							   <<>>, TrUserData).


'encode_msg_GetSupportedDMResp.SupportedCommandResult'(#'GetSupportedDMResp.SupportedCommandResult'{command_name
													=
													F1,
												    input_arg_names
													=
													F2,
												    output_arg_names
													=
													F3},
						       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(TrF2,
										      B1,
										      TrUserData)
	   end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     'e_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(TrF3,
										  B2,
										  TrUserData)
      end
    end.

'encode_msg_GetSupportedDMResp.SupportedEventResult'(Msg,
						     TrUserData) ->
    'encode_msg_GetSupportedDMResp.SupportedEventResult'(Msg,
							 <<>>, TrUserData).


'encode_msg_GetSupportedDMResp.SupportedEventResult'(#'GetSupportedDMResp.SupportedEventResult'{event_name
												    =
												    F1,
												arg_names
												    =
												    F2},
						     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_GetSupportedDMResp.SupportedEventResult_arg_names'(TrF2,
									 B1,
									 TrUserData)
      end
    end.

encode_msg_GetSupportedDMResp(Msg, TrUserData) ->
    encode_msg_GetSupportedDMResp(Msg, <<>>, TrUserData).


encode_msg_GetSupportedDMResp(#'GetSupportedDMResp'{req_obj_results
							= F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetSupportedDMResp_req_obj_results(TrF1, Bin,
							TrUserData)
      end
    end.

encode_msg_GetInstances(Msg, TrUserData) ->
    encode_msg_GetInstances(Msg, <<>>, TrUserData).


encode_msg_GetInstances(#'GetInstances'{obj_paths = F1,
					first_level_only = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_GetInstances_obj_paths(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= false -> B1;
		true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_GetInstancesResp.RequestedPathResult'(Msg,
						  TrUserData) ->
    'encode_msg_GetInstancesResp.RequestedPathResult'(Msg,
						      <<>>, TrUserData).


'encode_msg_GetInstancesResp.RequestedPathResult'(#'GetInstancesResp.RequestedPathResult'{requested_path
											      =
											      F1,
											  err_code
											      =
											      F2,
											  err_msg
											      =
											      F3,
											  curr_insts
											      =
											      F4},
						  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_GetInstancesResp.RequestedPathResult_curr_insts'(TrF4,
								       B3,
								       TrUserData)
      end
    end.

'encode_msg_GetInstancesResp.CurrInstance'(Msg,
					   TrUserData) ->
    'encode_msg_GetInstancesResp.CurrInstance'(Msg, <<>>,
					       TrUserData).


'encode_msg_GetInstancesResp.CurrInstance'(#'GetInstancesResp.CurrInstance'{instantiated_obj_path
										=
										F1,
									    unique_keys
										=
										F2},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_GetInstancesResp.CurrInstance_unique_keys'(TrF2,
								 B1, TrUserData)
      end
    end.

encode_msg_GetInstancesResp(Msg, TrUserData) ->
    encode_msg_GetInstancesResp(Msg, <<>>, TrUserData).


encode_msg_GetInstancesResp(#'GetInstancesResp'{req_path_results
						    = F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GetInstancesResp_req_path_results(TrF1, Bin,
						       TrUserData)
      end
    end.

encode_msg_GetSupportedProtocol(Msg, TrUserData) ->
    encode_msg_GetSupportedProtocol(Msg, <<>>, TrUserData).


encode_msg_GetSupportedProtocol(#'GetSupportedProtocol'{controller_supported_protocol_versions
							    = F1},
				Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_GetSupportedProtocolResp(Msg, TrUserData) ->
    encode_msg_GetSupportedProtocolResp(Msg, <<>>,
					TrUserData).


encode_msg_GetSupportedProtocolResp(#'GetSupportedProtocolResp'{agent_supported_protocol_versions
								    = F1},
				    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

'encode_msg_Add.CreateObject'(Msg, TrUserData) ->
    'encode_msg_Add.CreateObject'(Msg, <<>>, TrUserData).


'encode_msg_Add.CreateObject'(#'Add.CreateObject'{obj_path
						      = F1,
						  param_settings = F2},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_Add.CreateObject_param_settings'(TrF2, B1,
						       TrUserData)
      end
    end.

'encode_msg_Add.CreateParamSetting'(Msg, TrUserData) ->
    'encode_msg_Add.CreateParamSetting'(Msg, <<>>,
					TrUserData).


'encode_msg_Add.CreateParamSetting'(#'Add.CreateParamSetting'{param
								  = F1,
							      value = F2,
							      required = F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= false -> B2;
		true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_Add(Msg, TrUserData) ->
    encode_msg_Add(Msg, <<>>, TrUserData).


encode_msg_Add(#'Add'{allow_partial = F1,
		      create_objs = F2},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_Add_create_objs(TrF2, B1, TrUserData)
      end
    end.

'encode_msg_AddResp.CreatedObjectResult'(Msg,
					 TrUserData) ->
    'encode_msg_AddResp.CreatedObjectResult'(Msg, <<>>,
					     TrUserData).


'encode_msg_AddResp.CreatedObjectResult'(#'AddResp.CreatedObjectResult'{requested_path
									    =
									    F1,
									oper_status
									    =
									    F2},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_AddResp.CreatedObjectResult_oper_status'(TrF2,
								       <<B1/binary,
									 18>>,
								       TrUserData)
	     end
	   end
    end.

'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Msg,
									  TrUserData) ->
    'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Msg,
									      <<>>,
									      TrUserData).


'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(#'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
																	      =
																	      F1,
																	  err_msg
																	      =
																	      F2},
									  Bin,
									  TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_fixed32(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Msg,
									  TrUserData) ->
    'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Msg,
									      <<>>,
									      TrUserData).


'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(#'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
																	      =
																	      F1,
																	  param_errs
																	      =
																	      F2,
																	  unique_keys
																	      =
																	      F3},
									  Bin,
									  TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(TrF2,
												    B1,
												    TrUserData)
	   end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(TrF3,
												B2,
												TrUserData)
      end
    end.

'encode_msg_AddResp.CreatedObjectResult.OperationStatus'(Msg,
							 TrUserData) ->
    'encode_msg_AddResp.CreatedObjectResult.OperationStatus'(Msg,
							     <<>>, TrUserData).


'encode_msg_AddResp.CreatedObjectResult.OperationStatus'(#'AddResp.CreatedObjectResult.OperationStatus'{oper_status
													    =
													    F1},
							 Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {oper_failure, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(TrTF1,
										       <<Bin/binary,
											 10>>,
										       TrUserData)
		 end;
	     {oper_success, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_AddResp.CreatedObjectResult.OperationStatus_oper_success'(TrTF1,
										       <<Bin/binary,
											 18>>,
										       TrUserData)
		 end
	   end
    end.

'encode_msg_AddResp.ParameterError'(Msg, TrUserData) ->
    'encode_msg_AddResp.ParameterError'(Msg, <<>>,
					TrUserData).


'encode_msg_AddResp.ParameterError'(#'AddResp.ParameterError'{param
								  = F1,
							      err_code = F2,
							      err_msg = F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_AddResp(Msg, TrUserData) ->
    encode_msg_AddResp(Msg, <<>>, TrUserData).


encode_msg_AddResp(#'AddResp'{created_obj_results = F1},
		   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_AddResp_created_obj_results(TrF1, Bin,
						 TrUserData)
      end
    end.

encode_msg_Delete(Msg, TrUserData) ->
    encode_msg_Delete(Msg, <<>>, TrUserData).


encode_msg_Delete(#'Delete'{allow_partial = F1,
			    obj_paths = F2},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_Delete_obj_paths(TrF2, B1, TrUserData)
      end
    end.

'encode_msg_DeleteResp.DeletedObjectResult'(Msg,
					    TrUserData) ->
    'encode_msg_DeleteResp.DeletedObjectResult'(Msg, <<>>,
						TrUserData).


'encode_msg_DeleteResp.DeletedObjectResult'(#'DeleteResp.DeletedObjectResult'{requested_path
										  =
										  F1,
									      oper_status
										  =
										  F2},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_DeleteResp.DeletedObjectResult_oper_status'(TrF2,
									  <<B1/binary,
									    18>>,
									  TrUserData)
	     end
	   end
    end.

'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Msg,
									     TrUserData) ->
    'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Msg,
										 <<>>,
										 TrUserData).


'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(#'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
																		    =
																		    F1,
																		err_msg
																		    =
																		    F2},
									     Bin,
									     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_fixed32(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Msg,
									     TrUserData) ->
    'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Msg,
										 <<>>,
										 TrUserData).


'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(#'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
																		    =
																		    F1,
																		unaffected_path_errs
																		    =
																		    F2},
									     Bin,
									     TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(TrF1,
													   Bin,
													   TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(TrF2,
													    B1,
													    TrUserData)
      end
    end.

'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Msg,
							    TrUserData) ->
    'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Msg,
								<<>>,
								TrUserData).


'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(#'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
														  =
														  F1},
							    Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {oper_failure, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(TrTF1,
											  <<Bin/binary,
											    10>>,
											  TrUserData)
		 end;
	     {oper_success, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(TrTF1,
											  <<Bin/binary,
											    18>>,
											  TrUserData)
		 end
	   end
    end.

'encode_msg_DeleteResp.UnaffectedPathError'(Msg,
					    TrUserData) ->
    'encode_msg_DeleteResp.UnaffectedPathError'(Msg, <<>>,
						TrUserData).


'encode_msg_DeleteResp.UnaffectedPathError'(#'DeleteResp.UnaffectedPathError'{unaffected_path
										  =
										  F1,
									      err_code
										  =
										  F2,
									      err_msg
										  =
										  F3},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_DeleteResp(Msg, TrUserData) ->
    encode_msg_DeleteResp(Msg, <<>>, TrUserData).


encode_msg_DeleteResp(#'DeleteResp'{deleted_obj_results
					= F1},
		      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_DeleteResp_deleted_obj_results(TrF1, Bin,
						    TrUserData)
      end
    end.

'encode_msg_Set.UpdateObject'(Msg, TrUserData) ->
    'encode_msg_Set.UpdateObject'(Msg, <<>>, TrUserData).


'encode_msg_Set.UpdateObject'(#'Set.UpdateObject'{obj_path
						      = F1,
						  param_settings = F2},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_Set.UpdateObject_param_settings'(TrF2, B1,
						       TrUserData)
      end
    end.

'encode_msg_Set.UpdateParamSetting'(Msg, TrUserData) ->
    'encode_msg_Set.UpdateParamSetting'(Msg, <<>>,
					TrUserData).


'encode_msg_Set.UpdateParamSetting'(#'Set.UpdateParamSetting'{param
								  = F1,
							      value = F2,
							      required = F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= false -> B2;
		true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_Set(Msg, TrUserData) ->
    encode_msg_Set(Msg, <<>>, TrUserData).


encode_msg_Set(#'Set'{allow_partial = F1,
		      update_objs = F2},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_Set_update_objs(TrF2, B1, TrUserData)
      end
    end.

'encode_msg_SetResp.UpdatedObjectResult'(Msg,
					 TrUserData) ->
    'encode_msg_SetResp.UpdatedObjectResult'(Msg, <<>>,
					     TrUserData).


'encode_msg_SetResp.UpdatedObjectResult'(#'SetResp.UpdatedObjectResult'{requested_path
									    =
									    F1,
									oper_status
									    =
									    F2},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_SetResp.UpdatedObjectResult_oper_status'(TrF2,
								       <<B1/binary,
									 18>>,
								       TrUserData)
	     end
	   end
    end.

'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Msg,
									  TrUserData) ->
    'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Msg,
									      <<>>,
									      TrUserData).


'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(#'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
																	      =
																	      F1,
																	  err_msg
																	      =
																	      F2,
																	  updated_inst_failures
																	      =
																	      F3},
									  Bin,
									  TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_fixed32(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(TrF3,
													  B2,
													  TrUserData)
      end
    end.

'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Msg,
									  TrUserData) ->
    'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Msg,
									      <<>>,
									      TrUserData).


'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(#'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
																	      =
																	      F1},
									  Bin,
									  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(TrF1,
													 Bin,
													 TrUserData)
      end
    end.

'encode_msg_SetResp.UpdatedObjectResult.OperationStatus'(Msg,
							 TrUserData) ->
    'encode_msg_SetResp.UpdatedObjectResult.OperationStatus'(Msg,
							     <<>>, TrUserData).


'encode_msg_SetResp.UpdatedObjectResult.OperationStatus'(#'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
													    =
													    F1},
							 Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {oper_failure, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(TrTF1,
										       <<Bin/binary,
											 10>>,
										       TrUserData)
		 end;
	     {oper_success, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(TrTF1,
										       <<Bin/binary,
											 18>>,
										       TrUserData)
		 end
	   end
    end.

'encode_msg_SetResp.UpdatedInstanceFailure'(Msg,
					    TrUserData) ->
    'encode_msg_SetResp.UpdatedInstanceFailure'(Msg, <<>>,
						TrUserData).


'encode_msg_SetResp.UpdatedInstanceFailure'(#'SetResp.UpdatedInstanceFailure'{affected_path
										  =
										  F1,
									      param_errs
										  =
										  F2},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_SetResp.UpdatedInstanceFailure_param_errs'(TrF2,
								 B1, TrUserData)
      end
    end.

'encode_msg_SetResp.UpdatedInstanceResult'(Msg,
					   TrUserData) ->
    'encode_msg_SetResp.UpdatedInstanceResult'(Msg, <<>>,
					       TrUserData).


'encode_msg_SetResp.UpdatedInstanceResult'(#'SetResp.UpdatedInstanceResult'{affected_path
										=
										F1,
									    param_errs
										=
										F2,
									    updated_params
										=
										F3},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_SetResp.UpdatedInstanceResult_param_errs'(TrF2,
								     B1,
								     TrUserData)
	   end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     'e_field_SetResp.UpdatedInstanceResult_updated_params'(TrF3,
								    B2,
								    TrUserData)
      end
    end.

'encode_msg_SetResp.ParameterError'(Msg, TrUserData) ->
    'encode_msg_SetResp.ParameterError'(Msg, <<>>,
					TrUserData).


'encode_msg_SetResp.ParameterError'(#'SetResp.ParameterError'{param
								  = F1,
							      err_code = F2,
							      err_msg = F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_fixed32(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_SetResp(Msg, TrUserData) ->
    encode_msg_SetResp(Msg, <<>>, TrUserData).


encode_msg_SetResp(#'SetResp'{updated_obj_results = F1},
		   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_SetResp_updated_obj_results(TrF1, Bin,
						 TrUserData)
      end
    end.

encode_msg_Operate(Msg, TrUserData) ->
    encode_msg_Operate(Msg, <<>>, TrUserData).


encode_msg_Operate(#'Operate'{command = F1,
			      command_key = F2, send_resp = F3,
			      input_args = F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_Operate_input_args(TrF4, B3, TrUserData)
      end
    end.

'encode_msg_OperateResp.OperationResult'(Msg,
					 TrUserData) ->
    'encode_msg_OperateResp.OperationResult'(Msg, <<>>,
					     TrUserData).


'encode_msg_OperateResp.OperationResult'(#'OperateResp.OperationResult'{executed_command
									    =
									    F1,
									operation_resp
									    =
									    F2},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {req_obj_path, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_type_string(TrTF2, <<B1/binary, 18>>, TrUserData)
		 end;
	     {req_output_args, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_OperateResp.OperationResult_req_output_args'(TrTF2,
									  <<B1/binary,
									    26>>,
									  TrUserData)
		 end;
	     {cmd_failure, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_OperateResp.OperationResult_cmd_failure'(TrTF2,
								      <<B1/binary,
									34>>,
								      TrUserData)
		 end
	   end
    end.

'encode_msg_OperateResp.OperationResult.CommandFailure'(Msg,
							TrUserData) ->
    'encode_msg_OperateResp.OperationResult.CommandFailure'(Msg,
							    <<>>, TrUserData).


'encode_msg_OperateResp.OperationResult.CommandFailure'(#'OperateResp.OperationResult.CommandFailure'{err_code
													  =
													  F1,
												      err_msg
													  =
													  F2},
							Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_fixed32(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_OperateResp.OperationResult.OutputArgs'(Msg,
						    TrUserData) ->
    'encode_msg_OperateResp.OperationResult.OutputArgs'(Msg,
							<<>>, TrUserData).


'encode_msg_OperateResp.OperationResult.OutputArgs'(#'OperateResp.OperationResult.OutputArgs'{output_args
												  =
												  F1},
						    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_OperateResp.OperationResult.OutputArgs_output_args'(TrF1,
									  Bin,
									  TrUserData)
      end
    end.

encode_msg_OperateResp(Msg, TrUserData) ->
    encode_msg_OperateResp(Msg, <<>>, TrUserData).


encode_msg_OperateResp(#'OperateResp'{operation_results
					  = F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_OperateResp_operation_results(TrF1, Bin,
						   TrUserData)
      end
    end.

'encode_msg_Notify.Event'(Msg, TrUserData) ->
    'encode_msg_Notify.Event'(Msg, <<>>, TrUserData).


'encode_msg_Notify.Event'(#'Notify.Event'{obj_path = F1,
					  event_name = F2, params = F3},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     'e_field_Notify.Event_params'(TrF3, B2, TrUserData)
      end
    end.

'encode_msg_Notify.ValueChange'(Msg, TrUserData) ->
    'encode_msg_Notify.ValueChange'(Msg, <<>>, TrUserData).


'encode_msg_Notify.ValueChange'(#'Notify.ValueChange'{param_path
							  = F1,
						      param_value = F2},
				Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_Notify.ObjectCreation'(Msg, TrUserData) ->
    'encode_msg_Notify.ObjectCreation'(Msg, <<>>,
				       TrUserData).


'encode_msg_Notify.ObjectCreation'(#'Notify.ObjectCreation'{obj_path
								= F1,
							    unique_keys = F2},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_Notify.ObjectCreation_unique_keys'(TrF2, B1,
							 TrUserData)
      end
    end.

'encode_msg_Notify.ObjectDeletion'(Msg, TrUserData) ->
    'encode_msg_Notify.ObjectDeletion'(Msg, <<>>,
				       TrUserData).


'encode_msg_Notify.ObjectDeletion'(#'Notify.ObjectDeletion'{obj_path
								= F1},
				   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

'encode_msg_Notify.OperationComplete'(Msg,
				      TrUserData) ->
    'encode_msg_Notify.OperationComplete'(Msg, <<>>,
					  TrUserData).


'encode_msg_Notify.OperationComplete'(#'Notify.OperationComplete'{obj_path
								      = F1,
								  command_name =
								      F2,
								  command_key =
								      F3,
								  operation_resp
								      = F4},
				      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 =:= undefined -> B3;
       true ->
	   case id(F4, TrUserData) of
	     {req_output_args, TF4} ->
		 begin
		   TrTF4 = id(TF4, TrUserData),
		   'e_mfield_Notify.OperationComplete_req_output_args'(TrTF4,
								       <<B3/binary,
									 34>>,
								       TrUserData)
		 end;
	     {cmd_failure, TF4} ->
		 begin
		   TrTF4 = id(TF4, TrUserData),
		   'e_mfield_Notify.OperationComplete_cmd_failure'(TrTF4,
								   <<B3/binary,
								     42>>,
								   TrUserData)
		 end
	   end
    end.

'encode_msg_Notify.OperationComplete.CommandFailure'(Msg,
						     TrUserData) ->
    'encode_msg_Notify.OperationComplete.CommandFailure'(Msg,
							 <<>>, TrUserData).


'encode_msg_Notify.OperationComplete.CommandFailure'(#'Notify.OperationComplete.CommandFailure'{err_code
												    =
												    F1,
												err_msg
												    =
												    F2},
						     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_fixed32(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_Notify.OperationComplete.OutputArgs'(Msg,
						 TrUserData) ->
    'encode_msg_Notify.OperationComplete.OutputArgs'(Msg,
						     <<>>, TrUserData).


'encode_msg_Notify.OperationComplete.OutputArgs'(#'Notify.OperationComplete.OutputArgs'{output_args
											    =
											    F1},
						 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Notify.OperationComplete.OutputArgs_output_args'(TrF1,
								       Bin,
								       TrUserData)
      end
    end.

'encode_msg_Notify.OnBoardRequest'(Msg, TrUserData) ->
    'encode_msg_Notify.OnBoardRequest'(Msg, <<>>,
				       TrUserData).


'encode_msg_Notify.OnBoardRequest'(#'Notify.OnBoardRequest'{oui
								= F1,
							    product_class = F2,
							    serial_number = F3,
							    agent_supported_protocol_versions
								= F4},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

encode_msg_Notify(Msg, TrUserData) ->
    encode_msg_Notify(Msg, <<>>, TrUserData).


encode_msg_Notify(#'Notify'{subscription_id = F1,
			    send_resp = F2, notification = F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 =:= undefined -> B2;
       true ->
	   case id(F3, TrUserData) of
	     {event, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   e_mfield_Notify_event(TrTF3, <<B2/binary, 26>>,
					 TrUserData)
		 end;
	     {value_change, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   e_mfield_Notify_value_change(TrTF3, <<B2/binary, 34>>,
						TrUserData)
		 end;
	     {obj_creation, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   e_mfield_Notify_obj_creation(TrTF3, <<B2/binary, 42>>,
						TrUserData)
		 end;
	     {obj_deletion, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   e_mfield_Notify_obj_deletion(TrTF3, <<B2/binary, 50>>,
						TrUserData)
		 end;
	     {oper_complete, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   e_mfield_Notify_oper_complete(TrTF3, <<B2/binary, 58>>,
						 TrUserData)
		 end;
	     {on_board_req, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   e_mfield_Notify_on_board_req(TrTF3, <<B2/binary, 66>>,
						TrUserData)
		 end
	   end
    end.

encode_msg_NotifyResp(Msg, TrUserData) ->
    encode_msg_NotifyResp(Msg, <<>>, TrUserData).


encode_msg_NotifyResp(#'NotifyResp'{subscription_id =
					F1},
		      Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_DoubleValue(Msg, TrUserData) ->
    encode_msg_DoubleValue(Msg, <<>>, TrUserData).


encode_msg_DoubleValue(#'DoubleValue'{value = F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0.0 -> Bin;
		true ->
		    e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	     end
	   end
    end.

encode_msg_FloatValue(Msg, TrUserData) ->
    encode_msg_FloatValue(Msg, <<>>, TrUserData).


encode_msg_FloatValue(#'FloatValue'{value = F1}, Bin,
		      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0.0 -> Bin;
		true ->
		    e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	     end
	   end
    end.

encode_msg_Int64Value(Msg, TrUserData) ->
    encode_msg_Int64Value(Msg, <<>>, TrUserData).


encode_msg_Int64Value(#'Int64Value'{value = F1}, Bin,
		      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_UInt64Value(Msg, TrUserData) ->
    encode_msg_UInt64Value(Msg, <<>>, TrUserData).


encode_msg_UInt64Value(#'UInt64Value'{value = F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_Int32Value(Msg, TrUserData) ->
    encode_msg_Int32Value(Msg, <<>>, TrUserData).


encode_msg_Int32Value(#'Int32Value'{value = F1}, Bin,
		      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_UInt32Value(Msg, TrUserData) ->
    encode_msg_UInt32Value(Msg, <<>>, TrUserData).


encode_msg_UInt32Value(#'UInt32Value'{value = F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_BoolValue(Msg, TrUserData) ->
    encode_msg_BoolValue(Msg, <<>>, TrUserData).


encode_msg_BoolValue(#'BoolValue'{value = F1}, Bin,
		     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_StringValue(Msg, TrUserData) ->
    encode_msg_StringValue(Msg, <<>>, TrUserData).


encode_msg_StringValue(#'StringValue'{value = F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_BytesValue(Msg, TrUserData) ->
    encode_msg_BytesValue(Msg, <<>>, TrUserData).


encode_msg_BytesValue(#'BytesValue'{value = F1}, Bin,
		      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

e_mfield_Record_no_session_context(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_NoSessionContextRecord(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Record_session_context(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SessionContextRecord(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SessionContextRecord_payload([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_SessionContextRecord_payload(Rest, Bin3,
					 TrUserData);
e_field_SessionContextRecord_payload([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_Msg_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Header(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Msg_body(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Body(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Body_request(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Request(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Body_response(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Response(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Body_error(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Error(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_get(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Get(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_get_supported_dm(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_GetSupportedDM(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_get_instances(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_GetInstances(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_set(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Set(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_add(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Add(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_delete(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Delete(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_operate(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Operate(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_notify(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Notify(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_get_supported_protocol(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_GetSupportedProtocol(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_GetResp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_supported_dm_resp(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_GetSupportedDMResp(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_instances_resp(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_GetInstancesResp(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_set_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SetResp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_add_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AddResp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_delete_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_DeleteResp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_operate_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_OperateResp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_notify_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NotifyResp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_supported_protocol_resp(Msg, Bin,
					      TrUserData) ->
    SubBin = encode_msg_GetSupportedProtocolResp(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Error_param_errs(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Error.ParamError'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Error_param_errs([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Error_param_errs(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_Error_param_errs(Rest, Bin3, TrUserData);
e_field_Error_param_errs([], Bin, _TrUserData) -> Bin.

e_field_Get_param_paths([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_Get_param_paths(Rest, Bin3, TrUserData);
e_field_Get_param_paths([], Bin, _TrUserData) -> Bin.

'e_mfield_GetResp.RequestedPathResult_resolved_path_results'(Msg,
							     Bin, TrUserData) ->
    SubBin = 'encode_msg_GetResp.ResolvedPathResult'(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetResp.RequestedPathResult_resolved_path_results'([Elem
							     | Rest],
							    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_GetResp.RequestedPathResult_resolved_path_results'(id(Elem,
									TrUserData),
								     Bin2,
								     TrUserData),
    'e_field_GetResp.RequestedPathResult_resolved_path_results'(Rest,
								Bin3,
								TrUserData);
'e_field_GetResp.RequestedPathResult_resolved_path_results'([],
							    Bin, _TrUserData) ->
    Bin.

'e_mfield_GetResp.ResolvedPathResult_result_params'(Msg,
						    Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetResp.ResolvedPathResult_result_params'([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_GetResp.ResolvedPathResult_result_params'('tr_encode_GetResp.ResolvedPathResult.result_params[x]'(Elem,
														    TrUserData),
							    Bin2, TrUserData),
    'e_field_GetResp.ResolvedPathResult_result_params'(Rest,
						       Bin3, TrUserData);
'e_field_GetResp.ResolvedPathResult_result_params'([],
						   Bin, _TrUserData) ->
    Bin.

e_mfield_GetResp_req_path_results(Msg, Bin,
				  TrUserData) ->
    SubBin = 'encode_msg_GetResp.RequestedPathResult'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetResp_req_path_results([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetResp_req_path_results(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_GetResp_req_path_results(Rest, Bin3,
				     TrUserData);
e_field_GetResp_req_path_results([], Bin,
				 _TrUserData) ->
    Bin.

e_field_GetSupportedDM_obj_paths([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_GetSupportedDM_obj_paths(Rest, Bin3,
				     TrUserData);
e_field_GetSupportedDM_obj_paths([], Bin,
				 _TrUserData) ->
    Bin.

'e_mfield_GetSupportedDMResp.RequestedObjectResult_supported_objs'(Msg,
								   Bin,
								   TrUserData) ->
    SubBin =
	'encode_msg_GetSupportedDMResp.SupportedObjectResult'(Msg,
							      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'([Elem
								   | Rest],
								  Bin,
								  TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	'e_mfield_GetSupportedDMResp.RequestedObjectResult_supported_objs'(id(Elem,
									      TrUserData),
									   Bin2,
									   TrUserData),
    'e_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(Rest,
								      Bin3,
								      TrUserData);
'e_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'([],
								  Bin,
								  _TrUserData) ->
    Bin.

'e_mfield_GetSupportedDMResp.SupportedObjectResult_supported_commands'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin =
	'encode_msg_GetSupportedDMResp.SupportedCommandResult'(Msg,
							       <<>>,
							       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'([Elem
								       | Rest],
								      Bin,
								      TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_GetSupportedDMResp.SupportedObjectResult_supported_commands'(id(Elem,
										  TrUserData),
									       Bin2,
									       TrUserData),
    'e_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(Rest,
									  Bin3,
									  TrUserData);
'e_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'([],
								      Bin,
								      _TrUserData) ->
    Bin.

'e_mfield_GetSupportedDMResp.SupportedObjectResult_supported_events'(Msg,
								     Bin,
								     TrUserData) ->
    SubBin =
	'encode_msg_GetSupportedDMResp.SupportedEventResult'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetSupportedDMResp.SupportedObjectResult_supported_events'([Elem
								     | Rest],
								    Bin,
								    TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	'e_mfield_GetSupportedDMResp.SupportedObjectResult_supported_events'(id(Elem,
										TrUserData),
									     Bin2,
									     TrUserData),
    'e_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(Rest,
									Bin3,
									TrUserData);
'e_field_GetSupportedDMResp.SupportedObjectResult_supported_events'([],
								    Bin,
								    _TrUserData) ->
    Bin.

'e_mfield_GetSupportedDMResp.SupportedObjectResult_supported_params'(Msg,
								     Bin,
								     TrUserData) ->
    SubBin =
	'encode_msg_GetSupportedDMResp.SupportedParamResult'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetSupportedDMResp.SupportedObjectResult_supported_params'([Elem
								     | Rest],
								    Bin,
								    TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 =
	'e_mfield_GetSupportedDMResp.SupportedObjectResult_supported_params'(id(Elem,
										TrUserData),
									     Bin2,
									     TrUserData),
    'e_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(Rest,
									Bin3,
									TrUserData);
'e_field_GetSupportedDMResp.SupportedObjectResult_supported_params'([],
								    Bin,
								    _TrUserData) ->
    Bin.

'e_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'([Elem
								     | Rest],
								    Bin,
								    TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(Rest,
									Bin3,
									TrUserData);
'e_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'([],
								    Bin,
								    _TrUserData) ->
    Bin.

'e_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'([Elem
								      | Rest],
								     Bin,
								     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(Rest,
									 Bin3,
									 TrUserData);
'e_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'([],
								     Bin,
								     _TrUserData) ->
    Bin.

'e_field_GetSupportedDMResp.SupportedEventResult_arg_names'([Elem
							     | Rest],
							    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_GetSupportedDMResp.SupportedEventResult_arg_names'(Rest,
								Bin3,
								TrUserData);
'e_field_GetSupportedDMResp.SupportedEventResult_arg_names'([],
							    Bin, _TrUserData) ->
    Bin.

e_mfield_GetSupportedDMResp_req_obj_results(Msg, Bin,
					    TrUserData) ->
    SubBin =
	'encode_msg_GetSupportedDMResp.RequestedObjectResult'(Msg,
							      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetSupportedDMResp_req_obj_results([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_GetSupportedDMResp_req_obj_results(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_GetSupportedDMResp_req_obj_results(Rest, Bin3,
					       TrUserData);
e_field_GetSupportedDMResp_req_obj_results([], Bin,
					   _TrUserData) ->
    Bin.

e_field_GetInstances_obj_paths([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_GetInstances_obj_paths(Rest, Bin3, TrUserData);
e_field_GetInstances_obj_paths([], Bin, _TrUserData) ->
    Bin.

'e_mfield_GetInstancesResp.RequestedPathResult_curr_insts'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'encode_msg_GetInstancesResp.CurrInstance'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetInstancesResp.RequestedPathResult_curr_insts'([Elem
							   | Rest],
							  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_GetInstancesResp.RequestedPathResult_curr_insts'(id(Elem,
								      TrUserData),
								   Bin2,
								   TrUserData),
    'e_field_GetInstancesResp.RequestedPathResult_curr_insts'(Rest,
							      Bin3, TrUserData);
'e_field_GetInstancesResp.RequestedPathResult_curr_insts'([],
							  Bin, _TrUserData) ->
    Bin.

'e_mfield_GetInstancesResp.CurrInstance_unique_keys'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_GetInstancesResp.CurrInstance_unique_keys'([Elem
						     | Rest],
						    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_GetInstancesResp.CurrInstance_unique_keys'('tr_encode_GetInstancesResp.CurrInstance.unique_keys[x]'(Elem,
														      TrUserData),
							     Bin2, TrUserData),
    'e_field_GetInstancesResp.CurrInstance_unique_keys'(Rest,
							Bin3, TrUserData);
'e_field_GetInstancesResp.CurrInstance_unique_keys'([],
						    Bin, _TrUserData) ->
    Bin.

e_mfield_GetInstancesResp_req_path_results(Msg, Bin,
					   TrUserData) ->
    SubBin =
	'encode_msg_GetInstancesResp.RequestedPathResult'(Msg,
							  <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetInstancesResp_req_path_results([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_GetInstancesResp_req_path_results(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_GetInstancesResp_req_path_results(Rest, Bin3,
					      TrUserData);
e_field_GetInstancesResp_req_path_results([], Bin,
					  _TrUserData) ->
    Bin.

'e_mfield_Add.CreateObject_param_settings'(Msg, Bin,
					   TrUserData) ->
    SubBin = 'encode_msg_Add.CreateParamSetting'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Add.CreateObject_param_settings'([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_Add.CreateObject_param_settings'(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    'e_field_Add.CreateObject_param_settings'(Rest, Bin3,
					      TrUserData);
'e_field_Add.CreateObject_param_settings'([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_Add_create_objs(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Add.CreateObject'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Add_create_objs([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Add_create_objs(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_Add_create_objs(Rest, Bin3, TrUserData);
e_field_Add_create_objs([], Bin, _TrUserData) -> Bin.

'e_mfield_AddResp.CreatedObjectResult_oper_status'(Msg,
						   Bin, TrUserData) ->
    SubBin =
	'encode_msg_AddResp.CreatedObjectResult.OperationStatus'(Msg,
								 <<>>,
								 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(Msg,
										   Bin,
										   TrUserData) ->
    SubBin = 'encode_msg_AddResp.ParameterError'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'([Elem
										   | Rest],
										  Bin,
										  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(id(Elem,
											      TrUserData),
											   Bin2,
											   TrUserData),
    'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(Rest,
										      Bin3,
										      TrUserData);
'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'([],
										  Bin,
										  _TrUserData) ->
    Bin.

'e_mfield_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(Msg,
										    Bin,
										    TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'([Elem
										    | Rest],
										   Bin,
										   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'('tr_encode_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys[x]'(Elem,
																						    TrUserData),
											    Bin2,
											    TrUserData),
    'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(Rest,
										       Bin3,
										       TrUserData);
'e_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'([],
										   Bin,
										   _TrUserData) ->
    Bin.

'e_mfield_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Msg,
										  <<>>,
										  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_AddResp.CreatedObjectResult.OperationStatus_oper_success'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Msg,
										  <<>>,
										  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddResp_created_obj_results(Msg, Bin,
				     TrUserData) ->
    SubBin = 'encode_msg_AddResp.CreatedObjectResult'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AddResp_created_obj_results([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_AddResp_created_obj_results(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_AddResp_created_obj_results(Rest, Bin3,
					TrUserData);
e_field_AddResp_created_obj_results([], Bin,
				    _TrUserData) ->
    Bin.

e_field_Delete_obj_paths([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_Delete_obj_paths(Rest, Bin3, TrUserData);
e_field_Delete_obj_paths([], Bin, _TrUserData) -> Bin.

'e_mfield_DeleteResp.DeletedObjectResult_oper_status'(Msg,
						      Bin, TrUserData) ->
    SubBin =
	'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Msg,
								    <<>>,
								    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'([Elem
											  | Rest],
											 Bin,
											 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(Rest,
											     Bin3,
											     TrUserData);
'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'([],
											 Bin,
											 _TrUserData) ->
    Bin.

'e_mfield_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(Msg,
												Bin,
												TrUserData) ->
    SubBin =
	'encode_msg_DeleteResp.UnaffectedPathError'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'([Elem
												| Rest],
											       Bin,
											       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(id(Elem,
													   TrUserData),
													Bin2,
													TrUserData),
    'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(Rest,
												   Bin3,
												   TrUserData);
'e_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'([],
											       Bin,
											       _TrUserData) ->
    Bin.

'e_mfield_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin =
	'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Msg,
										     <<>>,
										     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin =
	'encode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Msg,
										     <<>>,
										     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteResp_deleted_obj_results(Msg, Bin,
					TrUserData) ->
    SubBin =
	'encode_msg_DeleteResp.DeletedObjectResult'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DeleteResp_deleted_obj_results([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_DeleteResp_deleted_obj_results(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_DeleteResp_deleted_obj_results(Rest, Bin3,
					   TrUserData);
e_field_DeleteResp_deleted_obj_results([], Bin,
				       _TrUserData) ->
    Bin.

'e_mfield_Set.UpdateObject_param_settings'(Msg, Bin,
					   TrUserData) ->
    SubBin = 'encode_msg_Set.UpdateParamSetting'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Set.UpdateObject_param_settings'([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_Set.UpdateObject_param_settings'(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    'e_field_Set.UpdateObject_param_settings'(Rest, Bin3,
					      TrUserData);
'e_field_Set.UpdateObject_param_settings'([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_Set_update_objs(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Set.UpdateObject'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Set_update_objs([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Set_update_objs(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_Set_update_objs(Rest, Bin3, TrUserData);
e_field_Set_update_objs([], Bin, _TrUserData) -> Bin.

'e_mfield_SetResp.UpdatedObjectResult_oper_status'(Msg,
						   Bin, TrUserData) ->
    SubBin =
	'encode_msg_SetResp.UpdatedObjectResult.OperationStatus'(Msg,
								 <<>>,
								 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(Msg,
											      Bin,
											      TrUserData) ->
    SubBin =
	'encode_msg_SetResp.UpdatedInstanceFailure'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'([Elem
											      | Rest],
											     Bin,
											     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(id(Elem,
													 TrUserData),
												      Bin2,
												      TrUserData),
    'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(Rest,
												 Bin3,
												 TrUserData);
'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'([],
											     Bin,
											     _TrUserData) ->
    Bin.

'e_mfield_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(Msg,
											     Bin,
											     TrUserData) ->
    SubBin = 'encode_msg_SetResp.UpdatedInstanceResult'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'([Elem
											     | Rest],
											    Bin,
											    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(id(Elem,
													TrUserData),
												     Bin2,
												     TrUserData),
    'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(Rest,
												Bin3,
												TrUserData);
'e_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'([],
											    Bin,
											    _TrUserData) ->
    Bin.

'e_mfield_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Msg,
										  <<>>,
										  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Msg,
										  <<>>,
										  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_SetResp.UpdatedInstanceFailure_param_errs'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_SetResp.ParameterError'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_SetResp.UpdatedInstanceFailure_param_errs'([Elem
						     | Rest],
						    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_SetResp.UpdatedInstanceFailure_param_errs'(id(Elem,
								TrUserData),
							     Bin2, TrUserData),
    'e_field_SetResp.UpdatedInstanceFailure_param_errs'(Rest,
							Bin3, TrUserData);
'e_field_SetResp.UpdatedInstanceFailure_param_errs'([],
						    Bin, _TrUserData) ->
    Bin.

'e_mfield_SetResp.UpdatedInstanceResult_param_errs'(Msg,
						    Bin, TrUserData) ->
    SubBin = 'encode_msg_SetResp.ParameterError'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_SetResp.UpdatedInstanceResult_param_errs'([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_SetResp.UpdatedInstanceResult_param_errs'(id(Elem,
							       TrUserData),
							    Bin2, TrUserData),
    'e_field_SetResp.UpdatedInstanceResult_param_errs'(Rest,
						       Bin3, TrUserData);
'e_field_SetResp.UpdatedInstanceResult_param_errs'([],
						   Bin, _TrUserData) ->
    Bin.

'e_mfield_SetResp.UpdatedInstanceResult_updated_params'(Msg,
							Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_SetResp.UpdatedInstanceResult_updated_params'([Elem
							| Rest],
						       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_SetResp.UpdatedInstanceResult_updated_params'('tr_encode_SetResp.UpdatedInstanceResult.updated_params[x]'(Elem,
															    TrUserData),
								Bin2,
								TrUserData),
    'e_field_SetResp.UpdatedInstanceResult_updated_params'(Rest,
							   Bin3, TrUserData);
'e_field_SetResp.UpdatedInstanceResult_updated_params'([],
						       Bin, _TrUserData) ->
    Bin.

e_mfield_SetResp_updated_obj_results(Msg, Bin,
				     TrUserData) ->
    SubBin = 'encode_msg_SetResp.UpdatedObjectResult'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SetResp_updated_obj_results([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_SetResp_updated_obj_results(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_SetResp_updated_obj_results(Rest, Bin3,
					TrUserData);
e_field_SetResp_updated_obj_results([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_Operate_input_args(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Operate_input_args([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_Operate_input_args('tr_encode_Operate.input_args[x]'(Elem,
								      TrUserData),
				    Bin2, TrUserData),
    e_field_Operate_input_args(Rest, Bin3, TrUserData);
e_field_Operate_input_args([], Bin, _TrUserData) -> Bin.

'e_mfield_OperateResp.OperationResult_req_output_args'(Msg,
						       Bin, TrUserData) ->
    SubBin =
	'encode_msg_OperateResp.OperationResult.OutputArgs'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_OperateResp.OperationResult_cmd_failure'(Msg,
						   Bin, TrUserData) ->
    SubBin =
	'encode_msg_OperateResp.OperationResult.CommandFailure'(Msg,
								<<>>,
								TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_OperateResp.OperationResult.OutputArgs_output_args'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_OperateResp.OperationResult.OutputArgs_output_args'([Elem
							      | Rest],
							     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_OperateResp.OperationResult.OutputArgs_output_args'('tr_encode_OperateResp.OperationResult.OutputArgs.output_args[x]'(Elem,
																	TrUserData),
								      Bin2,
								      TrUserData),
    'e_field_OperateResp.OperationResult.OutputArgs_output_args'(Rest,
								 Bin3,
								 TrUserData);
'e_field_OperateResp.OperationResult.OutputArgs_output_args'([],
							     Bin,
							     _TrUserData) ->
    Bin.

e_mfield_OperateResp_operation_results(Msg, Bin,
				       TrUserData) ->
    SubBin = 'encode_msg_OperateResp.OperationResult'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_OperateResp_operation_results([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_OperateResp_operation_results(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_OperateResp_operation_results(Rest, Bin3,
					  TrUserData);
e_field_OperateResp_operation_results([], Bin,
				      _TrUserData) ->
    Bin.

'e_mfield_Notify.Event_params'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Notify.Event_params'([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_Notify.Event_params'('tr_encode_Notify.Event.params[x]'(Elem,
									  TrUserData),
				       Bin2, TrUserData),
    'e_field_Notify.Event_params'(Rest, Bin3, TrUserData);
'e_field_Notify.Event_params'([], Bin, _TrUserData) ->
    Bin.

'e_mfield_Notify.ObjectCreation_unique_keys'(Msg, Bin,
					     TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Notify.ObjectCreation_unique_keys'([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_Notify.ObjectCreation_unique_keys'('tr_encode_Notify.ObjectCreation.unique_keys[x]'(Elem,
												      TrUserData),
						     Bin2, TrUserData),
    'e_field_Notify.ObjectCreation_unique_keys'(Rest, Bin3,
						TrUserData);
'e_field_Notify.ObjectCreation_unique_keys'([], Bin,
					    _TrUserData) ->
    Bin.

'e_mfield_Notify.OperationComplete_req_output_args'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_Notify.OperationComplete.OutputArgs'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Notify.OperationComplete_cmd_failure'(Msg,
						Bin, TrUserData) ->
    SubBin =
	'encode_msg_Notify.OperationComplete.CommandFailure'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Notify.OperationComplete.OutputArgs_output_args'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Notify.OperationComplete.OutputArgs_output_args'([Elem
							   | Rest],
							  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Notify.OperationComplete.OutputArgs_output_args'('tr_encode_Notify.OperationComplete.OutputArgs.output_args[x]'(Elem,
																  TrUserData),
								   Bin2,
								   TrUserData),
    'e_field_Notify.OperationComplete.OutputArgs_output_args'(Rest,
							      Bin3, TrUserData);
'e_field_Notify.OperationComplete.OutputArgs_output_args'([],
							  Bin, _TrUserData) ->
    Bin.

e_mfield_Notify_event(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Notify.Event'(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Notify_value_change(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Notify.ValueChange'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Notify_obj_creation(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Notify.ObjectCreation'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Notify_obj_deletion(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Notify.ObjectDeletion'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Notify_oper_complete(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Notify.OperationComplete'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Notify_on_board_req(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Notify.OnBoardRequest'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'encode_msg_map<string,string>'(#'map<string,string>'{key
							  = F1,
						      value = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_Record.PayloadSecurity'('PLAINTEXT', Bin,
				_TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Record.PayloadSecurity'('TLS12', Bin,
				_TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Record.PayloadSecurity'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_SessionContextRecord.PayloadSARState'('NONE',
					      Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_SessionContextRecord.PayloadSARState'('BEGIN',
					      Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_SessionContextRecord.PayloadSARState'('INPROCESS',
					      Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_SessionContextRecord.PayloadSARState'('COMPLETE',
					      Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_SessionContextRecord.PayloadSARState'(V, Bin,
					      _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Header.MsgType'('ERROR', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Header.MsgType'('GET', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Header.MsgType'('GET_RESP', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Header.MsgType'('NOTIFY', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Header.MsgType'('SET', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Header.MsgType'('SET_RESP', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_Header.MsgType'('OPERATE', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_Header.MsgType'('OPERATE_RESP', Bin,
			_TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_Header.MsgType'('ADD', Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_Header.MsgType'('ADD_RESP', Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_Header.MsgType'('DELETE', Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_Header.MsgType'('DELETE_RESP', Bin,
			_TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_Header.MsgType'('GET_SUPPORTED_DM', Bin,
			_TrUserData) ->
    <<Bin/binary, 12>>;
'e_enum_Header.MsgType'('GET_SUPPORTED_DM_RESP', Bin,
			_TrUserData) ->
    <<Bin/binary, 13>>;
'e_enum_Header.MsgType'('GET_INSTANCES', Bin,
			_TrUserData) ->
    <<Bin/binary, 14>>;
'e_enum_Header.MsgType'('GET_INSTANCES_RESP', Bin,
			_TrUserData) ->
    <<Bin/binary, 15>>;
'e_enum_Header.MsgType'('NOTIFY_RESP', Bin,
			_TrUserData) ->
    <<Bin/binary, 16>>;
'e_enum_Header.MsgType'('GET_SUPPORTED_PROTO', Bin,
			_TrUserData) ->
    <<Bin/binary, 17>>;
'e_enum_Header.MsgType'('GET_SUPPORTED_PROTO_RESP', Bin,
			_TrUserData) ->
    <<Bin/binary, 18>>;
'e_enum_Header.MsgType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_GetSupportedDMResp.ParamAccessType'('PARAM_READ_ONLY',
					    Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_GetSupportedDMResp.ParamAccessType'('PARAM_READ_WRITE',
					    Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_GetSupportedDMResp.ParamAccessType'('PARAM_WRITE_ONLY',
					    Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_GetSupportedDMResp.ParamAccessType'(V, Bin,
					    _TrUserData) ->
    e_varint(V, Bin).

'e_enum_GetSupportedDMResp.ObjAccessType'('OBJ_READ_ONLY',
					  Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_GetSupportedDMResp.ObjAccessType'('OBJ_ADD_DELETE',
					  Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_GetSupportedDMResp.ObjAccessType'('OBJ_ADD_ONLY',
					  Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_GetSupportedDMResp.ObjAccessType'('OBJ_DELETE_ONLY',
					  Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_GetSupportedDMResp.ObjAccessType'(V, Bin,
					  _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Record', Bin, TrUserData) ->
    id(decode_msg_Record(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NoSessionContextRecord', Bin,
		  TrUserData) ->
    id(decode_msg_NoSessionContextRecord(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SessionContextRecord', Bin,
		  TrUserData) ->
    id(decode_msg_SessionContextRecord(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Msg', Bin, TrUserData) ->
    id(decode_msg_Msg(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Header', Bin, TrUserData) ->
    id(decode_msg_Header(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Body', Bin, TrUserData) ->
    id(decode_msg_Body(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Request', Bin, TrUserData) ->
    id(decode_msg_Request(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) ->
    id(decode_msg_Response(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Error.ParamError', Bin,
		  TrUserData) ->
    id('decode_msg_Error.ParamError'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Error', Bin, TrUserData) ->
    id(decode_msg_Error(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Get', Bin, TrUserData) ->
    id(decode_msg_Get(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GetResp.RequestedPathResult', Bin,
		  TrUserData) ->
    id('decode_msg_GetResp.RequestedPathResult'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('GetResp.ResolvedPathResult', Bin,
		  TrUserData) ->
    id('decode_msg_GetResp.ResolvedPathResult'(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('GetResp', Bin, TrUserData) ->
    id(decode_msg_GetResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GetSupportedDM', Bin, TrUserData) ->
    id(decode_msg_GetSupportedDM(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedDMResp.RequestedObjectResult',
		  Bin, TrUserData) ->
    id('decode_msg_GetSupportedDMResp.RequestedObjectResult'(Bin,
							     TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedDMResp.SupportedObjectResult',
		  Bin, TrUserData) ->
    id('decode_msg_GetSupportedDMResp.SupportedObjectResult'(Bin,
							     TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedDMResp.SupportedParamResult',
		  Bin, TrUserData) ->
    id('decode_msg_GetSupportedDMResp.SupportedParamResult'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedDMResp.SupportedCommandResult',
		  Bin, TrUserData) ->
    id('decode_msg_GetSupportedDMResp.SupportedCommandResult'(Bin,
							      TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedDMResp.SupportedEventResult',
		  Bin, TrUserData) ->
    id('decode_msg_GetSupportedDMResp.SupportedEventResult'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedDMResp', Bin,
		  TrUserData) ->
    id(decode_msg_GetSupportedDMResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetInstances', Bin, TrUserData) ->
    id(decode_msg_GetInstances(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetInstancesResp.RequestedPathResult',
		  Bin, TrUserData) ->
    id('decode_msg_GetInstancesResp.RequestedPathResult'(Bin,
							 TrUserData),
       TrUserData);
decode_msg_2_doit('GetInstancesResp.CurrInstance', Bin,
		  TrUserData) ->
    id('decode_msg_GetInstancesResp.CurrInstance'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('GetInstancesResp', Bin,
		  TrUserData) ->
    id(decode_msg_GetInstancesResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedProtocol', Bin,
		  TrUserData) ->
    id(decode_msg_GetSupportedProtocol(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetSupportedProtocolResp', Bin,
		  TrUserData) ->
    id(decode_msg_GetSupportedProtocolResp(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Add.CreateObject', Bin,
		  TrUserData) ->
    id('decode_msg_Add.CreateObject'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Add.CreateParamSetting', Bin,
		  TrUserData) ->
    id('decode_msg_Add.CreateParamSetting'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Add', Bin, TrUserData) ->
    id(decode_msg_Add(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AddResp.CreatedObjectResult', Bin,
		  TrUserData) ->
    id('decode_msg_AddResp.CreatedObjectResult'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('AddResp.CreatedObjectResult.OperationStatus.OperationFailure',
		  Bin, TrUserData) ->
    id('decode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Bin,
										 TrUserData),
       TrUserData);
decode_msg_2_doit('AddResp.CreatedObjectResult.OperationStatus.OperationSuccess',
		  Bin, TrUserData) ->
    id('decode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Bin,
										 TrUserData),
       TrUserData);
decode_msg_2_doit('AddResp.CreatedObjectResult.OperationStatus',
		  Bin, TrUserData) ->
    id('decode_msg_AddResp.CreatedObjectResult.OperationStatus'(Bin,
								TrUserData),
       TrUserData);
decode_msg_2_doit('AddResp.ParameterError', Bin,
		  TrUserData) ->
    id('decode_msg_AddResp.ParameterError'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AddResp', Bin, TrUserData) ->
    id(decode_msg_AddResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Delete', Bin, TrUserData) ->
    id(decode_msg_Delete(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DeleteResp.DeletedObjectResult', Bin,
		  TrUserData) ->
    id('decode_msg_DeleteResp.DeletedObjectResult'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure',
		  Bin, TrUserData) ->
    id('decode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Bin,
										    TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess',
		  Bin, TrUserData) ->
    id('decode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Bin,
										    TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteResp.DeletedObjectResult.OperationStatus',
		  Bin, TrUserData) ->
    id('decode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Bin,
								   TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteResp.UnaffectedPathError', Bin,
		  TrUserData) ->
    id('decode_msg_DeleteResp.UnaffectedPathError'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteResp', Bin, TrUserData) ->
    id(decode_msg_DeleteResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Set.UpdateObject', Bin,
		  TrUserData) ->
    id('decode_msg_Set.UpdateObject'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Set.UpdateParamSetting', Bin,
		  TrUserData) ->
    id('decode_msg_Set.UpdateParamSetting'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Set', Bin, TrUserData) ->
    id(decode_msg_Set(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SetResp.UpdatedObjectResult', Bin,
		  TrUserData) ->
    id('decode_msg_SetResp.UpdatedObjectResult'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp.UpdatedObjectResult.OperationStatus.OperationFailure',
		  Bin, TrUserData) ->
    id('decode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Bin,
										 TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess',
		  Bin, TrUserData) ->
    id('decode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Bin,
										 TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp.UpdatedObjectResult.OperationStatus',
		  Bin, TrUserData) ->
    id('decode_msg_SetResp.UpdatedObjectResult.OperationStatus'(Bin,
								TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp.UpdatedInstanceFailure', Bin,
		  TrUserData) ->
    id('decode_msg_SetResp.UpdatedInstanceFailure'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp.UpdatedInstanceResult', Bin,
		  TrUserData) ->
    id('decode_msg_SetResp.UpdatedInstanceResult'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp.ParameterError', Bin,
		  TrUserData) ->
    id('decode_msg_SetResp.ParameterError'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SetResp', Bin, TrUserData) ->
    id(decode_msg_SetResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Operate', Bin, TrUserData) ->
    id(decode_msg_Operate(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OperateResp.OperationResult', Bin,
		  TrUserData) ->
    id('decode_msg_OperateResp.OperationResult'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('OperateResp.OperationResult.CommandFailure',
		  Bin, TrUserData) ->
    id('decode_msg_OperateResp.OperationResult.CommandFailure'(Bin,
							       TrUserData),
       TrUserData);
decode_msg_2_doit('OperateResp.OperationResult.OutputArgs',
		  Bin, TrUserData) ->
    id('decode_msg_OperateResp.OperationResult.OutputArgs'(Bin,
							   TrUserData),
       TrUserData);
decode_msg_2_doit('OperateResp', Bin, TrUserData) ->
    id(decode_msg_OperateResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Notify.Event', Bin, TrUserData) ->
    id('decode_msg_Notify.Event'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.ValueChange', Bin,
		  TrUserData) ->
    id('decode_msg_Notify.ValueChange'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.ObjectCreation', Bin,
		  TrUserData) ->
    id('decode_msg_Notify.ObjectCreation'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.ObjectDeletion', Bin,
		  TrUserData) ->
    id('decode_msg_Notify.ObjectDeletion'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.OperationComplete', Bin,
		  TrUserData) ->
    id('decode_msg_Notify.OperationComplete'(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.OperationComplete.CommandFailure',
		  Bin, TrUserData) ->
    id('decode_msg_Notify.OperationComplete.CommandFailure'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.OperationComplete.OutputArgs',
		  Bin, TrUserData) ->
    id('decode_msg_Notify.OperationComplete.OutputArgs'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('Notify.OnBoardRequest', Bin,
		  TrUserData) ->
    id('decode_msg_Notify.OnBoardRequest'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Notify', Bin, TrUserData) ->
    id(decode_msg_Notify(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NotifyResp', Bin, TrUserData) ->
    id(decode_msg_NotifyResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DoubleValue', Bin, TrUserData) ->
    id(decode_msg_DoubleValue(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FloatValue', Bin, TrUserData) ->
    id(decode_msg_FloatValue(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Int64Value', Bin, TrUserData) ->
    id(decode_msg_Int64Value(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UInt64Value', Bin, TrUserData) ->
    id(decode_msg_UInt64Value(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Int32Value', Bin, TrUserData) ->
    id(decode_msg_Int32Value(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UInt32Value', Bin, TrUserData) ->
    id(decode_msg_UInt32Value(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BoolValue', Bin, TrUserData) ->
    id(decode_msg_BoolValue(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StringValue', Bin, TrUserData) ->
    id(decode_msg_StringValue(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BytesValue', Bin, TrUserData) ->
    id(decode_msg_BytesValue(Bin, TrUserData), TrUserData).



decode_msg_Record(Bin, TrUserData) ->
    dfp_read_field_def_Record(Bin, 0, 0, id([], TrUserData),
			      id([], TrUserData), id([], TrUserData),
			      id('PLAINTEXT', TrUserData), id(<<>>, TrUserData),
			      id(<<>>, TrUserData), id(undefined, TrUserData),
			      TrUserData).

dfp_read_field_def_Record(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_version(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Record(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_to_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Record(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_from_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Record(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_payload_security(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_Record(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_mac_signature(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Record(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_sender_cert(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Record(<<58, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_no_session_context(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData);
dfp_read_field_def_Record(<<66, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_Record_session_context(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Record(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, _) ->
    #'Record'{version = F@_1, to_id = F@_2, from_id = F@_3,
	      payload_security = F@_4, mac_signature = F@_5,
	      sender_cert = F@_6, record_type = F@_7};
dfp_read_field_def_Record(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_Record(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_Record(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Record(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
dg_read_field_def_Record(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Record_version(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_Record_to_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_Record_from_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_Record_payload_security(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      42 ->
	  d_field_Record_mac_signature(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
      50 ->
	  d_field_Record_sender_cert(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_Record_no_session_context(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
      66 ->
	  d_field_Record_session_context(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Record(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_Record(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_Record(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
	    3 ->
		skip_group_Record(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_Record(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_Record(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, _) ->
    #'Record'{version = F@_1, to_id = F@_2, from_id = F@_3,
	      payload_security = F@_4, mac_signature = F@_5,
	      sender_cert = F@_6, record_type = F@_7}.

d_field_Record_version(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_Record_version(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Record_version(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Record_to_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Record_to_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Record_to_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Record_from_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_Record_from_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Record_from_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Record_payload_security(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_Record_payload_security(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_Record_payload_security(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Record.PayloadSecurity'(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_Record_mac_signature(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    d_field_Record_mac_signature(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
d_field_Record_mac_signature(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_Record_sender_cert(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_Record_sender_cert(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_Record_sender_cert(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_Record_no_session_context(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData)
    when N < 57 ->
    d_field_Record_no_session_context(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, TrUserData);
d_field_Record_no_session_context(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_NoSessionContextRecord(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6,
			      case Prev of
				undefined ->
				    id({no_session_context, NewFValue},
				       TrUserData);
				{no_session_context, MVPrev} ->
				    id({no_session_context,
					merge_msg_NoSessionContextRecord(MVPrev,
									 NewFValue,
									 TrUserData)},
				       TrUserData);
				_ ->
				    id({no_session_context, NewFValue},
				       TrUserData)
			      end,
			      TrUserData).

d_field_Record_session_context(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData)
    when N < 57 ->
    d_field_Record_session_context(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, TrUserData);
d_field_Record_session_context(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SessionContextRecord(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Record(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6,
			      case Prev of
				undefined ->
				    id({session_context, NewFValue},
				       TrUserData);
				{session_context, MVPrev} ->
				    id({session_context,
					merge_msg_SessionContextRecord(MVPrev,
								       NewFValue,
								       TrUserData)},
				       TrUserData);
				_ ->
				    id({session_context, NewFValue}, TrUserData)
			      end,
			      TrUserData).

skip_varint_Record(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_Record(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
skip_varint_Record(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Record(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_Record(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    skip_length_delimited_Record(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
skip_length_delimited_Record(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Record(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_Record(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Record(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_Record(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Record(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_Record(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Record(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_NoSessionContextRecord(Bin, TrUserData) ->
    dfp_read_field_def_NoSessionContextRecord(Bin, 0, 0,
					      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_NoSessionContextRecord(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_NoSessionContextRecord_payload(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_NoSessionContextRecord(<<>>, 0, 0,
					  F@_1, _) ->
    #'NoSessionContextRecord'{payload = F@_1};
dfp_read_field_def_NoSessionContextRecord(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_NoSessionContextRecord(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_NoSessionContextRecord(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NoSessionContextRecord(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_NoSessionContextRecord(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_NoSessionContextRecord_payload(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NoSessionContextRecord(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_NoSessionContextRecord(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_NoSessionContextRecord(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_NoSessionContextRecord(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_NoSessionContextRecord(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_NoSessionContextRecord(<<>>, 0, 0,
					 F@_1, _) ->
    #'NoSessionContextRecord'{payload = F@_1}.

d_field_NoSessionContextRecord_payload(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_NoSessionContextRecord_payload(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_NoSessionContextRecord_payload(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_NoSessionContextRecord(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_NoSessionContextRecord(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_NoSessionContextRecord(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_NoSessionContextRecord(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NoSessionContextRecord(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_NoSessionContextRecord(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_NoSessionContextRecord(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_NoSessionContextRecord(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NoSessionContextRecord(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_NoSessionContextRecord(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NoSessionContextRecord(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_NoSessionContextRecord(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NoSessionContextRecord(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_NoSessionContextRecord(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NoSessionContextRecord(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_SessionContextRecord(Bin, TrUserData) ->
    dfp_read_field_def_SessionContextRecord(Bin, 0, 0,
					    id(0, TrUserData),
					    id(0, TrUserData),
					    id(0, TrUserData),
					    id(0, TrUserData),
					    id('NONE', TrUserData),
					    id('NONE', TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_SessionContextRecord(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_session_id(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData);
dfp_read_field_def_SessionContextRecord(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_sequence_id(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, TrUserData);
dfp_read_field_def_SessionContextRecord(<<24,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_expected_id(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, TrUserData);
dfp_read_field_def_SessionContextRecord(<<32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_retransmit_id(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData);
dfp_read_field_def_SessionContextRecord(<<40,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_payload_sar_state(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7,
						   TrUserData);
dfp_read_field_def_SessionContextRecord(<<48,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_payloadrec_sar_state(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      TrUserData);
dfp_read_field_def_SessionContextRecord(<<58,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    d_field_SessionContextRecord_payload(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
dfp_read_field_def_SessionContextRecord(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, R1,
					TrUserData) ->
    #'SessionContextRecord'{session_id = F@_1,
			    sequence_id = F@_2, expected_id = F@_3,
			    retransmit_id = F@_4, payload_sar_state = F@_5,
			    payloadrec_sar_state = F@_6,
			    payload = lists_reverse(R1, TrUserData)};
dfp_read_field_def_SessionContextRecord(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, TrUserData) ->
    dg_read_field_def_SessionContextRecord(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, TrUserData).

dg_read_field_def_SessionContextRecord(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SessionContextRecord(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_SessionContextRecord(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SessionContextRecord_session_id(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, TrUserData);
      16 ->
	  d_field_SessionContextRecord_sequence_id(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, TrUserData);
      24 ->
	  d_field_SessionContextRecord_expected_id(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, TrUserData);
      32 ->
	  d_field_SessionContextRecord_retransmit_id(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7,
						     TrUserData);
      40 ->
	  d_field_SessionContextRecord_payload_sar_state(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 TrUserData);
      48 ->
	  d_field_SessionContextRecord_payloadrec_sar_state(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData);
      58 ->
	  d_field_SessionContextRecord_payload(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SessionContextRecord(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 TrUserData);
	    1 ->
		skip_64_SessionContextRecord(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
	    2 ->
		skip_length_delimited_SessionContextRecord(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, TrUserData);
	    3 ->
		skip_group_SessionContextRecord(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_SessionContextRecord(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData)
	  end
    end;
dg_read_field_def_SessionContextRecord(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, R1,
				       TrUserData) ->
    #'SessionContextRecord'{session_id = F@_1,
			    sequence_id = F@_2, expected_id = F@_3,
			    retransmit_id = F@_4, payload_sar_state = F@_5,
			    payloadrec_sar_state = F@_6,
			    payload = lists_reverse(R1, TrUserData)}.

d_field_SessionContextRecord_session_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_session_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_SessionContextRecord_session_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, F@_4, F@_5,
					    F@_6, F@_7, TrUserData).

d_field_SessionContextRecord_sequence_id(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_sequence_id(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
d_field_SessionContextRecord_sequence_id(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					 F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, F@_4, F@_5,
					    F@_6, F@_7, TrUserData).

d_field_SessionContextRecord_expected_id(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_expected_id(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
d_field_SessionContextRecord_expected_id(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					 F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    F@_1, F@_2, NewFValue, F@_4, F@_5,
					    F@_6, F@_7, TrUserData).

d_field_SessionContextRecord_retransmit_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_retransmit_id(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7,
					       TrUserData);
d_field_SessionContextRecord_retransmit_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    F@_1, F@_2, F@_3, NewFValue, F@_5,
					    F@_6, F@_7, TrUserData).

d_field_SessionContextRecord_payload_sar_state(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_payload_sar_state(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData);
d_field_SessionContextRecord_payload_sar_state(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_SessionContextRecord.PayloadSARState'(begin
							    <<Res:32/signed-native>> =
								<<(X bsl N +
								     Acc):32/unsigned-native>>,
							    id(Res, TrUserData)
							  end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, NewFValue,
					    F@_6, F@_7, TrUserData).

d_field_SessionContextRecord_payloadrec_sar_state(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_payloadrec_sar_state(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7,
						      TrUserData);
d_field_SessionContextRecord_payloadrec_sar_state(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, _, F@_7,
						  TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_SessionContextRecord.PayloadSARState'(begin
							    <<Res:32/signed-native>> =
								<<(X bsl N +
								     Acc):32/unsigned-native>>,
							    id(Res, TrUserData)
							  end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    NewFValue, F@_7, TrUserData).

d_field_SessionContextRecord_payload(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 57 ->
    d_field_SessionContextRecord_payload(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
d_field_SessionContextRecord_payload(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_SessionContextRecord(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_SessionContextRecord(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    skip_varint_SessionContextRecord(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData);
skip_varint_SessionContextRecord(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    dfp_read_field_def_SessionContextRecord(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData).

skip_length_delimited_SessionContextRecord(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_SessionContextRecord(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7,
					       TrUserData);
skip_length_delimited_SessionContextRecord(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SessionContextRecord(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData).

skip_group_SessionContextRecord(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SessionContextRecord(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData).

skip_32_SessionContextRecord(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    dfp_read_field_def_SessionContextRecord(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData).

skip_64_SessionContextRecord(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    dfp_read_field_def_SessionContextRecord(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData).

decode_msg_Msg(Bin, TrUserData) ->
    dfp_read_field_def_Msg(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_Msg(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_Msg_header(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_Msg(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_Msg_body(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_Msg(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Msg'{header = F@_1, body = F@_2};
dfp_read_field_def_Msg(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_Msg(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_Msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_Msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Msg_header(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_Msg_body(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Msg(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_Msg(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_Msg(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Msg(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Msg'{header = F@_1, body = F@_2}.

d_field_Msg_header(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Msg_header(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_Msg_header(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Header(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Msg(RestF, 0, 0,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_Header(Prev, NewFValue, TrUserData)
			   end,
			   F@_2, TrUserData).

d_field_Msg_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Msg_body(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     TrUserData);
d_field_Msg_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Body(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Msg(RestF, 0, 0, F@_1,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_Body(Prev, NewFValue, TrUserData)
			   end,
			   TrUserData).

skip_varint_Msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_Msg(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_Msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_Msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Msg(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_Msg(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Msg(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_Msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_Msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

decode_msg_Header(Bin, TrUserData) ->
    dfp_read_field_def_Header(Bin, 0, 0, id([], TrUserData),
			      id('ERROR', TrUserData), TrUserData).

dfp_read_field_def_Header(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Header_msg_id(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Header(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Header_msg_type(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Header(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Header'{msg_id = F@_1, msg_type = F@_2};
dfp_read_field_def_Header(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_Header(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_Header(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Header(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_Header(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Header_msg_id(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      16 ->
	  d_field_Header_msg_type(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Header(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Header(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Header(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_Header(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_Header(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Header(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Header'{msg_id = F@_1, msg_type = F@_2}.

d_field_Header_msg_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Header_msg_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Header_msg_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Header(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_Header_msg_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Header_msg_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Header_msg_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Header.MsgType'(begin
						       <<Res:32/signed-native>> =
							   <<(X bsl N +
								Acc):32/unsigned-native>>,
						       id(Res, TrUserData)
						     end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Header(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_Header(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_Header(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_Header(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Header(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_Header(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Header(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_Header(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Header(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_Header(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Header(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_Header(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Header(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_Header(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Header(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_Body(Bin, TrUserData) ->
    dfp_read_field_def_Body(Bin, 0, 0,
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Body(<<10, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    d_field_Body_request(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Body(<<18, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    d_field_Body_response(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Body(<<26, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    d_field_Body_error(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Body(<<>>, 0, 0, F@_1, _) ->
    #'Body'{msg_body = F@_1};
dfp_read_field_def_Body(Other, Z1, Z2, F@_1,
			TrUserData) ->
    dg_read_field_def_Body(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_Body(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Body(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
dg_read_field_def_Body(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Body_request(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_Body_response(Rest, 0, 0, F@_1, TrUserData);
      26 -> d_field_Body_error(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Body(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Body(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Body(Rest, 0, 0, F@_1,
					   TrUserData);
	    3 ->
		skip_group_Body(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Body(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Body(<<>>, 0, 0, F@_1, _) ->
    #'Body'{msg_body = F@_1}.

d_field_Body_request(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_Body_request(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_Body_request(<<0:1, X:7, Rest/binary>>, N, Acc,
		     Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Request(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Body(RestF, 0, 0,
			    case Prev of
			      undefined -> id({request, NewFValue}, TrUserData);
			      {request, MVPrev} ->
				  id({request,
				      merge_msg_Request(MVPrev, NewFValue,
							TrUserData)},
				     TrUserData);
			      _ -> id({request, NewFValue}, TrUserData)
			    end,
			    TrUserData).

d_field_Body_response(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Body_response(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Body_response(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Response(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Body(RestF, 0, 0,
			    case Prev of
			      undefined ->
				  id({response, NewFValue}, TrUserData);
			      {response, MVPrev} ->
				  id({response,
				      merge_msg_Response(MVPrev, NewFValue,
							 TrUserData)},
				     TrUserData);
			      _ -> id({response, NewFValue}, TrUserData)
			    end,
			    TrUserData).

d_field_Body_error(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, TrUserData)
    when N < 57 ->
    d_field_Body_error(Rest, N + 7, X bsl N + Acc, F@_1,
		       TrUserData);
d_field_Body_error(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Error(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Body(RestF, 0, 0,
			    case Prev of
			      undefined -> id({error, NewFValue}, TrUserData);
			      {error, MVPrev} ->
				  id({error,
				      merge_msg_Error(MVPrev, NewFValue,
						      TrUserData)},
				     TrUserData);
			      _ -> id({error, NewFValue}, TrUserData)
			    end,
			    TrUserData).

skip_varint_Body(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    skip_varint_Body(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Body(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    dfp_read_field_def_Body(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_Body(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Body(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
skip_length_delimited_Body(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Body(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Body(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Body(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Body(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_Body(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_Body(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_Body(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_get(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_get_supported_dm(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_Request(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_get_instances(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_Request(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_set(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_add(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_delete(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_operate(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<66, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_notify(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<74, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_get_supported_protocol(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, _) ->
    #'Request'{req_type = F@_1};
dfp_read_field_def_Request(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Request_get(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_Request_get_supported_dm(Rest, 0, 0, F@_1,
					   TrUserData);
      26 ->
	  d_field_Request_get_instances(Rest, 0, 0, F@_1,
					TrUserData);
      34 -> d_field_Request_set(Rest, 0, 0, F@_1, TrUserData);
      42 -> d_field_Request_add(Rest, 0, 0, F@_1, TrUserData);
      50 ->
	  d_field_Request_delete(Rest, 0, 0, F@_1, TrUserData);
      58 ->
	  d_field_Request_operate(Rest, 0, 0, F@_1, TrUserData);
      66 ->
	  d_field_Request_notify(Rest, 0, 0, F@_1, TrUserData);
      74 ->
	  d_field_Request_get_supported_protocol(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Request(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_Request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, _) ->
    #'Request'{req_type = F@_1}.

d_field_Request_get(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_get(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_Request_get(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Get(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined -> id({get, NewFValue}, TrUserData);
				 {get, MVPrev} ->
				     id({get,
					 merge_msg_Get(MVPrev, NewFValue,
						       TrUserData)},
					TrUserData);
				 _ -> id({get, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_get_supported_dm(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_get_supported_dm(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_Request_get_supported_dm(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetSupportedDM(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined ->
				     id({get_supported_dm, NewFValue},
					TrUserData);
				 {get_supported_dm, MVPrev} ->
				     id({get_supported_dm,
					 merge_msg_GetSupportedDM(MVPrev,
								  NewFValue,
								  TrUserData)},
					TrUserData);
				 _ ->
				     id({get_supported_dm, NewFValue},
					TrUserData)
			       end,
			       TrUserData).

d_field_Request_get_instances(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_get_instances(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_Request_get_instances(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetInstances(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined ->
				     id({get_instances, NewFValue}, TrUserData);
				 {get_instances, MVPrev} ->
				     id({get_instances,
					 merge_msg_GetInstances(MVPrev,
								NewFValue,
								TrUserData)},
					TrUserData);
				 _ -> id({get_instances, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_set(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_set(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_Request_set(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Set(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined -> id({set, NewFValue}, TrUserData);
				 {set, MVPrev} ->
				     id({set,
					 merge_msg_Set(MVPrev, NewFValue,
						       TrUserData)},
					TrUserData);
				 _ -> id({set, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_add(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_add(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_Request_add(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Add(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined -> id({add, NewFValue}, TrUserData);
				 {add, MVPrev} ->
				     id({add,
					 merge_msg_Add(MVPrev, NewFValue,
						       TrUserData)},
					TrUserData);
				 _ -> id({add, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_delete(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_delete(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_Request_delete(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Delete(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined ->
				     id({delete, NewFValue}, TrUserData);
				 {delete, MVPrev} ->
				     id({delete,
					 merge_msg_Delete(MVPrev, NewFValue,
							  TrUserData)},
					TrUserData);
				 _ -> id({delete, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_operate(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_operate(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_Request_operate(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Operate(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined ->
				     id({operate, NewFValue}, TrUserData);
				 {operate, MVPrev} ->
				     id({operate,
					 merge_msg_Operate(MVPrev, NewFValue,
							   TrUserData)},
					TrUserData);
				 _ -> id({operate, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_notify(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_notify(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_Request_notify(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Notify(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined ->
				     id({notify, NewFValue}, TrUserData);
				 {notify, MVPrev} ->
				     id({notify,
					 merge_msg_Notify(MVPrev, NewFValue,
							  TrUserData)},
					TrUserData);
				 _ -> id({notify, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_get_supported_protocol(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_get_supported_protocol(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_Request_get_supported_protocol(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetSupportedProtocol(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 undefined ->
				     id({get_supported_protocol, NewFValue},
					TrUserData);
				 {get_supported_protocol, MVPrev} ->
				     id({get_supported_protocol,
					 merge_msg_GetSupportedProtocol(MVPrev,
									NewFValue,
									TrUserData)},
					TrUserData);
				 _ ->
				     id({get_supported_protocol, NewFValue},
					TrUserData)
			       end,
			       TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Response(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_get_resp(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_get_supported_dm_resp(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_get_instances_resp(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_set_resp(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_Response(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_add_resp(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_Response(<<50, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_delete_resp(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_Response(<<58, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_operate_resp(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_Response(<<66, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_notify_resp(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_Response(<<74, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_get_supported_protocol_resp(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    #'Response'{resp_type = F@_1};
dfp_read_field_def_Response(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Response_get_resp(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_Response_get_supported_dm_resp(Rest, 0, 0, F@_1,
						 TrUserData);
      26 ->
	  d_field_Response_get_instances_resp(Rest, 0, 0, F@_1,
					      TrUserData);
      34 ->
	  d_field_Response_set_resp(Rest, 0, 0, F@_1, TrUserData);
      42 ->
	  d_field_Response_add_resp(Rest, 0, 0, F@_1, TrUserData);
      50 ->
	  d_field_Response_delete_resp(Rest, 0, 0, F@_1,
				       TrUserData);
      58 ->
	  d_field_Response_operate_resp(Rest, 0, 0, F@_1,
					TrUserData);
      66 ->
	  d_field_Response_notify_resp(Rest, 0, 0, F@_1,
				       TrUserData);
      74 ->
	  d_field_Response_get_supported_protocol_resp(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Response(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_Response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    #'Response'{resp_type = F@_1}.

d_field_Response_get_resp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_get_resp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_Response_get_resp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetResp(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({get_resp, NewFValue}, TrUserData);
				  {get_resp, MVPrev} ->
				      id({get_resp,
					  merge_msg_GetResp(MVPrev, NewFValue,
							    TrUserData)},
					 TrUserData);
				  _ -> id({get_resp, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Response_get_supported_dm_resp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_get_supported_dm_resp(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_Response_get_supported_dm_resp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetSupportedDMResp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({get_supported_dm_resp, NewFValue},
					 TrUserData);
				  {get_supported_dm_resp, MVPrev} ->
				      id({get_supported_dm_resp,
					  merge_msg_GetSupportedDMResp(MVPrev,
								       NewFValue,
								       TrUserData)},
					 TrUserData);
				  _ ->
				      id({get_supported_dm_resp, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_Response_get_instances_resp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_get_instances_resp(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_Response_get_instances_resp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetInstancesResp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({get_instances_resp, NewFValue},
					 TrUserData);
				  {get_instances_resp, MVPrev} ->
				      id({get_instances_resp,
					  merge_msg_GetInstancesResp(MVPrev,
								     NewFValue,
								     TrUserData)},
					 TrUserData);
				  _ ->
				      id({get_instances_resp, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_Response_set_resp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_set_resp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_Response_set_resp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SetResp(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({set_resp, NewFValue}, TrUserData);
				  {set_resp, MVPrev} ->
				      id({set_resp,
					  merge_msg_SetResp(MVPrev, NewFValue,
							    TrUserData)},
					 TrUserData);
				  _ -> id({set_resp, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Response_add_resp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_add_resp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_Response_add_resp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AddResp(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({add_resp, NewFValue}, TrUserData);
				  {add_resp, MVPrev} ->
				      id({add_resp,
					  merge_msg_AddResp(MVPrev, NewFValue,
							    TrUserData)},
					 TrUserData);
				  _ -> id({add_resp, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Response_delete_resp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_delete_resp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_Response_delete_resp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DeleteResp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({delete_resp, NewFValue}, TrUserData);
				  {delete_resp, MVPrev} ->
				      id({delete_resp,
					  merge_msg_DeleteResp(MVPrev,
							       NewFValue,
							       TrUserData)},
					 TrUserData);
				  _ -> id({delete_resp, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Response_operate_resp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_operate_resp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_Response_operate_resp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OperateResp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({operate_resp, NewFValue}, TrUserData);
				  {operate_resp, MVPrev} ->
				      id({operate_resp,
					  merge_msg_OperateResp(MVPrev,
								NewFValue,
								TrUserData)},
					 TrUserData);
				  _ -> id({operate_resp, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Response_notify_resp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_notify_resp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_Response_notify_resp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_NotifyResp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({notify_resp, NewFValue}, TrUserData);
				  {notify_resp, MVPrev} ->
				      id({notify_resp,
					  merge_msg_NotifyResp(MVPrev,
							       NewFValue,
							       TrUserData)},
					 TrUserData);
				  _ -> id({notify_resp, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Response_get_supported_protocol_resp(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_get_supported_protocol_resp(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_field_Response_get_supported_protocol_resp(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetSupportedProtocolResp(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({get_supported_protocol_resp,
					  NewFValue},
					 TrUserData);
				  {get_supported_protocol_resp, MVPrev} ->
				      id({get_supported_protocol_resp,
					  merge_msg_GetSupportedProtocolResp(MVPrev,
									     NewFValue,
									     TrUserData)},
					 TrUserData);
				  _ ->
				      id({get_supported_protocol_resp,
					  NewFValue},
					 TrUserData)
				end,
				TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

'decode_msg_Error.ParamError'(Bin, TrUserData) ->
    'dfp_read_field_def_Error.ParamError'(Bin, 0, 0,
					  id([], TrUserData), id(0, TrUserData),
					  id([], TrUserData), TrUserData).

'dfp_read_field_def_Error.ParamError'(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_Error.ParamError_param_path'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Error.ParamError'(<<21,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_Error.ParamError_err_code'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
'dfp_read_field_def_Error.ParamError'(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_Error.ParamError_err_msg'(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
'dfp_read_field_def_Error.ParamError'(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #'Error.ParamError'{param_path = F@_1, err_code = F@_2,
			err_msg = F@_3};
'dfp_read_field_def_Error.ParamError'(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_Error.ParamError'(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_Error.ParamError'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Error.ParamError'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
'dg_read_field_def_Error.ParamError'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Error.ParamError_param_path'(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      21 ->
	  'd_field_Error.ParamError_err_code'(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      26 ->
	  'd_field_Error.ParamError_err_msg'(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Error.ParamError'(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		'skip_64_Error.ParamError'(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		'skip_length_delimited_Error.ParamError'(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		'skip_group_Error.ParamError'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		'skip_32_Error.ParamError'(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
'dg_read_field_def_Error.ParamError'(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #'Error.ParamError'{param_path = F@_1, err_code = F@_2,
			err_msg = F@_3}.

'd_field_Error.ParamError_param_path'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Error.ParamError_param_path'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
'd_field_Error.ParamError_param_path'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Error.ParamError'(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, TrUserData).

'd_field_Error.ParamError_err_code'(<<Value:32/little,
				      Rest/binary>>,
				    Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_Error.ParamError'(Rest, Z1, Z2,
					  F@_1, id(Value, TrUserData), F@_3,
					  TrUserData).

'd_field_Error.ParamError_err_msg'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Error.ParamError_err_msg'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
'd_field_Error.ParamError_err_msg'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Error.ParamError'(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, TrUserData).

'skip_varint_Error.ParamError'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_Error.ParamError'(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
'skip_varint_Error.ParamError'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Error.ParamError'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_Error.ParamError'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Error.ParamError'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
'skip_length_delimited_Error.ParamError'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Error.ParamError'(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

'skip_group_Error.ParamError'(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Error.ParamError'(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

'skip_32_Error.ParamError'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Error.ParamError'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

'skip_64_Error.ParamError'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Error.ParamError'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_Error(Bin, TrUserData) ->
    dfp_read_field_def_Error(Bin, 0, 0, id(0, TrUserData),
			     id([], TrUserData), id([], TrUserData),
			     TrUserData).

dfp_read_field_def_Error(<<13, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Error_err_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_Error(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Error_err_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Error(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Error_param_errs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Error(<<>>, 0, 0, F@_1, F@_2, R1,
			 TrUserData) ->
    #'Error'{err_code = F@_1, err_msg = F@_2,
	     param_errs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Error(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    dg_read_field_def_Error(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

dg_read_field_def_Error(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Error(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Error(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_Error_err_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      18 ->
	  d_field_Error_err_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      26 ->
	  d_field_Error_param_errs(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Error(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    1 ->
		skip_64_Error(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_Error(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    3 ->
		skip_group_Error(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    5 ->
		skip_32_Error(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_Error(<<>>, 0, 0, F@_1, F@_2, R1,
			TrUserData) ->
    #'Error'{err_code = F@_1, err_msg = F@_2,
	     param_errs = lists_reverse(R1, TrUserData)}.

d_field_Error_err_code(<<Value:32/little, Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2,
			     id(Value, TrUserData), F@_2, F@_3, TrUserData).

d_field_Error_err_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Error_err_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_Error_err_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Error(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, TrUserData).

d_field_Error_param_errs(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Error_param_errs(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Error_param_errs(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Error.ParamError'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Error(RestF, 0, 0, F@_1, F@_2,
			     cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Error(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Error(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
skip_varint_Error(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_length_delimited_Error(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Error(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Error(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Error(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData).

skip_group_Error(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Error(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_32_Error(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_64_Error(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

decode_msg_Get(Bin, TrUserData) ->
    dfp_read_field_def_Get(Bin, 0, 0, id([], TrUserData),
			   TrUserData).

dfp_read_field_def_Get(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    d_field_Get_param_paths(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Get(<<>>, 0, 0, R1, TrUserData) ->
    #'Get'{param_paths = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Get(Other, Z1, Z2, F@_1,
		       TrUserData) ->
    dg_read_field_def_Get(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_Get(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Get(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
dg_read_field_def_Get(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Get_param_paths(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Get(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Get(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Get(Rest, 0, 0, F@_1, TrUserData);
	    3 ->
		skip_group_Get(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Get(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Get(<<>>, 0, 0, R1, TrUserData) ->
    #'Get'{param_paths = lists_reverse(R1, TrUserData)}.

d_field_Get_param_paths(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Get_param_paths(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_Get_param_paths(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Get(RestF, 0, 0,
			   cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Get(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    skip_varint_Get(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Get(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Get(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_Get(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Get(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
skip_length_delimited_Get(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Get(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Get(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Get(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Get(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	    TrUserData) ->
    dfp_read_field_def_Get(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_Get(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	    TrUserData) ->
    dfp_read_field_def_Get(Rest, Z1, Z2, F@_1, TrUserData).

'decode_msg_GetResp.RequestedPathResult'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_GetResp.RequestedPathResult'(Bin, 0,
						     0, id([], TrUserData),
						     id(0, TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     TrUserData).

'dfp_read_field_def_GetResp.RequestedPathResult'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'd_field_GetResp.RequestedPathResult_requested_path'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_GetResp.RequestedPathResult'(<<21,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'd_field_GetResp.RequestedPathResult_err_code'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
'dfp_read_field_def_GetResp.RequestedPathResult'(<<26,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'd_field_GetResp.RequestedPathResult_err_msg'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
'dfp_read_field_def_GetResp.RequestedPathResult'(<<34,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'd_field_GetResp.RequestedPathResult_resolved_path_results'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData);
'dfp_read_field_def_GetResp.RequestedPathResult'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, R1,
						 TrUserData) ->
    #'GetResp.RequestedPathResult'{requested_path = F@_1,
				   err_code = F@_2, err_msg = F@_3,
				   resolved_path_results =
				       lists_reverse(R1, TrUserData)};
'dfp_read_field_def_GetResp.RequestedPathResult'(Other,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'dg_read_field_def_GetResp.RequestedPathResult'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData).

'dg_read_field_def_GetResp.RequestedPathResult'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetResp.RequestedPathResult'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
'dg_read_field_def_GetResp.RequestedPathResult'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetResp.RequestedPathResult_requested_path'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      21 ->
	  'd_field_GetResp.RequestedPathResult_err_code'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, TrUserData);
      26 ->
	  'd_field_GetResp.RequestedPathResult_err_msg'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      34 ->
	  'd_field_GetResp.RequestedPathResult_resolved_path_results'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetResp.RequestedPathResult'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
	    1 ->
		'skip_64_GetResp.RequestedPathResult'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    2 ->
		'skip_length_delimited_GetResp.RequestedPathResult'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
	    3 ->
		'skip_group_GetResp.RequestedPathResult'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3, F@_4,
							 TrUserData);
	    5 ->
		'skip_32_GetResp.RequestedPathResult'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData)
	  end
    end;
'dg_read_field_def_GetResp.RequestedPathResult'(<<>>, 0,
						0, F@_1, F@_2, F@_3, R1,
						TrUserData) ->
    #'GetResp.RequestedPathResult'{requested_path = F@_1,
				   err_code = F@_2, err_msg = F@_3,
				   resolved_path_results =
				       lists_reverse(R1, TrUserData)}.

'd_field_GetResp.RequestedPathResult_requested_path'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_GetResp.RequestedPathResult_requested_path'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_GetResp.RequestedPathResult_requested_path'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetResp.RequestedPathResult'(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, F@_4, TrUserData).

'd_field_GetResp.RequestedPathResult_err_code'(<<Value:32/little,
						 Rest/binary>>,
					       Z1, Z2, F@_1, _, F@_3, F@_4,
					       TrUserData) ->
    'dfp_read_field_def_GetResp.RequestedPathResult'(Rest,
						     Z1, Z2, F@_1,
						     id(Value, TrUserData),
						     F@_3, F@_4, TrUserData).

'd_field_GetResp.RequestedPathResult_err_msg'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'd_field_GetResp.RequestedPathResult_err_msg'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'd_field_GetResp.RequestedPathResult_err_msg'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _, F@_4,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetResp.RequestedPathResult'(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, F@_4,
						     TrUserData).

'd_field_GetResp.RequestedPathResult_resolved_path_results'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'd_field_GetResp.RequestedPathResult_resolved_path_results'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'd_field_GetResp.RequestedPathResult_resolved_path_results'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetResp.ResolvedPathResult'(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetResp.RequestedPathResult'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     cons(NewFValue, Prev,
							  TrUserData),
						     TrUserData).

'skip_varint_GetResp.RequestedPathResult'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    'skip_varint_GetResp.RequestedPathResult'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData);
'skip_varint_GetResp.RequestedPathResult'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    'dfp_read_field_def_GetResp.RequestedPathResult'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData).

'skip_length_delimited_GetResp.RequestedPathResult'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetResp.RequestedPathResult'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
'skip_length_delimited_GetResp.RequestedPathResult'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetResp.RequestedPathResult'(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, TrUserData).

'skip_group_GetResp.RequestedPathResult'(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetResp.RequestedPathResult'(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData).

'skip_32_GetResp.RequestedPathResult'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_GetResp.RequestedPathResult'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData).

'skip_64_GetResp.RequestedPathResult'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_GetResp.RequestedPathResult'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData).

'decode_msg_GetResp.ResolvedPathResult'(Bin,
					TrUserData) ->
    'dfp_read_field_def_GetResp.ResolvedPathResult'(Bin, 0,
						    0, id([], TrUserData),
						    'tr_decode_init_default_GetResp.ResolvedPathResult.result_params'([],
														      TrUserData),
						    TrUserData).

'dfp_read_field_def_GetResp.ResolvedPathResult'(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'd_field_GetResp.ResolvedPathResult_resolved_path'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_GetResp.ResolvedPathResult'(<<18,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'd_field_GetResp.ResolvedPathResult_result_params'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_GetResp.ResolvedPathResult'(<<>>, 0,
						0, F@_1, R1, TrUserData) ->
    #'GetResp.ResolvedPathResult'{resolved_path = F@_1,
				  result_params =
				      'tr_decode_repeated_finalize_GetResp.ResolvedPathResult.result_params'(R1,
													     TrUserData)};
'dfp_read_field_def_GetResp.ResolvedPathResult'(Other,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dg_read_field_def_GetResp.ResolvedPathResult'(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData).

'dg_read_field_def_GetResp.ResolvedPathResult'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetResp.ResolvedPathResult'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
'dg_read_field_def_GetResp.ResolvedPathResult'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetResp.ResolvedPathResult_resolved_path'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      18 ->
	  'd_field_GetResp.ResolvedPathResult_result_params'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetResp.ResolvedPathResult'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    1 ->
		'skip_64_GetResp.ResolvedPathResult'(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_GetResp.ResolvedPathResult'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    3 ->
		'skip_group_GetResp.ResolvedPathResult'(Rest, Key bsr 3,
							0, F@_1, F@_2,
							TrUserData);
	    5 ->
		'skip_32_GetResp.ResolvedPathResult'(Rest, 0, 0, F@_1,
						     F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_GetResp.ResolvedPathResult'(<<>>, 0,
					       0, F@_1, R1, TrUserData) ->
    #'GetResp.ResolvedPathResult'{resolved_path = F@_1,
				  result_params =
				      'tr_decode_repeated_finalize_GetResp.ResolvedPathResult.result_params'(R1,
													     TrUserData)}.

'd_field_GetResp.ResolvedPathResult_resolved_path'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_GetResp.ResolvedPathResult_resolved_path'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_GetResp.ResolvedPathResult_resolved_path'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetResp.ResolvedPathResult'(RestF,
						    0, 0, NewFValue, F@_2,
						    TrUserData).

'd_field_GetResp.ResolvedPathResult_result_params'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_GetResp.ResolvedPathResult_result_params'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_GetResp.ResolvedPathResult_result_params'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, Prev,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetResp.ResolvedPathResult'(RestF,
						    0, 0, F@_1,
						    'tr_decode_repeated_add_elem_GetResp.ResolvedPathResult.result_params'(NewFValue,
															   Prev,
															   TrUserData),
						    TrUserData).

'skip_varint_GetResp.ResolvedPathResult'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_GetResp.ResolvedPathResult'(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
'skip_varint_GetResp.ResolvedPathResult'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_GetResp.ResolvedPathResult'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'skip_length_delimited_GetResp.ResolvedPathResult'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetResp.ResolvedPathResult'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'skip_length_delimited_GetResp.ResolvedPathResult'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetResp.ResolvedPathResult'(Rest2,
						    0, 0, F@_1, F@_2,
						    TrUserData).

'skip_group_GetResp.ResolvedPathResult'(Bin, FNum, Z2,
					F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetResp.ResolvedPathResult'(Rest, 0,
						    Z2, F@_1, F@_2, TrUserData).

'skip_32_GetResp.ResolvedPathResult'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_GetResp.ResolvedPathResult'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'skip_64_GetResp.ResolvedPathResult'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_GetResp.ResolvedPathResult'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

decode_msg_GetResp(Bin, TrUserData) ->
    dfp_read_field_def_GetResp(Bin, 0, 0,
			       id([], TrUserData), TrUserData).

dfp_read_field_def_GetResp(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_GetResp_req_path_results(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_GetResp(<<>>, 0, 0, R1,
			   TrUserData) ->
    #'GetResp'{req_path_results =
		   lists_reverse(R1, TrUserData)};
dfp_read_field_def_GetResp(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_GetResp(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_GetResp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetResp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_GetResp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetResp_req_path_results(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_GetResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_GetResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GetResp(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_GetResp(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_GetResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GetResp(<<>>, 0, 0, R1, TrUserData) ->
    #'GetResp'{req_path_results =
		   lists_reverse(R1, TrUserData)}.

d_field_GetResp_req_path_results(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetResp_req_path_results(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_GetResp_req_path_results(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetResp.RequestedPathResult'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetResp(RestF, 0, 0,
			       cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_GetResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_GetResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_GetResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_GetResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_GetResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetResp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetResp(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_GetResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetResp(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_GetResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_GetResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_GetResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_GetResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_GetSupportedDM(Bin, TrUserData) ->
    dfp_read_field_def_GetSupportedDM(Bin, 0, 0,
				      id([], TrUserData), id(false, TrUserData),
				      id(false, TrUserData),
				      id(false, TrUserData),
				      id(false, TrUserData), TrUserData).

dfp_read_field_def_GetSupportedDM(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetSupportedDM_obj_paths(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetSupportedDM(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetSupportedDM_first_level_only(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
dfp_read_field_def_GetSupportedDM(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetSupportedDM_return_commands(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_GetSupportedDM(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetSupportedDM_return_events(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetSupportedDM(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetSupportedDM_return_params(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetSupportedDM(<<>>, 0, 0, R1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData) ->
    #'GetSupportedDM'{obj_paths =
			  lists_reverse(R1, TrUserData),
		      first_level_only = F@_2, return_commands = F@_3,
		      return_events = F@_4, return_params = F@_5};
dfp_read_field_def_GetSupportedDM(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_GetSupportedDM(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_GetSupportedDM(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetSupportedDM(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_GetSupportedDM(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetSupportedDM_obj_paths(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_GetSupportedDM_first_level_only(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
      24 ->
	  d_field_GetSupportedDM_return_commands(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      32 ->
	  d_field_GetSupportedDM_return_events(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      40 ->
	  d_field_GetSupportedDM_return_params(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetSupportedDM(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_GetSupportedDM(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_GetSupportedDM(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_GetSupportedDM(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_GetSupportedDM(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_GetSupportedDM(<<>>, 0, 0, R1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData) ->
    #'GetSupportedDM'{obj_paths =
			  lists_reverse(R1, TrUserData),
		      first_level_only = F@_2, return_commands = F@_3,
		      return_events = F@_4, return_params = F@_5}.

d_field_GetSupportedDM_obj_paths(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_GetSupportedDM_obj_paths(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_GetSupportedDM_obj_paths(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetSupportedDM(RestF, 0, 0,
				      cons(NewFValue, Prev, TrUserData), F@_2,
				      F@_3, F@_4, F@_5, TrUserData).

d_field_GetSupportedDM_first_level_only(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 57 ->
    d_field_GetSupportedDM_first_level_only(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
d_field_GetSupportedDM_first_level_only(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_GetSupportedDM(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_GetSupportedDM_return_commands(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_GetSupportedDM_return_commands(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_GetSupportedDM_return_commands(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_GetSupportedDM(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_GetSupportedDM_return_events(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_GetSupportedDM_return_events(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_GetSupportedDM_return_events(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_GetSupportedDM(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_GetSupportedDM_return_params(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_GetSupportedDM_return_params(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_GetSupportedDM_return_params(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_GetSupportedDM(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_GetSupportedDM(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_GetSupportedDM(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_GetSupportedDM(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_GetSupportedDM(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_GetSupportedDM(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_GetSupportedDM(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_GetSupportedDM(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetSupportedDM(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_GetSupportedDM(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetSupportedDM(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_GetSupportedDM(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_GetSupportedDM(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_GetSupportedDM(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_GetSupportedDM(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_GetSupportedDMResp.RequestedObjectResult'(Bin,
						      TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Bin,
								  0, 0,
								  id([],
								     TrUserData),
								  id(0,
								     TrUserData),
								  id([],
								     TrUserData),
								  id([],
								     TrUserData),
								  id([],
								     TrUserData),
								  TrUserData).

'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<10,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_req_obj_path'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData);
'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<21,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_err_code'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData);
'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<26,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_err_msg'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5,
							       TrUserData);
'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<34,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_data_model_inst_uri'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   F@_5,
									   TrUserData);
'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<42,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<>>,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, R1,
							      TrUserData) ->
    #'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
						    = F@_1,
						err_code = F@_2, err_msg = F@_3,
						data_model_inst_uri = F@_4,
						supported_objs =
						    lists_reverse(R1,
								  TrUserData)};
'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Other,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5,
							      TrUserData) ->
    'dg_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Other,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData).

'dg_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 F@_5,
								 TrUserData);
'dg_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetSupportedDMResp.RequestedObjectResult_req_obj_path'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  TrUserData);
      21 ->
	  'd_field_GetSupportedDMResp.RequestedObjectResult_err_code'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
      26 ->
	  'd_field_GetSupportedDMResp.RequestedObjectResult_err_msg'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4, F@_5,
								     TrUserData);
      34 ->
	  'd_field_GetSupportedDMResp.RequestedObjectResult_data_model_inst_uri'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 TrUserData);
      42 ->
	  'd_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetSupportedDMResp.RequestedObjectResult'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData);
	    1 ->
		'skip_64_GetSupportedDMResp.RequestedObjectResult'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData);
	    2 ->
		'skip_length_delimited_GetSupportedDMResp.RequestedObjectResult'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 TrUserData);
	    3 ->
		'skip_group_GetSupportedDMResp.RequestedObjectResult'(Rest,
								      Key bsr 3,
								      0, F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
	    5 ->
		'skip_32_GetSupportedDMResp.RequestedObjectResult'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData)
	  end
    end;
'dg_read_field_def_GetSupportedDMResp.RequestedObjectResult'(<<>>,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, R1,
							     TrUserData) ->
    #'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
						    = F@_1,
						err_code = F@_2, err_msg = F@_3,
						data_model_inst_uri = F@_4,
						supported_objs =
						    lists_reverse(R1,
								  TrUserData)}.

'd_field_GetSupportedDMResp.RequestedObjectResult_req_obj_path'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_req_obj_path'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData);
'd_field_GetSupportedDMResp.RequestedObjectResult_req_obj_path'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, _, F@_2,
								F@_3, F@_4,
								F@_5,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(RestF,
								  0, 0,
								  NewFValue,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData).

'd_field_GetSupportedDMResp.RequestedObjectResult_err_code'(<<Value:32/little,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    F@_3, F@_4, F@_5,
							    TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  id(Value,
								     TrUserData),
								  F@_3, F@_4,
								  F@_5,
								  TrUserData).

'd_field_GetSupportedDMResp.RequestedObjectResult_err_msg'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_err_msg'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       F@_4, F@_5,
							       TrUserData);
'd_field_GetSupportedDMResp.RequestedObjectResult_err_msg'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   _, F@_4, F@_5,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2,
								  NewFValue,
								  F@_4, F@_5,
								  TrUserData).

'd_field_GetSupportedDMResp.RequestedObjectResult_data_model_inst_uri'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_data_model_inst_uri'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   F@_5,
									   TrUserData);
'd_field_GetSupportedDMResp.RequestedObjectResult_data_model_inst_uri'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       F@_3, _,
								       F@_5,
								       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  NewFValue,
								  F@_5,
								  TrUserData).

'd_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
'd_field_GetSupportedDMResp.RequestedObjectResult_supported_objs'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  F@_4, Prev,
								  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetSupportedDMResp.SupportedObjectResult'(Bs,
										     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  cons(NewFValue,
								       Prev,
								       TrUserData),
								  TrUserData).

'skip_varint_GetSupportedDMResp.RequestedObjectResult'(<<1:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       TrUserData) ->
    'skip_varint_GetSupportedDMResp.RequestedObjectResult'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   TrUserData);
'skip_varint_GetSupportedDMResp.RequestedObjectResult'(<<0:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData).

'skip_length_delimited_GetSupportedDMResp.RequestedObjectResult'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetSupportedDMResp.RequestedObjectResult'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData);
'skip_length_delimited_GetSupportedDMResp.RequestedObjectResult'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest2,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData).

'skip_group_GetSupportedDMResp.RequestedObjectResult'(Bin,
						      FNum, Z2, F@_1, F@_2,
						      F@_3, F@_4, F@_5,
						      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest,
								  0, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData).

'skip_32_GetSupportedDMResp.RequestedObjectResult'(<<_:32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData).

'skip_64_GetSupportedDMResp.RequestedObjectResult'(<<_:64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.RequestedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData).

'decode_msg_GetSupportedDMResp.SupportedObjectResult'(Bin,
						      TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Bin,
								  0, 0,
								  id([],
								     TrUserData),
								  id('OBJ_READ_ONLY',
								     TrUserData),
								  id(false,
								     TrUserData),
								  id([],
								     TrUserData),
								  id([],
								     TrUserData),
								  id([],
								     TrUserData),
								  TrUserData).

'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<10,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_obj_path'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<16,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_access'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<24,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_is_multi_instance'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<34,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<42,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(Rest,
									Z1, Z2,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<50,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(Rest,
									Z1, Z2,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<>>,
							      0, 0, F@_1, F@_2,
							      F@_3, R1, R2, R3,
							      TrUserData) ->
    #'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
						    = F@_1,
						access = F@_2,
						is_multi_instance = F@_3,
						supported_commands =
						    lists_reverse(R1,
								  TrUserData),
						supported_events =
						    lists_reverse(R2,
								  TrUserData),
						supported_params =
						    lists_reverse(R3,
								  TrUserData)};
'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Other,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData) ->
    'dg_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Other,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 TrUserData).

'dg_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 F@_5, F@_6,
								 TrUserData);
'dg_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6,
							     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetSupportedDMResp.SupportedObjectResult_supported_obj_path'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										TrUserData);
      16 ->
	  'd_field_GetSupportedDMResp.SupportedObjectResult_access'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6,
								    TrUserData);
      24 ->
	  'd_field_GetSupportedDMResp.SupportedObjectResult_is_multi_instance'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       F@_5,
									       F@_6,
									       TrUserData);
      34 ->
	  'd_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										TrUserData);
      42 ->
	  'd_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      TrUserData);
      50 ->
	  'd_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetSupportedDMResp.SupportedObjectResult'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       TrUserData);
	    1 ->
		'skip_64_GetSupportedDMResp.SupportedObjectResult'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData);
	    2 ->
		'skip_length_delimited_GetSupportedDMResp.SupportedObjectResult'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 F@_6,
										 TrUserData);
	    3 ->
		'skip_group_GetSupportedDMResp.SupportedObjectResult'(Rest,
								      Key bsr 3,
								      0, F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      TrUserData);
	    5 ->
		'skip_32_GetSupportedDMResp.SupportedObjectResult'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData)
	  end
    end;
'dg_read_field_def_GetSupportedDMResp.SupportedObjectResult'(<<>>,
							     0, 0, F@_1, F@_2,
							     F@_3, R1, R2, R3,
							     TrUserData) ->
    #'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
						    = F@_1,
						access = F@_2,
						is_multi_instance = F@_3,
						supported_commands =
						    lists_reverse(R1,
								  TrUserData),
						supported_events =
						    lists_reverse(R2,
								  TrUserData),
						supported_params =
						    lists_reverse(R3,
								  TrUserData)}.

'd_field_GetSupportedDMResp.SupportedObjectResult_supported_obj_path'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_obj_path'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  TrUserData);
'd_field_GetSupportedDMResp.SupportedObjectResult_supported_obj_path'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc, _,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(RestF,
								  0, 0,
								  NewFValue,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'd_field_GetSupportedDMResp.SupportedObjectResult_access'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_access'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      TrUserData);
'd_field_GetSupportedDMResp.SupportedObjectResult_access'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, _, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_GetSupportedDMResp.ObjAccessType'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(RestF,
								  0, 0, F@_1,
								  NewFValue,
								  F@_3, F@_4,
								  F@_5, F@_6,
								  TrUserData).

'd_field_GetSupportedDMResp.SupportedObjectResult_is_multi_instance'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5, F@_6,
								     TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_is_multi_instance'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 TrUserData);
'd_field_GetSupportedDMResp.SupportedObjectResult_is_multi_instance'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     _, F@_4,
								     F@_5, F@_6,
								     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2,
								  NewFValue,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'd_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  TrUserData);
'd_field_GetSupportedDMResp.SupportedObjectResult_supported_commands'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      Prev,
								      F@_5,
								      F@_6,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetSupportedDMResp.SupportedCommandResult'(Bs,
										      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  cons(NewFValue,
								       Prev,
								       TrUserData),
								  F@_5, F@_6,
								  TrUserData).

'd_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5, F@_6,
								    TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									TrUserData);
'd_field_GetSupportedDMResp.SupportedObjectResult_supported_events'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    Prev, F@_6,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetSupportedDMResp.SupportedEventResult'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  cons(NewFValue,
								       Prev,
								       TrUserData),
								  F@_6,
								  TrUserData).

'd_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5, F@_6,
								    TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									TrUserData);
'd_field_GetSupportedDMResp.SupportedObjectResult_supported_params'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5, Prev,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetSupportedDMResp.SupportedParamResult'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(RestF,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  cons(NewFValue,
								       Prev,
								       TrUserData),
								  TrUserData).

'skip_varint_GetSupportedDMResp.SupportedObjectResult'(<<1:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       TrUserData) ->
    'skip_varint_GetSupportedDMResp.SupportedObjectResult'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
'skip_varint_GetSupportedDMResp.SupportedObjectResult'(<<0:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'skip_length_delimited_GetSupportedDMResp.SupportedObjectResult'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetSupportedDMResp.SupportedObjectResult'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5, F@_6,
								     TrUserData);
'skip_length_delimited_GetSupportedDMResp.SupportedObjectResult'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Rest2,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'skip_group_GetSupportedDMResp.SupportedObjectResult'(Bin,
						      FNum, Z2, F@_1, F@_2,
						      F@_3, F@_4, F@_5, F@_6,
						      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Rest,
								  0, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'skip_32_GetSupportedDMResp.SupportedObjectResult'(<<_:32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6,
						   TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'skip_64_GetSupportedDMResp.SupportedObjectResult'(<<_:64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6,
						   TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedObjectResult'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData).

'decode_msg_GetSupportedDMResp.SupportedParamResult'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Bin,
								 0, 0,
								 id([],
								    TrUserData),
								 id('PARAM_READ_ONLY',
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(<<10,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedParamResult_param_name'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(<<16,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedParamResult_access'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(<<>>,
							     0, 0, F@_1, F@_2,
							     _) ->
    #'GetSupportedDMResp.SupportedParamResult'{param_name =
						   F@_1,
					       access = F@_2};
'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Other,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'dg_read_field_def_GetSupportedDMResp.SupportedParamResult'(Other,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'dg_read_field_def_GetSupportedDMResp.SupportedParamResult'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetSupportedDMResp.SupportedParamResult'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'dg_read_field_def_GetSupportedDMResp.SupportedParamResult'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetSupportedDMResp.SupportedParamResult_param_name'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      16 ->
	  'd_field_GetSupportedDMResp.SupportedParamResult_access'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetSupportedDMResp.SupportedParamResult'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    1 ->
		'skip_64_GetSupportedDMResp.SupportedParamResult'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    2 ->
		'skip_length_delimited_GetSupportedDMResp.SupportedParamResult'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										TrUserData);
	    3 ->
		'skip_group_GetSupportedDMResp.SupportedParamResult'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2,
								     TrUserData);
	    5 ->
		'skip_32_GetSupportedDMResp.SupportedParamResult'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData)
	  end
    end;
'dg_read_field_def_GetSupportedDMResp.SupportedParamResult'(<<>>,
							    0, 0, F@_1, F@_2,
							    _) ->
    #'GetSupportedDMResp.SupportedParamResult'{param_name =
						   F@_1,
					       access = F@_2}.

'd_field_GetSupportedDMResp.SupportedParamResult_param_name'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedParamResult_param_name'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_GetSupportedDMResp.SupportedParamResult_param_name'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, _, F@_2,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(RestF,
								 0, 0,
								 NewFValue,
								 F@_2,
								 TrUserData).

'd_field_GetSupportedDMResp.SupportedParamResult_access'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedParamResult_access'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'd_field_GetSupportedDMResp.SupportedParamResult_access'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, _,
							 TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_GetSupportedDMResp.ParamAccessType'(begin
							  <<Res:32/signed-native>> =
							      <<(X bsl N +
								   Acc):32/unsigned-native>>,
							  id(Res, TrUserData)
							end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(RestF,
								 0, 0, F@_1,
								 NewFValue,
								 TrUserData).

'skip_varint_GetSupportedDMResp.SupportedParamResult'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'skip_varint_GetSupportedDMResp.SupportedParamResult'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'skip_varint_GetSupportedDMResp.SupportedParamResult'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_length_delimited_GetSupportedDMResp.SupportedParamResult'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetSupportedDMResp.SupportedParamResult'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'skip_length_delimited_GetSupportedDMResp.SupportedParamResult'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Rest2,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData).

'skip_group_GetSupportedDMResp.SupportedParamResult'(Bin,
						     FNum, Z2, F@_1, F@_2,
						     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Rest,
								 0, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_32_GetSupportedDMResp.SupportedParamResult'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_64_GetSupportedDMResp.SupportedParamResult'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedParamResult'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'decode_msg_GetSupportedDMResp.SupportedCommandResult'(Bin,
						       TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Bin,
								   0, 0,
								   id([],
								      TrUserData),
								   id([],
								      TrUserData),
								   id([],
								      TrUserData),
								   TrUserData).

'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<10,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedCommandResult_command_name'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3,
								     TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<18,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(Rest,
									Z1, Z2,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<26,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<>>,
							       0, 0, F@_1, R1,
							       R2,
							       TrUserData) ->
    #'GetSupportedDMResp.SupportedCommandResult'{command_name
						     = F@_1,
						 input_arg_names =
						     lists_reverse(R1,
								   TrUserData),
						 output_arg_names =
						     lists_reverse(R2,
								   TrUserData)};
'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Other,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    'dg_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Other,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  TrUserData).

'dg_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3,
								  TrUserData);
'dg_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetSupportedDMResp.SupportedCommandResult_command_name'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData);
      18 ->
	  'd_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      TrUserData);
      26 ->
	  'd_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetSupportedDMResp.SupportedCommandResult'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
	    1 ->
		'skip_64_GetSupportedDMResp.SupportedCommandResult'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    2 ->
		'skip_length_delimited_GetSupportedDMResp.SupportedCommandResult'(Rest,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData);
	    3 ->
		'skip_group_GetSupportedDMResp.SupportedCommandResult'(Rest,
								       Key bsr
									 3,
								       0, F@_1,
								       F@_2,
								       F@_3,
								       TrUserData);
	    5 ->
		'skip_32_GetSupportedDMResp.SupportedCommandResult'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData)
	  end
    end;
'dg_read_field_def_GetSupportedDMResp.SupportedCommandResult'(<<>>,
							      0, 0, F@_1, R1,
							      R2, TrUserData) ->
    #'GetSupportedDMResp.SupportedCommandResult'{command_name
						     = F@_1,
						 input_arg_names =
						     lists_reverse(R1,
								   TrUserData),
						 output_arg_names =
						     lists_reverse(R2,
								   TrUserData)}.

'd_field_GetSupportedDMResp.SupportedCommandResult_command_name'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedCommandResult_command_name'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3,
								     TrUserData);
'd_field_GetSupportedDMResp.SupportedCommandResult_command_name'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, _,
								 F@_2, F@_3,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(RestF,
								   0, 0,
								   NewFValue,
								   F@_2, F@_3,
								   TrUserData).

'd_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3,
								    TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
'd_field_GetSupportedDMResp.SupportedCommandResult_input_arg_names'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, Prev,
								    F@_3,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(RestF,
								   0, 0, F@_1,
								   cons(NewFValue,
									Prev,
									TrUserData),
								   F@_3,
								   TrUserData).

'd_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3,
								     TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 TrUserData);
'd_field_GetSupportedDMResp.SupportedCommandResult_output_arg_names'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(RestF,
								   0, 0, F@_1,
								   F@_2,
								   cons(NewFValue,
									Prev,
									TrUserData),
								   TrUserData).

'skip_varint_GetSupportedDMResp.SupportedCommandResult'(<<1:1,
							  _:7, Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'skip_varint_GetSupportedDMResp.SupportedCommandResult'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData);
'skip_varint_GetSupportedDMResp.SupportedCommandResult'(<<0:1,
							  _:7, Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData).

'skip_length_delimited_GetSupportedDMResp.SupportedCommandResult'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetSupportedDMResp.SupportedCommandResult'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData);
'skip_length_delimited_GetSupportedDMResp.SupportedCommandResult'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Rest2,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData).

'skip_group_GetSupportedDMResp.SupportedCommandResult'(Bin,
						       FNum, Z2, F@_1, F@_2,
						       F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Rest,
								   0, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData).

'skip_32_GetSupportedDMResp.SupportedCommandResult'(<<_:32,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData).

'skip_64_GetSupportedDMResp.SupportedCommandResult'(<<_:64,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedCommandResult'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData).

'decode_msg_GetSupportedDMResp.SupportedEventResult'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Bin,
								 0, 0,
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(<<10,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedEventResult_event_name'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_GetSupportedDMResp.SupportedEventResult_arg_names'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(<<>>,
							     0, 0, F@_1, R1,
							     TrUserData) ->
    #'GetSupportedDMResp.SupportedEventResult'{event_name =
						   F@_1,
					       arg_names =
						   lists_reverse(R1,
								 TrUserData)};
'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Other,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'dg_read_field_def_GetSupportedDMResp.SupportedEventResult'(Other,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'dg_read_field_def_GetSupportedDMResp.SupportedEventResult'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetSupportedDMResp.SupportedEventResult'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'dg_read_field_def_GetSupportedDMResp.SupportedEventResult'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetSupportedDMResp.SupportedEventResult_event_name'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      18 ->
	  'd_field_GetSupportedDMResp.SupportedEventResult_arg_names'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetSupportedDMResp.SupportedEventResult'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    1 ->
		'skip_64_GetSupportedDMResp.SupportedEventResult'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    2 ->
		'skip_length_delimited_GetSupportedDMResp.SupportedEventResult'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										TrUserData);
	    3 ->
		'skip_group_GetSupportedDMResp.SupportedEventResult'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2,
								     TrUserData);
	    5 ->
		'skip_32_GetSupportedDMResp.SupportedEventResult'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData)
	  end
    end;
'dg_read_field_def_GetSupportedDMResp.SupportedEventResult'(<<>>,
							    0, 0, F@_1, R1,
							    TrUserData) ->
    #'GetSupportedDMResp.SupportedEventResult'{event_name =
						   F@_1,
					       arg_names =
						   lists_reverse(R1,
								 TrUserData)}.

'd_field_GetSupportedDMResp.SupportedEventResult_event_name'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedEventResult_event_name'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_GetSupportedDMResp.SupportedEventResult_event_name'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, _, F@_2,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(RestF,
								 0, 0,
								 NewFValue,
								 F@_2,
								 TrUserData).

'd_field_GetSupportedDMResp.SupportedEventResult_arg_names'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_GetSupportedDMResp.SupportedEventResult_arg_names'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_GetSupportedDMResp.SupportedEventResult_arg_names'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(RestF,
								 0, 0, F@_1,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 TrUserData).

'skip_varint_GetSupportedDMResp.SupportedEventResult'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'skip_varint_GetSupportedDMResp.SupportedEventResult'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'skip_varint_GetSupportedDMResp.SupportedEventResult'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_length_delimited_GetSupportedDMResp.SupportedEventResult'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetSupportedDMResp.SupportedEventResult'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'skip_length_delimited_GetSupportedDMResp.SupportedEventResult'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Rest2,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData).

'skip_group_GetSupportedDMResp.SupportedEventResult'(Bin,
						     FNum, Z2, F@_1, F@_2,
						     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Rest,
								 0, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_32_GetSupportedDMResp.SupportedEventResult'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_64_GetSupportedDMResp.SupportedEventResult'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_GetSupportedDMResp.SupportedEventResult'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

decode_msg_GetSupportedDMResp(Bin, TrUserData) ->
    dfp_read_field_def_GetSupportedDMResp(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_GetSupportedDMResp(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_GetSupportedDMResp_req_obj_results(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_GetSupportedDMResp(<<>>, 0, 0, R1,
				      TrUserData) ->
    #'GetSupportedDMResp'{req_obj_results =
			      lists_reverse(R1, TrUserData)};
dfp_read_field_def_GetSupportedDMResp(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_GetSupportedDMResp(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_GetSupportedDMResp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetSupportedDMResp(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetSupportedDMResp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetSupportedDMResp_req_obj_results(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetSupportedDMResp(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_GetSupportedDMResp(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_GetSupportedDMResp(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_GetSupportedDMResp(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_GetSupportedDMResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GetSupportedDMResp(<<>>, 0, 0, R1,
				     TrUserData) ->
    #'GetSupportedDMResp'{req_obj_results =
			      lists_reverse(R1, TrUserData)}.

d_field_GetSupportedDMResp_req_obj_results(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetSupportedDMResp_req_obj_results(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_GetSupportedDMResp_req_obj_results(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetSupportedDMResp.RequestedObjectResult'(Bs,
										     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetSupportedDMResp(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_GetSupportedDMResp(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GetSupportedDMResp(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_GetSupportedDMResp(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedDMResp(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_GetSupportedDMResp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetSupportedDMResp(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetSupportedDMResp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetSupportedDMResp(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_GetSupportedDMResp(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetSupportedDMResp(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_GetSupportedDMResp(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedDMResp(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_GetSupportedDMResp(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedDMResp(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_GetInstances(Bin, TrUserData) ->
    dfp_read_field_def_GetInstances(Bin, 0, 0,
				    id([], TrUserData), id(false, TrUserData),
				    TrUserData).

dfp_read_field_def_GetInstances(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_GetInstances_obj_paths(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_GetInstances(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_GetInstances_first_level_only(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_GetInstances(<<>>, 0, 0, R1, F@_2,
				TrUserData) ->
    #'GetInstances'{obj_paths =
			lists_reverse(R1, TrUserData),
		    first_level_only = F@_2};
dfp_read_field_def_GetInstances(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_GetInstances(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_GetInstances(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetInstances(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_GetInstances(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetInstances_obj_paths(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  d_field_GetInstances_first_level_only(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetInstances(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_GetInstances(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_GetInstances(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_GetInstances(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_GetInstances(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_GetInstances(<<>>, 0, 0, R1, F@_2,
			       TrUserData) ->
    #'GetInstances'{obj_paths =
			lists_reverse(R1, TrUserData),
		    first_level_only = F@_2}.

d_field_GetInstances_obj_paths(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GetInstances_obj_paths(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_GetInstances_obj_paths(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetInstances(RestF, 0, 0,
				    cons(NewFValue, Prev, TrUserData), F@_2,
				    TrUserData).

d_field_GetInstances_first_level_only(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GetInstances_first_level_only(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_GetInstances_first_level_only(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_GetInstances(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_GetInstances(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_GetInstances(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_GetInstances(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GetInstances(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_GetInstances(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetInstances(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_GetInstances(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetInstances(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_GetInstances(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetInstances(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_GetInstances(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GetInstances(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_GetInstances(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GetInstances(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

'decode_msg_GetInstancesResp.RequestedPathResult'(Bin,
						  TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Bin,
							      0, 0,
							      id([],
								 TrUserData),
							      id(0, TrUserData),
							      id([],
								 TrUserData),
							      id([],
								 TrUserData),
							      TrUserData).

'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(<<10,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'd_field_GetInstancesResp.RequestedPathResult_requested_path'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(<<21,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'd_field_GetInstancesResp.RequestedPathResult_err_code'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData);
'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(<<26,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'd_field_GetInstancesResp.RequestedPathResult_err_msg'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(<<34,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'd_field_GetInstancesResp.RequestedPathResult_curr_insts'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(<<>>,
							  0, 0, F@_1, F@_2,
							  F@_3, R1,
							  TrUserData) ->
    #'GetInstancesResp.RequestedPathResult'{requested_path =
						F@_1,
					    err_code = F@_2, err_msg = F@_3,
					    curr_insts =
						lists_reverse(R1, TrUserData)};
'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Other,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'dg_read_field_def_GetInstancesResp.RequestedPathResult'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'dg_read_field_def_GetInstancesResp.RequestedPathResult'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetInstancesResp.RequestedPathResult'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
'dg_read_field_def_GetInstancesResp.RequestedPathResult'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetInstancesResp.RequestedPathResult_requested_path'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
      21 ->
	  'd_field_GetInstancesResp.RequestedPathResult_err_code'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
      26 ->
	  'd_field_GetInstancesResp.RequestedPathResult_err_msg'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
      34 ->
	  'd_field_GetInstancesResp.RequestedPathResult_curr_insts'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetInstancesResp.RequestedPathResult'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
	    1 ->
		'skip_64_GetInstancesResp.RequestedPathResult'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
	    2 ->
		'skip_length_delimited_GetInstancesResp.RequestedPathResult'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
	    3 ->
		'skip_group_GetInstancesResp.RequestedPathResult'(Rest,
								  Key bsr 3, 0,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  TrUserData);
	    5 ->
		'skip_32_GetInstancesResp.RequestedPathResult'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData)
	  end
    end;
'dg_read_field_def_GetInstancesResp.RequestedPathResult'(<<>>,
							 0, 0, F@_1, F@_2, F@_3,
							 R1, TrUserData) ->
    #'GetInstancesResp.RequestedPathResult'{requested_path =
						F@_1,
					    err_code = F@_2, err_msg = F@_3,
					    curr_insts =
						lists_reverse(R1, TrUserData)}.

'd_field_GetInstancesResp.RequestedPathResult_requested_path'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData)
    when N < 57 ->
    'd_field_GetInstancesResp.RequestedPathResult_requested_path'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  TrUserData);
'd_field_GetInstancesResp.RequestedPathResult_requested_path'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, _, F@_2,
							      F@_3, F@_4,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(RestF,
							      0, 0, NewFValue,
							      F@_2, F@_3, F@_4,
							      TrUserData).

'd_field_GetInstancesResp.RequestedPathResult_err_code'(<<Value:32/little,
							  Rest/binary>>,
							Z1, Z2, F@_1, _, F@_3,
							F@_4, TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Rest,
							      Z1, Z2, F@_1,
							      id(Value,
								 TrUserData),
							      F@_3, F@_4,
							      TrUserData).

'd_field_GetInstancesResp.RequestedPathResult_err_msg'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData)
    when N < 57 ->
    'd_field_GetInstancesResp.RequestedPathResult_err_msg'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
'd_field_GetInstancesResp.RequestedPathResult_err_msg'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, _,
						       F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(RestF,
							      0, 0, F@_1, F@_2,
							      NewFValue, F@_4,
							      TrUserData).

'd_field_GetInstancesResp.RequestedPathResult_curr_insts'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData)
    when N < 57 ->
    'd_field_GetInstancesResp.RequestedPathResult_curr_insts'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, TrUserData);
'd_field_GetInstancesResp.RequestedPathResult_curr_insts'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetInstancesResp.CurrInstance'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(RestF,
							      0, 0, F@_1, F@_2,
							      F@_3,
							      cons(NewFValue,
								   Prev,
								   TrUserData),
							      TrUserData).

'skip_varint_GetInstancesResp.RequestedPathResult'(<<1:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    'skip_varint_GetInstancesResp.RequestedPathResult'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
'skip_varint_GetInstancesResp.RequestedPathResult'(<<0:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData).

'skip_length_delimited_GetInstancesResp.RequestedPathResult'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetInstancesResp.RequestedPathResult'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
'skip_length_delimited_GetInstancesResp.RequestedPathResult'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Rest2,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData).

'skip_group_GetInstancesResp.RequestedPathResult'(Bin,
						  FNum, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Rest,
							      0, Z2, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData).

'skip_32_GetInstancesResp.RequestedPathResult'(<<_:32,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData).

'skip_64_GetInstancesResp.RequestedPathResult'(<<_:64,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.RequestedPathResult'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData).

'decode_msg_GetInstancesResp.CurrInstance'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(Bin,
						       0, 0, id([], TrUserData),
						       'tr_decode_init_default_GetInstancesResp.CurrInstance.unique_keys'([],
															  TrUserData),
						       TrUserData).

'dfp_read_field_def_GetInstancesResp.CurrInstance'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'd_field_GetInstancesResp.CurrInstance_instantiated_obj_path'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_GetInstancesResp.CurrInstance'(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'd_field_GetInstancesResp.CurrInstance_unique_keys'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
'dfp_read_field_def_GetInstancesResp.CurrInstance'(<<>>,
						   0, 0, F@_1, R1,
						   TrUserData) ->
    #'GetInstancesResp.CurrInstance'{instantiated_obj_path =
					 F@_1,
				     unique_keys =
					 'tr_decode_repeated_finalize_GetInstancesResp.CurrInstance.unique_keys'(R1,
														 TrUserData)};
'dfp_read_field_def_GetInstancesResp.CurrInstance'(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dg_read_field_def_GetInstancesResp.CurrInstance'(Other,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

'dg_read_field_def_GetInstancesResp.CurrInstance'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GetInstancesResp.CurrInstance'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'dg_read_field_def_GetInstancesResp.CurrInstance'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GetInstancesResp.CurrInstance_instantiated_obj_path'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      18 ->
	  'd_field_GetInstancesResp.CurrInstance_unique_keys'(Rest,
							      0, 0, F@_1, F@_2,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GetInstancesResp.CurrInstance'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    1 ->
		'skip_64_GetInstancesResp.CurrInstance'(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_GetInstancesResp.CurrInstance'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    3 ->
		'skip_group_GetInstancesResp.CurrInstance'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, TrUserData);
	    5 ->
		'skip_32_GetInstancesResp.CurrInstance'(Rest, 0, 0,
							F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_GetInstancesResp.CurrInstance'(<<>>,
						  0, 0, F@_1, R1, TrUserData) ->
    #'GetInstancesResp.CurrInstance'{instantiated_obj_path =
					 F@_1,
				     unique_keys =
					 'tr_decode_repeated_finalize_GetInstancesResp.CurrInstance.unique_keys'(R1,
														 TrUserData)}.

'd_field_GetInstancesResp.CurrInstance_instantiated_obj_path'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_GetInstancesResp.CurrInstance_instantiated_obj_path'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_GetInstancesResp.CurrInstance_instantiated_obj_path'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, _, F@_2,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(RestF,
						       0, 0, NewFValue, F@_2,
						       TrUserData).

'd_field_GetInstancesResp.CurrInstance_unique_keys'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'd_field_GetInstancesResp.CurrInstance_unique_keys'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'd_field_GetInstancesResp.CurrInstance_unique_keys'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, Prev,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(RestF,
						       0, 0, F@_1,
						       'tr_decode_repeated_add_elem_GetInstancesResp.CurrInstance.unique_keys'(NewFValue,
															       Prev,
															       TrUserData),
						       TrUserData).

'skip_varint_GetInstancesResp.CurrInstance'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_GetInstancesResp.CurrInstance'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'skip_varint_GetInstancesResp.CurrInstance'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'skip_length_delimited_GetInstancesResp.CurrInstance'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    'skip_length_delimited_GetInstancesResp.CurrInstance'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'skip_length_delimited_GetInstancesResp.CurrInstance'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(Rest2,
						       0, 0, F@_1, F@_2,
						       TrUserData).

'skip_group_GetInstancesResp.CurrInstance'(Bin, FNum,
					   Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(Rest,
						       0, Z2, F@_1, F@_2,
						       TrUserData).

'skip_32_GetInstancesResp.CurrInstance'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'skip_64_GetInstancesResp.CurrInstance'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_GetInstancesResp.CurrInstance'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

decode_msg_GetInstancesResp(Bin, TrUserData) ->
    dfp_read_field_def_GetInstancesResp(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_GetInstancesResp(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_GetInstancesResp_req_path_results(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_GetInstancesResp(<<>>, 0, 0, R1,
				    TrUserData) ->
    #'GetInstancesResp'{req_path_results =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_GetInstancesResp(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_GetInstancesResp(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_GetInstancesResp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetInstancesResp(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetInstancesResp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetInstancesResp_req_path_results(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetInstancesResp(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_GetInstancesResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GetInstancesResp(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_GetInstancesResp(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_GetInstancesResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GetInstancesResp(<<>>, 0, 0, R1,
				   TrUserData) ->
    #'GetInstancesResp'{req_path_results =
			    lists_reverse(R1, TrUserData)}.

d_field_GetInstancesResp_req_path_results(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetInstancesResp_req_path_results(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_GetInstancesResp_req_path_results(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_GetInstancesResp.RequestedPathResult'(Bs,
										 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetInstancesResp(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_GetInstancesResp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GetInstancesResp(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_GetInstancesResp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetInstancesResp(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_GetInstancesResp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetInstancesResp(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetInstancesResp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetInstancesResp(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_GetInstancesResp(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetInstancesResp(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_GetInstancesResp(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_GetInstancesResp(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_GetInstancesResp(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_GetInstancesResp(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_GetSupportedProtocol(Bin, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocol(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_GetSupportedProtocol(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_GetSupportedProtocol_controller_supported_protocol_versions(Rest,
									Z1, Z2,
									F@_1,
									TrUserData);
dfp_read_field_def_GetSupportedProtocol(<<>>, 0, 0,
					F@_1, _) ->
    #'GetSupportedProtocol'{controller_supported_protocol_versions
				= F@_1};
dfp_read_field_def_GetSupportedProtocol(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_GetSupportedProtocol(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_GetSupportedProtocol(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetSupportedProtocol(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetSupportedProtocol(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetSupportedProtocol_controller_supported_protocol_versions(Rest,
									      0,
									      0,
									      F@_1,
									      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetSupportedProtocol(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_GetSupportedProtocol(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_GetSupportedProtocol(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_GetSupportedProtocol(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_GetSupportedProtocol(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_GetSupportedProtocol(<<>>, 0, 0, F@_1,
				       _) ->
    #'GetSupportedProtocol'{controller_supported_protocol_versions
				= F@_1}.

d_field_GetSupportedProtocol_controller_supported_protocol_versions(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1,
								    TrUserData)
    when N < 57 ->
    d_field_GetSupportedProtocol_controller_supported_protocol_versions(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									TrUserData);
d_field_GetSupportedProtocol_controller_supported_protocol_versions(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc, _,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetSupportedProtocol(RestF, 0, 0,
					    NewFValue, TrUserData).

skip_varint_GetSupportedProtocol(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GetSupportedProtocol(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_GetSupportedProtocol(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocol(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_GetSupportedProtocol(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetSupportedProtocol(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetSupportedProtocol(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetSupportedProtocol(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_GetSupportedProtocol(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetSupportedProtocol(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_GetSupportedProtocol(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocol(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_GetSupportedProtocol(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocol(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_GetSupportedProtocolResp(Bin, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocolResp(Bin, 0, 0,
						id([], TrUserData), TrUserData).

dfp_read_field_def_GetSupportedProtocolResp(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_GetSupportedProtocolResp_agent_supported_protocol_versions(Rest,
								       Z1, Z2,
								       F@_1,
								       TrUserData);
dfp_read_field_def_GetSupportedProtocolResp(<<>>, 0, 0,
					    F@_1, _) ->
    #'GetSupportedProtocolResp'{agent_supported_protocol_versions
				    = F@_1};
dfp_read_field_def_GetSupportedProtocolResp(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_GetSupportedProtocolResp(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_GetSupportedProtocolResp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetSupportedProtocolResp(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetSupportedProtocolResp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetSupportedProtocolResp_agent_supported_protocol_versions(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetSupportedProtocolResp(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_GetSupportedProtocolResp(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_GetSupportedProtocolResp(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_GetSupportedProtocolResp(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_GetSupportedProtocolResp(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_GetSupportedProtocolResp(<<>>, 0, 0,
					   F@_1, _) ->
    #'GetSupportedProtocolResp'{agent_supported_protocol_versions
				    = F@_1}.

d_field_GetSupportedProtocolResp_agent_supported_protocol_versions(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData)
    when N < 57 ->
    d_field_GetSupportedProtocolResp_agent_supported_protocol_versions(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       TrUserData);
d_field_GetSupportedProtocolResp_agent_supported_protocol_versions(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, _,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetSupportedProtocolResp(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_GetSupportedProtocolResp(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GetSupportedProtocolResp(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_GetSupportedProtocolResp(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocolResp(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_GetSupportedProtocolResp(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetSupportedProtocolResp(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_GetSupportedProtocolResp(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetSupportedProtocolResp(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_GetSupportedProtocolResp(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetSupportedProtocolResp(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_GetSupportedProtocolResp(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocolResp(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_GetSupportedProtocolResp(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetSupportedProtocolResp(Rest, Z1,
						Z2, F@_1, TrUserData).

'decode_msg_Add.CreateObject'(Bin, TrUserData) ->
    'dfp_read_field_def_Add.CreateObject'(Bin, 0, 0,
					  id([], TrUserData),
					  id([], TrUserData), TrUserData).

'dfp_read_field_def_Add.CreateObject'(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Add.CreateObject_obj_path'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_Add.CreateObject'(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Add.CreateObject_param_settings'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'dfp_read_field_def_Add.CreateObject'(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    #'Add.CreateObject'{obj_path = F@_1,
			param_settings = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_Add.CreateObject'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_Add.CreateObject'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_Add.CreateObject'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Add.CreateObject'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_Add.CreateObject'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Add.CreateObject_obj_path'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  'd_field_Add.CreateObject_param_settings'(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Add.CreateObject'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_Add.CreateObject'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_Add.CreateObject'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_Add.CreateObject'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_Add.CreateObject'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_Add.CreateObject'(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #'Add.CreateObject'{obj_path = F@_1,
			param_settings = lists_reverse(R1, TrUserData)}.

'd_field_Add.CreateObject_obj_path'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Add.CreateObject_obj_path'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Add.CreateObject_obj_path'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Add.CreateObject'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_Add.CreateObject_param_settings'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Add.CreateObject_param_settings'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'd_field_Add.CreateObject_param_settings'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Add.CreateParamSetting'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Add.CreateObject'(RestF, 0, 0, F@_1,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

'skip_varint_Add.CreateObject'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_Add.CreateObject'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_Add.CreateObject'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Add.CreateObject'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_Add.CreateObject'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Add.CreateObject'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_Add.CreateObject'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Add.CreateObject'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_Add.CreateObject'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Add.CreateObject'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_Add.CreateObject'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Add.CreateObject'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_Add.CreateObject'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Add.CreateObject'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'decode_msg_Add.CreateParamSetting'(Bin, TrUserData) ->
    'dfp_read_field_def_Add.CreateParamSetting'(Bin, 0, 0,
						id([], TrUserData),
						id([], TrUserData),
						id(false, TrUserData),
						TrUserData).

'dfp_read_field_def_Add.CreateParamSetting'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_Add.CreateParamSetting_param'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Add.CreateParamSetting'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_Add.CreateParamSetting_value'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Add.CreateParamSetting'(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_Add.CreateParamSetting_required'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Add.CreateParamSetting'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'Add.CreateParamSetting'{param = F@_1, value = F@_2,
			      required = F@_3};
'dfp_read_field_def_Add.CreateParamSetting'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_Add.CreateParamSetting'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_Add.CreateParamSetting'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Add.CreateParamSetting'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_Add.CreateParamSetting'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Add.CreateParamSetting_param'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      18 ->
	  'd_field_Add.CreateParamSetting_value'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      24 ->
	  'd_field_Add.CreateParamSetting_required'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Add.CreateParamSetting'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_Add.CreateParamSetting'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_Add.CreateParamSetting'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_Add.CreateParamSetting'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_Add.CreateParamSetting'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_Add.CreateParamSetting'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'Add.CreateParamSetting'{param = F@_1, value = F@_2,
			      required = F@_3}.

'd_field_Add.CreateParamSetting_param'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Add.CreateParamSetting_param'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_Add.CreateParamSetting_param'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Add.CreateParamSetting'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_Add.CreateParamSetting_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Add.CreateParamSetting_value'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_Add.CreateParamSetting_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Add.CreateParamSetting'(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

'd_field_Add.CreateParamSetting_required'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Add.CreateParamSetting_required'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
'd_field_Add.CreateParamSetting_required'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_Add.CreateParamSetting'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_Add.CreateParamSetting'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_Add.CreateParamSetting'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_Add.CreateParamSetting'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Add.CreateParamSetting'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_Add.CreateParamSetting'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_Add.CreateParamSetting'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_Add.CreateParamSetting'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Add.CreateParamSetting'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_Add.CreateParamSetting'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Add.CreateParamSetting'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_Add.CreateParamSetting'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Add.CreateParamSetting'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_Add.CreateParamSetting'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Add.CreateParamSetting'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_Add(Bin, TrUserData) ->
    dfp_read_field_def_Add(Bin, 0, 0, id(false, TrUserData),
			   id([], TrUserData), TrUserData).

dfp_read_field_def_Add(<<8, Rest/binary>>, Z1, Z2, F@_1,
		       F@_2, TrUserData) ->
    d_field_Add_allow_partial(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_Add(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_Add_create_objs(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Add(<<>>, 0, 0, F@_1, R1,
		       TrUserData) ->
    #'Add'{allow_partial = F@_1,
	   create_objs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Add(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_Add(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_Add(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Add(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_Add(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Add_allow_partial(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_Add_create_objs(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Add(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Add(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Add(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_Add(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_Add(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Add(<<>>, 0, 0, F@_1, R1,
		      TrUserData) ->
    #'Add'{allow_partial = F@_1,
	   create_objs = lists_reverse(R1, TrUserData)}.

d_field_Add_allow_partial(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Add_allow_partial(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_Add_allow_partial(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Add(RestF, 0, 0, NewFValue, F@_2,
			   TrUserData).

d_field_Add_create_objs(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Add_create_objs(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Add_create_objs(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Add.CreateObject'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Add(RestF, 0, 0, F@_1,
			   cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Add(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_Add(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Add(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Add(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_Add(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Add(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_Add(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Add(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_Add(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Add(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_Add(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Add(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_Add(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Add(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

'decode_msg_AddResp.CreatedObjectResult'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult'(Bin, 0,
						     0, id([], TrUserData),
						     id(undefined, TrUserData),
						     TrUserData).

'dfp_read_field_def_AddResp.CreatedObjectResult'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_AddResp.CreatedObjectResult_requested_path'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult'(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_AddResp.CreatedObjectResult_oper_status'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult'(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #'AddResp.CreatedObjectResult'{requested_path = F@_1,
				   oper_status = F@_2};
'dfp_read_field_def_AddResp.CreatedObjectResult'(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dg_read_field_def_AddResp.CreatedObjectResult'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'dg_read_field_def_AddResp.CreatedObjectResult'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_AddResp.CreatedObjectResult'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'dg_read_field_def_AddResp.CreatedObjectResult'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_AddResp.CreatedObjectResult_requested_path'(Rest,
							       0, 0, F@_1, F@_2,
							       TrUserData);
      18 ->
	  'd_field_AddResp.CreatedObjectResult_oper_status'(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_AddResp.CreatedObjectResult'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		'skip_64_AddResp.CreatedObjectResult'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_AddResp.CreatedObjectResult'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		'skip_group_AddResp.CreatedObjectResult'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		'skip_32_AddResp.CreatedObjectResult'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_AddResp.CreatedObjectResult'(<<>>, 0,
						0, F@_1, F@_2, _) ->
    #'AddResp.CreatedObjectResult'{requested_path = F@_1,
				   oper_status = F@_2}.

'd_field_AddResp.CreatedObjectResult_requested_path'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult_requested_path'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'd_field_AddResp.CreatedObjectResult_requested_path'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult'(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

'd_field_AddResp.CreatedObjectResult_oper_status'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult_oper_status'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'd_field_AddResp.CreatedObjectResult_oper_status'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, Prev,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_AddResp.CreatedObjectResult.OperationStatus'(Bs,
											TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult'(RestF,
						     0, 0, F@_1,
						     if Prev == undefined ->
							    NewFValue;
							true ->
							    'merge_msg_AddResp.CreatedObjectResult.OperationStatus'(Prev,
														    NewFValue,
														    TrUserData)
						     end,
						     TrUserData).

'skip_varint_AddResp.CreatedObjectResult'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_AddResp.CreatedObjectResult'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'skip_varint_AddResp.CreatedObjectResult'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_length_delimited_AddResp.CreatedObjectResult'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_AddResp.CreatedObjectResult'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'skip_length_delimited_AddResp.CreatedObjectResult'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AddResp.CreatedObjectResult'(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

'skip_group_AddResp.CreatedObjectResult'(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AddResp.CreatedObjectResult'(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

'skip_32_AddResp.CreatedObjectResult'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_64_AddResp.CreatedObjectResult'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'decode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Bin,
									  TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Bin,
										      0,
										      0,
										      id(0,
											 TrUserData),
										      id([],
											 TrUserData),
										      TrUserData).

'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<13,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_code'(Rest,
										    Z1,
										    Z2,
										    F@_1,
										    F@_2,
										    TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<18,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<>>,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  _) ->
    #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
									= F@_1,
								    err_msg =
									F@_2};
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Other,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData) ->
    'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Other,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData).

'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     TrUserData);
'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_code'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  TrUserData);
      18 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
											   0,
											   0,
											   F@_1,
											   F@_2,
											   TrUserData);
	    1 ->
		'skip_64_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       TrUserData);
	    2 ->
		'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
												     0,
												     0,
												     F@_1,
												     F@_2,
												     TrUserData);
	    3 ->
		'skip_group_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
											  Key
											    bsr
											    3,
											  0,
											  F@_1,
											  F@_2,
											  TrUserData);
	    5 ->
		'skip_32_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       TrUserData)
	  end
    end;
'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<>>,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 _) ->
    #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
									= F@_1,
								    err_msg =
									F@_2}.

'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_code'(<<Value:32/little,
										  Rest/binary>>,
										Z1,
										Z2,
										_,
										F@_2,
										TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      id(Value,
											 TrUserData),
										      F@_2,
										      TrUserData).

'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_msg'(<<1:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       F@_2,
									       TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
										   N
										     +
										     7,
										   X
										     bsl
										     N
										     +
										     Acc,
										   F@_1,
										   F@_2,
										   TrUserData);
'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationFailure_err_msg'(<<0:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       _,
									       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(RestF,
										      0,
										      0,
										      F@_1,
										      NewFValue,
										      TrUserData).

'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<1:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   TrUserData) ->
    'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       TrUserData);
'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<0:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      TrUserData).

'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<1:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     TrUserData)
    when N < 57 ->
    'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
											 N
											   +
											   7,
											 X
											   bsl
											   N
											   +
											   Acc,
											 F@_1,
											 F@_2,
											 TrUserData);
'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<0:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest2,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      TrUserData).

'skip_group_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Bin,
									  FNum,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      0,
										      Z2,
										      F@_1,
										      F@_2,
										      TrUserData).

'skip_32_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<_:32,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      TrUserData).

'skip_64_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(<<_:64,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      TrUserData).

'decode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Bin,
									  TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Bin,
										      0,
										      0,
										      id([],
											 TrUserData),
										      id([],
											 TrUserData),
										      'tr_decode_init_default_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'([],
																							TrUserData),
										      TrUserData).

'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<10,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_instantiated_path'(Rest,
											     Z1,
											     Z2,
											     F@_1,
											     F@_2,
											     F@_3,
											     TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<18,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<26,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(Rest,
										       Z1,
										       Z2,
										       F@_1,
										       F@_2,
										       F@_3,
										       TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<>>,
										  0,
										  0,
										  F@_1,
										  R1,
										  R2,
										  TrUserData) ->
    #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
									= F@_1,
								    param_errs =
									lists_reverse(R1,
										      TrUserData),
								    unique_keys
									=
									'tr_decode_repeated_finalize_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(R2,
																					       TrUserData)};
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Other,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Other,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData);
'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_instantiated_path'(Rest,
												   0,
												   0,
												   F@_1,
												   F@_2,
												   F@_3,
												   TrUserData);
      18 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(Rest,
											    0,
											    0,
											    F@_1,
											    F@_2,
											    F@_3,
											    TrUserData);
      26 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(Rest,
											     0,
											     0,
											     F@_1,
											     F@_2,
											     F@_3,
											     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
											   0,
											   0,
											   F@_1,
											   F@_2,
											   F@_3,
											   TrUserData);
	    1 ->
		'skip_64_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       F@_3,
										       TrUserData);
	    2 ->
		'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
												     0,
												     0,
												     F@_1,
												     F@_2,
												     F@_3,
												     TrUserData);
	    3 ->
		'skip_group_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
											  Key
											    bsr
											    3,
											  0,
											  F@_1,
											  F@_2,
											  F@_3,
											  TrUserData);
	    5 ->
		'skip_32_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       F@_3,
										       TrUserData)
	  end
    end;
'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<>>,
										 0,
										 0,
										 F@_1,
										 R1,
										 R2,
										 TrUserData) ->
    #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
									= F@_1,
								    param_errs =
									lists_reverse(R1,
										      TrUserData),
								    unique_keys
									=
									'tr_decode_repeated_finalize_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(R2,
																					       TrUserData)}.

'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_instantiated_path'(<<1:1,
											   X:7,
											   Rest/binary>>,
											 N,
											 Acc,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_instantiated_path'(Rest,
											     N
											       +
											       7,
											     X
											       bsl
											       N
											       +
											       Acc,
											     F@_1,
											     F@_2,
											     F@_3,
											     TrUserData);
'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_instantiated_path'(<<0:1,
											   X:7,
											   Rest/binary>>,
											 N,
											 Acc,
											 _,
											 F@_2,
											 F@_3,
											 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(RestF,
										      0,
										      0,
										      NewFValue,
										      F@_2,
										      F@_3,
										      TrUserData).

'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(<<1:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(Rest,
										      N
											+
											7,
										      X
											bsl
											N
											+
											Acc,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_param_errs'(<<0:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  Prev,
										  F@_3,
										  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_AddResp.ParameterError'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(RestF,
										      0,
										      0,
										      F@_1,
										      cons(NewFValue,
											   Prev,
											   TrUserData),
										      F@_3,
										      TrUserData).

'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(<<1:1,
										     X:7,
										     Rest/binary>>,
										   N,
										   Acc,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(Rest,
										       N
											 +
											 7,
										       X
											 bsl
											 N
											 +
											 Acc,
										       F@_1,
										       F@_2,
										       F@_3,
										       TrUserData);
'd_field_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess_unique_keys'(<<0:1,
										     X:7,
										     Rest/binary>>,
										   N,
										   Acc,
										   F@_1,
										   F@_2,
										   Prev,
										   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(RestF,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      'tr_decode_repeated_add_elem_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(NewFValue,
																							     Prev,
																							     TrUserData),
										      TrUserData).

'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData) ->
    'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
'skip_varint_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData)
    when N < 57 ->
    'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
											 N
											   +
											   7,
											 X
											   bsl
											   N
											   +
											   Acc,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest2,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_group_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Bin,
									  FNum,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      0,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_32_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<_:32,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_64_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(<<_:64,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'decode_msg_AddResp.CreatedObjectResult.OperationStatus'(Bin,
							 TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Bin,
								     0, 0,
								     id(undefined,
									TrUserData),
								     TrUserData).

'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(<<10,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(Rest,
								       Z1, Z2,
								       F@_1,
								       TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(<<18,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 TrUserData) ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_success'(Rest,
								       Z1, Z2,
								       F@_1,
								       TrUserData);
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(<<>>,
								 0, 0, F@_1,
								 _) ->
    #'AddResp.CreatedObjectResult.OperationStatus'{oper_status
						       = F@_1};
'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Other,
								 Z1, Z2, F@_1,
								 TrUserData) ->
    'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Other,
								    Z1, Z2,
								    F@_1,
								    TrUserData).

'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1,
								    TrUserData);
'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
      18 ->
	  'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_success'(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_AddResp.CreatedObjectResult.OperationStatus'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
	    1 ->
		'skip_64_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    2 ->
		'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus'(Rest,
										    0,
										    0,
										    F@_1,
										    TrUserData);
	    3 ->
		'skip_group_AddResp.CreatedObjectResult.OperationStatus'(Rest,
									 Key bsr
									   3,
									 0,
									 F@_1,
									 TrUserData);
	    5 ->
		'skip_32_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData)
	  end
    end;
'dg_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(<<>>,
								0, 0, F@_1,
								_) ->
    #'AddResp.CreatedObjectResult.OperationStatus'{oper_status
						       = F@_1}.

'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       TrUserData);
'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_failure'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Bs,
													 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(RestF,
								     0, 0,
								     case Prev
									 of
								       undefined ->
									   id({oper_failure,
									       NewFValue},
									      TrUserData);
								       {oper_failure,
									MVPrev} ->
									   id({oper_failure,
									       'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(MVPrev,
																			NewFValue,
																			TrUserData)},
									      TrUserData);
								       _ ->
									   id({oper_failure,
									       NewFValue},
									      TrUserData)
								     end,
								     TrUserData).

'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_success'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData)
    when N < 57 ->
    'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_success'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       TrUserData);
'd_field_AddResp.CreatedObjectResult.OperationStatus_oper_success'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Bs,
													 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(RestF,
								     0, 0,
								     case Prev
									 of
								       undefined ->
									   id({oper_success,
									       NewFValue},
									      TrUserData);
								       {oper_success,
									MVPrev} ->
									   id({oper_success,
									       'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(MVPrev,
																			NewFValue,
																			TrUserData)},
									      TrUserData);
								       _ ->
									   id({oper_success,
									       NewFValue},
									      TrUserData)
								     end,
								     TrUserData).

'skip_varint_AddResp.CreatedObjectResult.OperationStatus'(<<1:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1,
							  TrUserData) ->
    'skip_varint_AddResp.CreatedObjectResult.OperationStatus'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData);
'skip_varint_AddResp.CreatedObjectResult.OperationStatus'(<<0:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1,
							  TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1,
								    TrUserData)
    when N < 57 ->
    'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									TrUserData);
'skip_length_delimited_AddResp.CreatedObjectResult.OperationStatus'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1,
								    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Rest2,
								     0, 0, F@_1,
								     TrUserData).

'skip_group_AddResp.CreatedObjectResult.OperationStatus'(Bin,
							 FNum, Z2, F@_1,
							 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								     0, Z2,
								     F@_1,
								     TrUserData).

'skip_32_AddResp.CreatedObjectResult.OperationStatus'(<<_:32,
							Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'skip_64_AddResp.CreatedObjectResult.OperationStatus'(<<_:64,
							Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'dfp_read_field_def_AddResp.CreatedObjectResult.OperationStatus'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'decode_msg_AddResp.ParameterError'(Bin, TrUserData) ->
    'dfp_read_field_def_AddResp.ParameterError'(Bin, 0, 0,
						id([], TrUserData),
						id(0, TrUserData),
						id([], TrUserData), TrUserData).

'dfp_read_field_def_AddResp.ParameterError'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_AddResp.ParameterError_param'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_AddResp.ParameterError'(<<21,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_AddResp.ParameterError_err_code'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_AddResp.ParameterError'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_AddResp.ParameterError_err_msg'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_AddResp.ParameterError'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'AddResp.ParameterError'{param = F@_1, err_code = F@_2,
			      err_msg = F@_3};
'dfp_read_field_def_AddResp.ParameterError'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_AddResp.ParameterError'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_AddResp.ParameterError'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_AddResp.ParameterError'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_AddResp.ParameterError'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_AddResp.ParameterError_param'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      21 ->
	  'd_field_AddResp.ParameterError_err_code'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      26 ->
	  'd_field_AddResp.ParameterError_err_msg'(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_AddResp.ParameterError'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_AddResp.ParameterError'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_AddResp.ParameterError'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_AddResp.ParameterError'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_AddResp.ParameterError'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_AddResp.ParameterError'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'AddResp.ParameterError'{param = F@_1, err_code = F@_2,
			      err_msg = F@_3}.

'd_field_AddResp.ParameterError_param'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_AddResp.ParameterError_param'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_AddResp.ParameterError_param'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.ParameterError'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_AddResp.ParameterError_err_code'(<<Value:32/little,
					    Rest/binary>>,
					  Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_AddResp.ParameterError'(Rest, Z1,
						Z2, F@_1, id(Value, TrUserData),
						F@_3, TrUserData).

'd_field_AddResp.ParameterError_err_msg'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_AddResp.ParameterError_err_msg'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
'd_field_AddResp.ParameterError_err_msg'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_AddResp.ParameterError'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_AddResp.ParameterError'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_AddResp.ParameterError'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_AddResp.ParameterError'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_AddResp.ParameterError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_AddResp.ParameterError'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_AddResp.ParameterError'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_AddResp.ParameterError'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_AddResp.ParameterError'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_AddResp.ParameterError'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_AddResp.ParameterError'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_AddResp.ParameterError'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_AddResp.ParameterError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_AddResp.ParameterError'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_AddResp.ParameterError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_AddResp(Bin, TrUserData) ->
    dfp_read_field_def_AddResp(Bin, 0, 0,
			       id([], TrUserData), TrUserData).

dfp_read_field_def_AddResp(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_AddResp_created_obj_results(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_AddResp(<<>>, 0, 0, R1,
			   TrUserData) ->
    #'AddResp'{created_obj_results =
		   lists_reverse(R1, TrUserData)};
dfp_read_field_def_AddResp(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_AddResp(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_AddResp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddResp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_AddResp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddResp_created_obj_results(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_AddResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_AddResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_AddResp(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_AddResp(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_AddResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AddResp(<<>>, 0, 0, R1, TrUserData) ->
    #'AddResp'{created_obj_results =
		   lists_reverse(R1, TrUserData)}.

d_field_AddResp_created_obj_results(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AddResp_created_obj_results(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_AddResp_created_obj_results(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_AddResp.CreatedObjectResult'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddResp(RestF, 0, 0,
			       cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_AddResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_AddResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_AddResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_AddResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_AddResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddResp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AddResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddResp(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_AddResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddResp(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_AddResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_AddResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_AddResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_AddResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_Delete(Bin, TrUserData) ->
    dfp_read_field_def_Delete(Bin, 0, 0,
			      id(false, TrUserData), id([], TrUserData),
			      TrUserData).

dfp_read_field_def_Delete(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Delete_allow_partial(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_Delete(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Delete_obj_paths(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_Delete(<<>>, 0, 0, F@_1, R1,
			  TrUserData) ->
    #'Delete'{allow_partial = F@_1,
	      obj_paths = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Delete(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_Delete(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_Delete(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Delete(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_Delete(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Delete_allow_partial(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      18 ->
	  d_field_Delete_obj_paths(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Delete(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Delete(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Delete(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_Delete(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_Delete(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Delete(<<>>, 0, 0, F@_1, R1,
			 TrUserData) ->
    #'Delete'{allow_partial = F@_1,
	      obj_paths = lists_reverse(R1, TrUserData)}.

d_field_Delete_allow_partial(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Delete_allow_partial(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_Delete_allow_partial(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Delete(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_Delete_obj_paths(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Delete_obj_paths(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_Delete_obj_paths(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Delete(RestF, 0, 0, F@_1,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Delete(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_Delete(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_Delete(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Delete(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_Delete(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Delete(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_Delete(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Delete(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_Delete(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Delete(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_Delete(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Delete(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_Delete(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Delete(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

'decode_msg_DeleteResp.DeletedObjectResult'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Bin,
							0, 0,
							id([], TrUserData),
							id(undefined,
							   TrUserData),
							TrUserData).

'dfp_read_field_def_DeleteResp.DeletedObjectResult'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult_requested_path'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult'(<<18,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult_oper_status'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult'(<<>>,
						    0, 0, F@_1, F@_2, _) ->
    #'DeleteResp.DeletedObjectResult'{requested_path = F@_1,
				      oper_status = F@_2};
'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'dg_read_field_def_DeleteResp.DeletedObjectResult'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'dg_read_field_def_DeleteResp.DeletedObjectResult'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_DeleteResp.DeletedObjectResult_requested_path'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
      18 ->
	  'd_field_DeleteResp.DeletedObjectResult_oper_status'(Rest,
							       0, 0, F@_1, F@_2,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DeleteResp.DeletedObjectResult'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    1 ->
		'skip_64_DeleteResp.DeletedObjectResult'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    2 ->
		'skip_length_delimited_DeleteResp.DeletedObjectResult'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    3 ->
		'skip_group_DeleteResp.DeletedObjectResult'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, TrUserData);
	    5 ->
		'skip_32_DeleteResp.DeletedObjectResult'(Rest, 0, 0,
							 F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_DeleteResp.DeletedObjectResult'(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    #'DeleteResp.DeletedObjectResult'{requested_path = F@_1,
				      oper_status = F@_2}.

'd_field_DeleteResp.DeletedObjectResult_requested_path'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult_requested_path'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'd_field_DeleteResp.DeletedObjectResult_requested_path'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, _, F@_2,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(RestF,
							0, 0, NewFValue, F@_2,
							TrUserData).

'd_field_DeleteResp.DeletedObjectResult_oper_status'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult_oper_status'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'd_field_DeleteResp.DeletedObjectResult_oper_status'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, Prev,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Bs,
											   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(RestF,
							0, 0, F@_1,
							if Prev == undefined ->
							       NewFValue;
							   true ->
							       'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Prev,
															  NewFValue,
															  TrUserData)
							end,
							TrUserData).

'skip_varint_DeleteResp.DeletedObjectResult'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_DeleteResp.DeletedObjectResult'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'skip_varint_DeleteResp.DeletedObjectResult'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_length_delimited_DeleteResp.DeletedObjectResult'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_DeleteResp.DeletedObjectResult'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'skip_length_delimited_DeleteResp.DeletedObjectResult'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Rest2,
							0, 0, F@_1, F@_2,
							TrUserData).

'skip_group_DeleteResp.DeletedObjectResult'(Bin, FNum,
					    Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Rest,
							0, Z2, F@_1, F@_2,
							TrUserData).

'skip_32_DeleteResp.DeletedObjectResult'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_64_DeleteResp.DeletedObjectResult'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'decode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Bin,
									     TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Bin,
											 0,
											 0,
											 id(0,
											    TrUserData),
											 id([],
											    TrUserData),
											 TrUserData).

'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<13,
										       Rest/binary>>,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_code'(Rest,
										       Z1,
										       Z2,
										       F@_1,
										       F@_2,
										       TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<18,
										       Rest/binary>>,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<>>,
										     0,
										     0,
										     F@_1,
										     F@_2,
										     _) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
									   =
									   F@_1,
								       err_msg =
									   F@_2};
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Other,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Other,
											Z1,
											Z2,
											F@_1,
											F@_2,
											TrUserData).

'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<1:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											N
											  +
											  7,
											X
											  bsl
											  N
											  +
											  Acc,
											F@_1,
											F@_2,
											TrUserData);
'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<0:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_code'(Rest,
											     0,
											     0,
											     F@_1,
											     F@_2,
											     TrUserData);
      18 ->
	  'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
											    0,
											    0,
											    F@_1,
											    F@_2,
											    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											      0,
											      0,
											      F@_1,
											      F@_2,
											      TrUserData);
	    1 ->
		'skip_64_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  TrUserData);
	    2 ->
		'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
													0,
													0,
													F@_1,
													F@_2,
													TrUserData);
	    3 ->
		'skip_group_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											     Key
											       bsr
											       3,
											     0,
											     F@_1,
											     F@_2,
											     TrUserData);
	    5 ->
		'skip_32_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  TrUserData)
	  end
    end;
'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<>>,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    _) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
									   =
									   F@_1,
								       err_msg =
									   F@_2}.

'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_code'(<<Value:32/little,
										     Rest/binary>>,
										   Z1,
										   Z2,
										   _,
										   F@_2,
										   TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											 Z1,
											 Z2,
											 id(Value,
											    TrUserData),
											 F@_2,
											 TrUserData).

'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_msg'(<<1:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  F@_2,
										  TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
										      N
											+
											7,
										      X
											bsl
											N
											+
											Acc,
										      F@_1,
										      F@_2,
										      TrUserData);
'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure_err_msg'(<<0:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  _,
										  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(RestF,
											 0,
											 0,
											 F@_1,
											 NewFValue,
											 TrUserData).

'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<1:1,
										_:7,
										Rest/binary>>,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData);
'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<0:1,
										_:7,
										Rest/binary>>,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<1:1,
											  X:7,
											  Rest/binary>>,
											N,
											Acc,
											F@_1,
											F@_2,
											TrUserData)
    when N < 57 ->
    'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											    N
											      +
											      7,
											    X
											      bsl
											      N
											      +
											      Acc,
											    F@_1,
											    F@_2,
											    TrUserData);
'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<0:1,
											  X:7,
											  Rest/binary>>,
											N,
											Acc,
											F@_1,
											F@_2,
											TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest2,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_group_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Bin,
									     FNum,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											 0,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_32_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<_:32,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_64_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(<<_:64,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'decode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Bin,
									     TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Bin,
											 0,
											 0,
											 id([],
											    TrUserData),
											 id([],
											    TrUserData),
											 TrUserData).

'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<10,
										       Rest/binary>>,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(Rest,
											     Z1,
											     Z2,
											     F@_1,
											     F@_2,
											     TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<18,
										       Rest/binary>>,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(Rest,
												   Z1,
												   Z2,
												   F@_1,
												   F@_2,
												   TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<>>,
										     0,
										     0,
										     R1,
										     R2,
										     TrUserData) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
									   =
									   lists_reverse(R1,
											 TrUserData),
								       unaffected_path_errs
									   =
									   lists_reverse(R2,
											 TrUserData)};
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Other,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData) ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Other,
											Z1,
											Z2,
											F@_1,
											F@_2,
											TrUserData).

'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											N
											  +
											  7,
											X
											  bsl
											  N
											  +
											  Acc,
											F@_1,
											F@_2,
											TrUserData);
'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(Rest,
												   0,
												   0,
												   F@_1,
												   F@_2,
												   TrUserData);
      18 ->
	  'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(Rest,
													 0,
													 0,
													 F@_1,
													 F@_2,
													 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											      0,
											      0,
											      F@_1,
											      F@_2,
											      TrUserData);
	    1 ->
		'skip_64_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  TrUserData);
	    2 ->
		'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
													0,
													0,
													F@_1,
													F@_2,
													TrUserData);
	    3 ->
		'skip_group_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											     Key
											       bsr
											       3,
											     0,
											     F@_1,
											     F@_2,
											     TrUserData);
	    5 ->
		'skip_32_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  TrUserData)
	  end
    end;
'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<>>,
										    0,
										    0,
										    R1,
										    R2,
										    TrUserData) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
									   =
									   lists_reverse(R1,
											 TrUserData),
								       unaffected_path_errs
									   =
									   lists_reverse(R2,
											 TrUserData)}.

'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(<<1:1,
											   X:7,
											   Rest/binary>>,
											 N,
											 Acc,
											 F@_1,
											 F@_2,
											 TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(Rest,
											     N
											       +
											       7,
											     X
											       bsl
											       N
											       +
											       Acc,
											     F@_1,
											     F@_2,
											     TrUserData);
'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_affected_paths'(<<0:1,
											   X:7,
											   Rest/binary>>,
											 N,
											 Acc,
											 Prev,
											 F@_2,
											 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(RestF,
											 0,
											 0,
											 cons(NewFValue,
											      Prev,
											      TrUserData),
											 F@_2,
											 TrUserData).

'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(<<1:1,
												 X:7,
												 Rest/binary>>,
											       N,
											       Acc,
											       F@_1,
											       F@_2,
											       TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(Rest,
												   N
												     +
												     7,
												   X
												     bsl
												     N
												     +
												     Acc,
												   F@_1,
												   F@_2,
												   TrUserData);
'd_field_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess_unaffected_path_errs'(<<0:1,
												 X:7,
												 Rest/binary>>,
											       N,
											       Acc,
											       F@_1,
											       Prev,
											       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_DeleteResp.UnaffectedPathError'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(RestF,
											 0,
											 0,
											 F@_1,
											 cons(NewFValue,
											      Prev,
											      TrUserData),
											 TrUserData).

'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
										_:7,
										Rest/binary>>,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData);
'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
										_:7,
										Rest/binary>>,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
											  X:7,
											  Rest/binary>>,
											N,
											Acc,
											F@_1,
											F@_2,
											TrUserData)
    when N < 57 ->
    'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											    N
											      +
											      7,
											    X
											      bsl
											      N
											      +
											      Acc,
											    F@_1,
											    F@_2,
											    TrUserData);
'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
											  X:7,
											  Rest/binary>>,
											N,
											Acc,
											F@_1,
											F@_2,
											TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest2,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_group_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Bin,
									     FNum,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											 0,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_32_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<_:32,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'skip_64_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(<<_:64,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 TrUserData).

'decode_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Bin,
							    TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Bin,
									0, 0,
									id(undefined,
									   TrUserData),
									TrUserData).

'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(<<10,
								      Rest/binary>>,
								    Z1, Z2,
								    F@_1,
								    TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(<<18,
								      Rest/binary>>,
								    Z1, Z2,
								    F@_1,
								    TrUserData) ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  TrUserData);
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(<<>>,
								    0, 0, F@_1,
								    _) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
							  = F@_1};
'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Other,
								    Z1, Z2,
								    F@_1,
								    TrUserData) ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Other,
								       Z1, Z2,
								       F@_1,
								       TrUserData).

'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       TrUserData);
'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(Rest,
										0,
										0,
										F@_1,
										TrUserData);
      18 ->
	  'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(Rest,
										0,
										0,
										F@_1,
										TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
	    1 ->
		'skip_64_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									 0, 0,
									 F@_1,
									 TrUserData);
	    2 ->
		'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
										       0,
										       0,
										       F@_1,
										       TrUserData);
	    3 ->
		'skip_group_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									    Key
									      bsr
									      3,
									    0,
									    F@_1,
									    TrUserData);
	    5 ->
		'skip_32_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									 0, 0,
									 F@_1,
									 TrUserData)
	  end
    end;
'dg_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(<<>>,
								   0, 0, F@_1,
								   _) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
							  = F@_1}.

'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  TrUserData);
'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_failure'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      Prev,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Bs,
													    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(RestF,
									0, 0,
									case
									  Prev
									    of
									  undefined ->
									      id({oper_failure,
										  NewFValue},
										 TrUserData);
									  {oper_failure,
									   MVPrev} ->
									      id({oper_failure,
										  'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(MVPrev,
																			      NewFValue,
																			      TrUserData)},
										 TrUserData);
									  _ ->
									      id({oper_failure,
										  NewFValue},
										 TrUserData)
									end,
									TrUserData).

'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  TrUserData);
'd_field_DeleteResp.DeletedObjectResult.OperationStatus_oper_success'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      Prev,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Bs,
													    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(RestF,
									0, 0,
									case
									  Prev
									    of
									  undefined ->
									      id({oper_success,
										  NewFValue},
										 TrUserData);
									  {oper_success,
									   MVPrev} ->
									      id({oper_success,
										  'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(MVPrev,
																			      NewFValue,
																			      TrUserData)},
										 TrUserData);
									  _ ->
									      id({oper_success,
										  NewFValue},
										 TrUserData)
									end,
									TrUserData).

'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus'(<<1:1,
							       _:7,
							       Rest/binary>>,
							     Z1, Z2, F@_1,
							     TrUserData) ->
    'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
								 Z1, Z2, F@_1,
								 TrUserData);
'skip_varint_DeleteResp.DeletedObjectResult.OperationStatus'(<<0:1,
							       _:7,
							       Rest/binary>>,
							     Z1, Z2, F@_1,
							     TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									Z1, Z2,
									F@_1,
									TrUserData).

'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       TrUserData)
    when N < 57 ->
    'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   TrUserData);
'skip_length_delimited_DeleteResp.DeletedObjectResult.OperationStatus'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Rest2,
									0, 0,
									F@_1,
									TrUserData).

'skip_group_DeleteResp.DeletedObjectResult.OperationStatus'(Bin,
							    FNum, Z2, F@_1,
							    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									0, Z2,
									F@_1,
									TrUserData).

'skip_32_DeleteResp.DeletedObjectResult.OperationStatus'(<<_:32,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									Z1, Z2,
									F@_1,
									TrUserData).

'skip_64_DeleteResp.DeletedObjectResult.OperationStatus'(<<_:64,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'dfp_read_field_def_DeleteResp.DeletedObjectResult.OperationStatus'(Rest,
									Z1, Z2,
									F@_1,
									TrUserData).

'decode_msg_DeleteResp.UnaffectedPathError'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Bin,
							0, 0,
							id([], TrUserData),
							id(0, TrUserData),
							id([], TrUserData),
							TrUserData).

'dfp_read_field_def_DeleteResp.UnaffectedPathError'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'd_field_DeleteResp.UnaffectedPathError_unaffected_path'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, TrUserData);
'dfp_read_field_def_DeleteResp.UnaffectedPathError'(<<21,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'd_field_DeleteResp.UnaffectedPathError_err_code'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
'dfp_read_field_def_DeleteResp.UnaffectedPathError'(<<26,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'd_field_DeleteResp.UnaffectedPathError_err_msg'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
'dfp_read_field_def_DeleteResp.UnaffectedPathError'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    _) ->
    #'DeleteResp.UnaffectedPathError'{unaffected_path =
					  F@_1,
				      err_code = F@_2, err_msg = F@_3};
'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'dg_read_field_def_DeleteResp.UnaffectedPathError'(Other,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'dg_read_field_def_DeleteResp.UnaffectedPathError'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DeleteResp.UnaffectedPathError'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
'dg_read_field_def_DeleteResp.UnaffectedPathError'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_DeleteResp.UnaffectedPathError_unaffected_path'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
      21 ->
	  'd_field_DeleteResp.UnaffectedPathError_err_code'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      26 ->
	  'd_field_DeleteResp.UnaffectedPathError_err_msg'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DeleteResp.UnaffectedPathError'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    1 ->
		'skip_64_DeleteResp.UnaffectedPathError'(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    2 ->
		'skip_length_delimited_DeleteResp.UnaffectedPathError'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData);
	    3 ->
		'skip_group_DeleteResp.UnaffectedPathError'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, F@_3,
							    TrUserData);
	    5 ->
		'skip_32_DeleteResp.UnaffectedPathError'(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData)
	  end
    end;
'dg_read_field_def_DeleteResp.UnaffectedPathError'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, _) ->
    #'DeleteResp.UnaffectedPathError'{unaffected_path =
					  F@_1,
				      err_code = F@_2, err_msg = F@_3}.

'd_field_DeleteResp.UnaffectedPathError_unaffected_path'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.UnaffectedPathError_unaffected_path'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     TrUserData);
'd_field_DeleteResp.UnaffectedPathError_unaffected_path'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _, F@_2, F@_3,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(RestF,
							0, 0, NewFValue, F@_2,
							F@_3, TrUserData).

'd_field_DeleteResp.UnaffectedPathError_err_code'(<<Value:32/little,
						    Rest/binary>>,
						  Z1, Z2, F@_1, _, F@_3,
						  TrUserData) ->
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Rest,
							Z1, Z2, F@_1,
							id(Value, TrUserData),
							F@_3, TrUserData).

'd_field_DeleteResp.UnaffectedPathError_err_msg'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    'd_field_DeleteResp.UnaffectedPathError_err_msg'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
'd_field_DeleteResp.UnaffectedPathError_err_msg'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, _,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(RestF,
							0, 0, F@_1, F@_2,
							NewFValue, TrUserData).

'skip_varint_DeleteResp.UnaffectedPathError'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    'skip_varint_DeleteResp.UnaffectedPathError'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
'skip_varint_DeleteResp.UnaffectedPathError'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

'skip_length_delimited_DeleteResp.UnaffectedPathError'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_DeleteResp.UnaffectedPathError'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   TrUserData);
'skip_length_delimited_DeleteResp.UnaffectedPathError'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Rest2,
							0, 0, F@_1, F@_2, F@_3,
							TrUserData).

'skip_group_DeleteResp.UnaffectedPathError'(Bin, FNum,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Rest,
							0, Z2, F@_1, F@_2, F@_3,
							TrUserData).

'skip_32_DeleteResp.UnaffectedPathError'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

'skip_64_DeleteResp.UnaffectedPathError'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    'dfp_read_field_def_DeleteResp.UnaffectedPathError'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

decode_msg_DeleteResp(Bin, TrUserData) ->
    dfp_read_field_def_DeleteResp(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_DeleteResp(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_DeleteResp_deleted_obj_results(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_DeleteResp(<<>>, 0, 0, R1,
			      TrUserData) ->
    #'DeleteResp'{deleted_obj_results =
		      lists_reverse(R1, TrUserData)};
dfp_read_field_def_DeleteResp(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_DeleteResp(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_DeleteResp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteResp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_DeleteResp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteResp_deleted_obj_results(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_DeleteResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_DeleteResp(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_DeleteResp(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_DeleteResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_DeleteResp(<<>>, 0, 0, R1,
			     TrUserData) ->
    #'DeleteResp'{deleted_obj_results =
		      lists_reverse(R1, TrUserData)}.

d_field_DeleteResp_deleted_obj_results(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_DeleteResp_deleted_obj_results(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_DeleteResp_deleted_obj_results(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_DeleteResp.DeletedObjectResult'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DeleteResp(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_DeleteResp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_DeleteResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_DeleteResp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DeleteResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_DeleteResp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteResp(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_DeleteResp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteResp(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_DeleteResp(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteResp(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_DeleteResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_DeleteResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_DeleteResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_DeleteResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

'decode_msg_Set.UpdateObject'(Bin, TrUserData) ->
    'dfp_read_field_def_Set.UpdateObject'(Bin, 0, 0,
					  id([], TrUserData),
					  id([], TrUserData), TrUserData).

'dfp_read_field_def_Set.UpdateObject'(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Set.UpdateObject_obj_path'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_Set.UpdateObject'(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Set.UpdateObject_param_settings'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'dfp_read_field_def_Set.UpdateObject'(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    #'Set.UpdateObject'{obj_path = F@_1,
			param_settings = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_Set.UpdateObject'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_Set.UpdateObject'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_Set.UpdateObject'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Set.UpdateObject'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_Set.UpdateObject'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Set.UpdateObject_obj_path'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  'd_field_Set.UpdateObject_param_settings'(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Set.UpdateObject'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_Set.UpdateObject'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_Set.UpdateObject'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_Set.UpdateObject'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_Set.UpdateObject'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_Set.UpdateObject'(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #'Set.UpdateObject'{obj_path = F@_1,
			param_settings = lists_reverse(R1, TrUserData)}.

'd_field_Set.UpdateObject_obj_path'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Set.UpdateObject_obj_path'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Set.UpdateObject_obj_path'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Set.UpdateObject'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_Set.UpdateObject_param_settings'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Set.UpdateObject_param_settings'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'd_field_Set.UpdateObject_param_settings'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Set.UpdateParamSetting'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Set.UpdateObject'(RestF, 0, 0, F@_1,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

'skip_varint_Set.UpdateObject'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_Set.UpdateObject'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_Set.UpdateObject'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Set.UpdateObject'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_Set.UpdateObject'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Set.UpdateObject'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_Set.UpdateObject'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Set.UpdateObject'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_Set.UpdateObject'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Set.UpdateObject'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_Set.UpdateObject'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Set.UpdateObject'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_Set.UpdateObject'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Set.UpdateObject'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'decode_msg_Set.UpdateParamSetting'(Bin, TrUserData) ->
    'dfp_read_field_def_Set.UpdateParamSetting'(Bin, 0, 0,
						id([], TrUserData),
						id([], TrUserData),
						id(false, TrUserData),
						TrUserData).

'dfp_read_field_def_Set.UpdateParamSetting'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_Set.UpdateParamSetting_param'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Set.UpdateParamSetting'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_Set.UpdateParamSetting_value'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Set.UpdateParamSetting'(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_Set.UpdateParamSetting_required'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Set.UpdateParamSetting'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'Set.UpdateParamSetting'{param = F@_1, value = F@_2,
			      required = F@_3};
'dfp_read_field_def_Set.UpdateParamSetting'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_Set.UpdateParamSetting'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_Set.UpdateParamSetting'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Set.UpdateParamSetting'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_Set.UpdateParamSetting'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Set.UpdateParamSetting_param'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      18 ->
	  'd_field_Set.UpdateParamSetting_value'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      24 ->
	  'd_field_Set.UpdateParamSetting_required'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Set.UpdateParamSetting'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_Set.UpdateParamSetting'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_Set.UpdateParamSetting'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_Set.UpdateParamSetting'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_Set.UpdateParamSetting'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_Set.UpdateParamSetting'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'Set.UpdateParamSetting'{param = F@_1, value = F@_2,
			      required = F@_3}.

'd_field_Set.UpdateParamSetting_param'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Set.UpdateParamSetting_param'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_Set.UpdateParamSetting_param'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Set.UpdateParamSetting'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_Set.UpdateParamSetting_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Set.UpdateParamSetting_value'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_Set.UpdateParamSetting_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Set.UpdateParamSetting'(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

'd_field_Set.UpdateParamSetting_required'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Set.UpdateParamSetting_required'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
'd_field_Set.UpdateParamSetting_required'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_Set.UpdateParamSetting'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_Set.UpdateParamSetting'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_Set.UpdateParamSetting'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_Set.UpdateParamSetting'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Set.UpdateParamSetting'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_Set.UpdateParamSetting'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_Set.UpdateParamSetting'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_Set.UpdateParamSetting'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Set.UpdateParamSetting'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_Set.UpdateParamSetting'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Set.UpdateParamSetting'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_Set.UpdateParamSetting'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Set.UpdateParamSetting'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_Set.UpdateParamSetting'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Set.UpdateParamSetting'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_Set(Bin, TrUserData) ->
    dfp_read_field_def_Set(Bin, 0, 0, id(false, TrUserData),
			   id([], TrUserData), TrUserData).

dfp_read_field_def_Set(<<8, Rest/binary>>, Z1, Z2, F@_1,
		       F@_2, TrUserData) ->
    d_field_Set_allow_partial(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_Set(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_Set_update_objs(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Set(<<>>, 0, 0, F@_1, R1,
		       TrUserData) ->
    #'Set'{allow_partial = F@_1,
	   update_objs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Set(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_Set(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_Set(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Set(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_Set(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Set_allow_partial(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_Set_update_objs(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Set(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Set(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Set(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_Set(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_Set(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Set(<<>>, 0, 0, F@_1, R1,
		      TrUserData) ->
    #'Set'{allow_partial = F@_1,
	   update_objs = lists_reverse(R1, TrUserData)}.

d_field_Set_allow_partial(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Set_allow_partial(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_Set_allow_partial(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Set(RestF, 0, 0, NewFValue, F@_2,
			   TrUserData).

d_field_Set_update_objs(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Set_update_objs(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Set_update_objs(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Set.UpdateObject'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Set(RestF, 0, 0, F@_1,
			   cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Set(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_Set(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Set(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Set(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_Set(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Set(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_Set(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Set(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_Set(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Set(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_Set(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Set(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_Set(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_Set(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

'decode_msg_SetResp.UpdatedObjectResult'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(Bin, 0,
						     0, id([], TrUserData),
						     id(undefined, TrUserData),
						     TrUserData).

'dfp_read_field_def_SetResp.UpdatedObjectResult'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult_requested_path'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult'(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult_oper_status'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult'(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #'SetResp.UpdatedObjectResult'{requested_path = F@_1,
				   oper_status = F@_2};
'dfp_read_field_def_SetResp.UpdatedObjectResult'(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dg_read_field_def_SetResp.UpdatedObjectResult'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'dg_read_field_def_SetResp.UpdatedObjectResult'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.UpdatedObjectResult'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'dg_read_field_def_SetResp.UpdatedObjectResult'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SetResp.UpdatedObjectResult_requested_path'(Rest,
							       0, 0, F@_1, F@_2,
							       TrUserData);
      18 ->
	  'd_field_SetResp.UpdatedObjectResult_oper_status'(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.UpdatedObjectResult'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		'skip_64_SetResp.UpdatedObjectResult'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.UpdatedObjectResult'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		'skip_group_SetResp.UpdatedObjectResult'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		'skip_32_SetResp.UpdatedObjectResult'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.UpdatedObjectResult'(<<>>, 0,
						0, F@_1, F@_2, _) ->
    #'SetResp.UpdatedObjectResult'{requested_path = F@_1,
				   oper_status = F@_2}.

'd_field_SetResp.UpdatedObjectResult_requested_path'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult_requested_path'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'd_field_SetResp.UpdatedObjectResult_requested_path'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

'd_field_SetResp.UpdatedObjectResult_oper_status'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult_oper_status'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'd_field_SetResp.UpdatedObjectResult_oper_status'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, Prev,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.UpdatedObjectResult.OperationStatus'(Bs,
											TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(RestF,
						     0, 0, F@_1,
						     if Prev == undefined ->
							    NewFValue;
							true ->
							    'merge_msg_SetResp.UpdatedObjectResult.OperationStatus'(Prev,
														    NewFValue,
														    TrUserData)
						     end,
						     TrUserData).

'skip_varint_SetResp.UpdatedObjectResult'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_SetResp.UpdatedObjectResult'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'skip_varint_SetResp.UpdatedObjectResult'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_length_delimited_SetResp.UpdatedObjectResult'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.UpdatedObjectResult'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'skip_length_delimited_SetResp.UpdatedObjectResult'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

'skip_group_SetResp.UpdatedObjectResult'(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

'skip_32_SetResp.UpdatedObjectResult'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_64_SetResp.UpdatedObjectResult'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'decode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Bin,
									  TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Bin,
										      0,
										      0,
										      id(0,
											 TrUserData),
										      id([],
											 TrUserData),
										      id([],
											 TrUserData),
										      TrUserData).

'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<13,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_code'(Rest,
										    Z1,
										    Z2,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<18,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<26,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(Rest,
												 Z1,
												 Z2,
												 F@_1,
												 F@_2,
												 F@_3,
												 TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<>>,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  R1,
										  TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
									= F@_1,
								    err_msg =
									F@_2,
								    updated_inst_failures
									=
									lists_reverse(R1,
										      TrUserData)};
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Other,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData) ->
    'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Other,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData);
'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_code'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  F@_3,
											  TrUserData);
      18 ->
	  'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
      26 ->
	  'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(Rest,
												       0,
												       0,
												       F@_1,
												       F@_2,
												       F@_3,
												       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
											   0,
											   0,
											   F@_1,
											   F@_2,
											   F@_3,
											   TrUserData);
	    1 ->
		'skip_64_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       F@_3,
										       TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
												     0,
												     0,
												     F@_1,
												     F@_2,
												     F@_3,
												     TrUserData);
	    3 ->
		'skip_group_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
											  Key
											    bsr
											    3,
											  0,
											  F@_1,
											  F@_2,
											  F@_3,
											  TrUserData);
	    5 ->
		'skip_32_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       F@_3,
										       TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<>>,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 R1,
										 TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
									= F@_1,
								    err_msg =
									F@_2,
								    updated_inst_failures
									=
									lists_reverse(R1,
										      TrUserData)}.

'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_code'(<<Value:32/little,
										  Rest/binary>>,
										Z1,
										Z2,
										_,
										F@_2,
										F@_3,
										TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      id(Value,
											 TrUserData),
										      F@_2,
										      F@_3,
										      TrUserData).

'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_msg'(<<1:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_msg'(Rest,
										   N
										     +
										     7,
										   X
										     bsl
										     N
										     +
										     Acc,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData);
'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_err_msg'(<<0:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       _,
									       F@_3,
									       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(RestF,
										      0,
										      0,
										      F@_1,
										      NewFValue,
										      F@_3,
										      TrUserData).

'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(<<1:1,
											       X:7,
											       Rest/binary>>,
											     N,
											     Acc,
											     F@_1,
											     F@_2,
											     F@_3,
											     TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(Rest,
												 N
												   +
												   7,
												 X
												   bsl
												   N
												   +
												   Acc,
												 F@_1,
												 F@_2,
												 F@_3,
												 TrUserData);
'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure_updated_inst_failures'(<<0:1,
											       X:7,
											       Rest/binary>>,
											     N,
											     Acc,
											     F@_1,
											     F@_2,
											     Prev,
											     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.UpdatedInstanceFailure'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(RestF,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      cons(NewFValue,
											   Prev,
											   TrUserData),
										      TrUserData).

'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<1:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData) ->
    'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<0:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<1:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
											 N
											   +
											   7,
											 X
											   bsl
											   N
											   +
											   Acc,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<0:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest2,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_group_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Bin,
									  FNum,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      0,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_32_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<_:32,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'skip_64_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(<<_:64,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData).

'decode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Bin,
									  TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Bin,
										      0,
										      0,
										      id([],
											 TrUserData),
										      TrUserData).

'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<10,
										    Rest/binary>>,
										  Z1,
										  Z2,
										  F@_1,
										  TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(Rest,
												Z1,
												Z2,
												F@_1,
												TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<>>,
										  0,
										  0,
										  R1,
										  TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
									=
									lists_reverse(R1,
										      TrUserData)};
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Other,
										  Z1,
										  Z2,
										  F@_1,
										  TrUserData) ->
    'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Other,
										     Z1,
										     Z2,
										     F@_1,
										     TrUserData).

'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     TrUserData);
'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(Rest,
												      0,
												      0,
												      F@_1,
												      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
											   0,
											   0,
											   F@_1,
											   TrUserData);
	    1 ->
		'skip_64_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										       0,
										       0,
										       F@_1,
										       TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
												     0,
												     0,
												     F@_1,
												     TrUserData);
	    3 ->
		'skip_group_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
											  Key
											    bsr
											    3,
											  0,
											  F@_1,
											  TrUserData);
	    5 ->
		'skip_32_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										       0,
										       0,
										       F@_1,
										       TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<>>,
										 0,
										 0,
										 R1,
										 TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
									=
									lists_reverse(R1,
										      TrUserData)}.

'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(<<1:1,
											      X:7,
											      Rest/binary>>,
											    N,
											    Acc,
											    F@_1,
											    TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(Rest,
												N
												  +
												  7,
												X
												  bsl
												  N
												  +
												  Acc,
												F@_1,
												TrUserData);
'd_field_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess_updated_inst_results'(<<0:1,
											      X:7,
											      Rest/binary>>,
											    N,
											    Acc,
											    Prev,
											    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.UpdatedInstanceResult'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(RestF,
										      0,
										      0,
										      cons(NewFValue,
											   Prev,
											   TrUserData),
										      TrUserData).

'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   TrUserData) ->
    'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
									       Z1,
									       Z2,
									       F@_1,
									       TrUserData);
'skip_varint_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
									     _:7,
									     Rest/binary>>,
									   Z1,
									   Z2,
									   F@_1,
									   TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      TrUserData).

'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<1:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
											 N
											   +
											   7,
											 X
											   bsl
											   N
											   +
											   Acc,
											 F@_1,
											 TrUserData);
'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<0:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest2,
										      0,
										      0,
										      F@_1,
										      TrUserData).

'skip_group_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Bin,
									  FNum,
									  Z2,
									  F@_1,
									  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      0,
										      Z2,
										      F@_1,
										      TrUserData).

'skip_32_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<_:32,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      TrUserData).

'skip_64_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(<<_:64,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      TrUserData).

'decode_msg_SetResp.UpdatedObjectResult.OperationStatus'(Bin,
							 TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Bin,
								     0, 0,
								     id(undefined,
									TrUserData),
								     TrUserData).

'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(<<10,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(Rest,
								       Z1, Z2,
								       F@_1,
								       TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(<<18,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 TrUserData) ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(Rest,
								       Z1, Z2,
								       F@_1,
								       TrUserData);
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(<<>>,
								 0, 0, F@_1,
								 _) ->
    #'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
						       = F@_1};
'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Other,
								 Z1, Z2, F@_1,
								 TrUserData) ->
    'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Other,
								    Z1, Z2,
								    F@_1,
								    TrUserData).

'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1,
								    TrUserData);
'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
      18 ->
	  'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
	    1 ->
		'skip_64_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
										    0,
										    0,
										    F@_1,
										    TrUserData);
	    3 ->
		'skip_group_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
									 Key bsr
									   3,
									 0,
									 F@_1,
									 TrUserData);
	    5 ->
		'skip_32_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(<<>>,
								0, 0, F@_1,
								_) ->
    #'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
						       = F@_1}.

'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       TrUserData);
'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_failure'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Bs,
													 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(RestF,
								     0, 0,
								     case Prev
									 of
								       undefined ->
									   id({oper_failure,
									       NewFValue},
									      TrUserData);
								       {oper_failure,
									MVPrev} ->
									   id({oper_failure,
									       'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(MVPrev,
																			NewFValue,
																			TrUserData)},
									      TrUserData);
								       _ ->
									   id({oper_failure,
									       NewFValue},
									      TrUserData)
								     end,
								     TrUserData).

'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       TrUserData);
'd_field_SetResp.UpdatedObjectResult.OperationStatus_oper_success'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Bs,
													 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(RestF,
								     0, 0,
								     case Prev
									 of
								       undefined ->
									   id({oper_success,
									       NewFValue},
									      TrUserData);
								       {oper_success,
									MVPrev} ->
									   id({oper_success,
									       'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(MVPrev,
																			NewFValue,
																			TrUserData)},
									      TrUserData);
								       _ ->
									   id({oper_success,
									       NewFValue},
									      TrUserData)
								     end,
								     TrUserData).

'skip_varint_SetResp.UpdatedObjectResult.OperationStatus'(<<1:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1,
							  TrUserData) ->
    'skip_varint_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData);
'skip_varint_SetResp.UpdatedObjectResult.OperationStatus'(<<0:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1,
							  TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1,
								    TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									TrUserData);
'skip_length_delimited_SetResp.UpdatedObjectResult.OperationStatus'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1,
								    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Rest2,
								     0, 0, F@_1,
								     TrUserData).

'skip_group_SetResp.UpdatedObjectResult.OperationStatus'(Bin,
							 FNum, Z2, F@_1,
							 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								     0, Z2,
								     F@_1,
								     TrUserData).

'skip_32_SetResp.UpdatedObjectResult.OperationStatus'(<<_:32,
							Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'skip_64_SetResp.UpdatedObjectResult.OperationStatus'(<<_:64,
							Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedObjectResult.OperationStatus'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'decode_msg_SetResp.UpdatedInstanceFailure'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Bin,
							0, 0,
							id([], TrUserData),
							id([], TrUserData),
							TrUserData).

'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_SetResp.UpdatedInstanceFailure_affected_path'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(<<18,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_SetResp.UpdatedInstanceFailure_param_errs'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(<<>>,
						    0, 0, F@_1, R1,
						    TrUserData) ->
    #'SetResp.UpdatedInstanceFailure'{affected_path = F@_1,
				      param_errs =
					  lists_reverse(R1, TrUserData)};
'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dg_read_field_def_SetResp.UpdatedInstanceFailure'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'dg_read_field_def_SetResp.UpdatedInstanceFailure'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.UpdatedInstanceFailure'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'dg_read_field_def_SetResp.UpdatedInstanceFailure'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SetResp.UpdatedInstanceFailure_affected_path'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      18 ->
	  'd_field_SetResp.UpdatedInstanceFailure_param_errs'(Rest,
							      0, 0, F@_1, F@_2,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.UpdatedInstanceFailure'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    1 ->
		'skip_64_SetResp.UpdatedInstanceFailure'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.UpdatedInstanceFailure'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    3 ->
		'skip_group_SetResp.UpdatedInstanceFailure'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, TrUserData);
	    5 ->
		'skip_32_SetResp.UpdatedInstanceFailure'(Rest, 0, 0,
							 F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.UpdatedInstanceFailure'(<<>>,
						   0, 0, F@_1, R1,
						   TrUserData) ->
    #'SetResp.UpdatedInstanceFailure'{affected_path = F@_1,
				      param_errs =
					  lists_reverse(R1, TrUserData)}.

'd_field_SetResp.UpdatedInstanceFailure_affected_path'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedInstanceFailure_affected_path'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_SetResp.UpdatedInstanceFailure_affected_path'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F@_2,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(RestF,
							0, 0, NewFValue, F@_2,
							TrUserData).

'd_field_SetResp.UpdatedInstanceFailure_param_errs'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedInstanceFailure_param_errs'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'd_field_SetResp.UpdatedInstanceFailure_param_errs'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, Prev,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.ParameterError'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(RestF,
							0, 0, F@_1,
							cons(NewFValue, Prev,
							     TrUserData),
							TrUserData).

'skip_varint_SetResp.UpdatedInstanceFailure'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_SetResp.UpdatedInstanceFailure'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'skip_varint_SetResp.UpdatedInstanceFailure'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_length_delimited_SetResp.UpdatedInstanceFailure'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.UpdatedInstanceFailure'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'skip_length_delimited_SetResp.UpdatedInstanceFailure'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Rest2,
							0, 0, F@_1, F@_2,
							TrUserData).

'skip_group_SetResp.UpdatedInstanceFailure'(Bin, FNum,
					    Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Rest,
							0, Z2, F@_1, F@_2,
							TrUserData).

'skip_32_SetResp.UpdatedInstanceFailure'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_64_SetResp.UpdatedInstanceFailure'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceFailure'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'decode_msg_SetResp.UpdatedInstanceResult'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       'tr_decode_init_default_SetResp.UpdatedInstanceResult.updated_params'([],
															     TrUserData),
						       TrUserData).

'dfp_read_field_def_SetResp.UpdatedInstanceResult'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'd_field_SetResp.UpdatedInstanceResult_affected_path'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
'dfp_read_field_def_SetResp.UpdatedInstanceResult'(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'd_field_SetResp.UpdatedInstanceResult_param_errs'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
'dfp_read_field_def_SetResp.UpdatedInstanceResult'(<<26,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'd_field_SetResp.UpdatedInstanceResult_updated_params'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData);
'dfp_read_field_def_SetResp.UpdatedInstanceResult'(<<>>,
						   0, 0, F@_1, R1, R2,
						   TrUserData) ->
    #'SetResp.UpdatedInstanceResult'{affected_path = F@_1,
				     param_errs = lists_reverse(R1, TrUserData),
				     updated_params =
					 'tr_decode_repeated_finalize_SetResp.UpdatedInstanceResult.updated_params'(R2,
														    TrUserData)};
'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'dg_read_field_def_SetResp.UpdatedInstanceResult'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

'dg_read_field_def_SetResp.UpdatedInstanceResult'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.UpdatedInstanceResult'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
'dg_read_field_def_SetResp.UpdatedInstanceResult'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SetResp.UpdatedInstanceResult_affected_path'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      18 ->
	  'd_field_SetResp.UpdatedInstanceResult_param_errs'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      26 ->
	  'd_field_SetResp.UpdatedInstanceResult_updated_params'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.UpdatedInstanceResult'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    1 ->
		'skip_64_SetResp.UpdatedInstanceResult'(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.UpdatedInstanceResult'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData);
	    3 ->
		'skip_group_SetResp.UpdatedInstanceResult'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3,
							   TrUserData);
	    5 ->
		'skip_32_SetResp.UpdatedInstanceResult'(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.UpdatedInstanceResult'(<<>>,
						  0, 0, F@_1, R1, R2,
						  TrUserData) ->
    #'SetResp.UpdatedInstanceResult'{affected_path = F@_1,
				     param_errs = lists_reverse(R1, TrUserData),
				     updated_params =
					 'tr_decode_repeated_finalize_SetResp.UpdatedInstanceResult.updated_params'(R2,
														    TrUserData)}.

'd_field_SetResp.UpdatedInstanceResult_affected_path'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedInstanceResult_affected_path'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
'd_field_SetResp.UpdatedInstanceResult_affected_path'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, F@_2, F@_3,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, TrUserData).

'd_field_SetResp.UpdatedInstanceResult_param_errs'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedInstanceResult_param_errs'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
'd_field_SetResp.UpdatedInstanceResult_param_errs'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, Prev, F@_3,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.ParameterError'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(RestF,
						       0, 0, F@_1,
						       cons(NewFValue, Prev,
							    TrUserData),
						       F@_3, TrUserData).

'd_field_SetResp.UpdatedInstanceResult_updated_params'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData)
    when N < 57 ->
    'd_field_SetResp.UpdatedInstanceResult_updated_params'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   TrUserData);
'd_field_SetResp.UpdatedInstanceResult_updated_params'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, Prev,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(RestF,
						       0, 0, F@_1, F@_2,
						       'tr_decode_repeated_add_elem_SetResp.UpdatedInstanceResult.updated_params'(NewFValue,
																  Prev,
																  TrUserData),
						       TrUserData).

'skip_varint_SetResp.UpdatedInstanceResult'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'skip_varint_SetResp.UpdatedInstanceResult'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
'skip_varint_SetResp.UpdatedInstanceResult'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_length_delimited_SetResp.UpdatedInstanceResult'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.UpdatedInstanceResult'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
'skip_length_delimited_SetResp.UpdatedInstanceResult'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_group_SetResp.UpdatedInstanceResult'(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_32_SetResp.UpdatedInstanceResult'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_64_SetResp.UpdatedInstanceResult'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_SetResp.UpdatedInstanceResult'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'decode_msg_SetResp.ParameterError'(Bin, TrUserData) ->
    'dfp_read_field_def_SetResp.ParameterError'(Bin, 0, 0,
						id([], TrUserData),
						id(0, TrUserData),
						id([], TrUserData), TrUserData).

'dfp_read_field_def_SetResp.ParameterError'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_SetResp.ParameterError_param'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_SetResp.ParameterError'(<<21,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_SetResp.ParameterError_err_code'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_SetResp.ParameterError'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_SetResp.ParameterError_err_msg'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_SetResp.ParameterError'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'SetResp.ParameterError'{param = F@_1, err_code = F@_2,
			      err_msg = F@_3};
'dfp_read_field_def_SetResp.ParameterError'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_SetResp.ParameterError'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_SetResp.ParameterError'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SetResp.ParameterError'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_SetResp.ParameterError'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SetResp.ParameterError_param'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      21 ->
	  'd_field_SetResp.ParameterError_err_code'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      26 ->
	  'd_field_SetResp.ParameterError_err_msg'(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SetResp.ParameterError'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_SetResp.ParameterError'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_SetResp.ParameterError'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_SetResp.ParameterError'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_SetResp.ParameterError'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_SetResp.ParameterError'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'SetResp.ParameterError'{param = F@_1, err_code = F@_2,
			      err_msg = F@_3}.

'd_field_SetResp.ParameterError_param'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_SetResp.ParameterError_param'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_SetResp.ParameterError_param'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.ParameterError'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_SetResp.ParameterError_err_code'(<<Value:32/little,
					    Rest/binary>>,
					  Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_SetResp.ParameterError'(Rest, Z1,
						Z2, F@_1, id(Value, TrUserData),
						F@_3, TrUserData).

'd_field_SetResp.ParameterError_err_msg'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_SetResp.ParameterError_err_msg'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
'd_field_SetResp.ParameterError_err_msg'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_SetResp.ParameterError'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_SetResp.ParameterError'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_SetResp.ParameterError'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_SetResp.ParameterError'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_SetResp.ParameterError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_SetResp.ParameterError'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_SetResp.ParameterError'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_SetResp.ParameterError'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SetResp.ParameterError'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_SetResp.ParameterError'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_SetResp.ParameterError'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_SetResp.ParameterError'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_SetResp.ParameterError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_SetResp.ParameterError'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_SetResp.ParameterError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_SetResp(Bin, TrUserData) ->
    dfp_read_field_def_SetResp(Bin, 0, 0,
			       id([], TrUserData), TrUserData).

dfp_read_field_def_SetResp(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_SetResp_updated_obj_results(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_SetResp(<<>>, 0, 0, R1,
			   TrUserData) ->
    #'SetResp'{updated_obj_results =
		   lists_reverse(R1, TrUserData)};
dfp_read_field_def_SetResp(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_SetResp(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_SetResp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SetResp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_SetResp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SetResp_updated_obj_results(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_SetResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_SetResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SetResp(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_SetResp(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_SetResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SetResp(<<>>, 0, 0, R1, TrUserData) ->
    #'SetResp'{updated_obj_results =
		   lists_reverse(R1, TrUserData)}.

d_field_SetResp_updated_obj_results(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_SetResp_updated_obj_results(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_SetResp_updated_obj_results(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_SetResp.UpdatedObjectResult'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SetResp(RestF, 0, 0,
			       cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_SetResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_SetResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SetResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_SetResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_SetResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SetResp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SetResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SetResp(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_SetResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SetResp(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_SetResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_SetResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_SetResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_SetResp(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_Operate(Bin, TrUserData) ->
    dfp_read_field_def_Operate(Bin, 0, 0,
			       id([], TrUserData), id([], TrUserData),
			       id(false, TrUserData),
			       'tr_decode_init_default_Operate.input_args'([],
									   TrUserData),
			       TrUserData).

dfp_read_field_def_Operate(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Operate_command(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_Operate(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Operate_command_key(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_Operate(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Operate_send_resp(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_Operate(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Operate_input_args(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_Operate(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   R1, TrUserData) ->
    #'Operate'{command = F@_1, command_key = F@_2,
	       send_resp = F@_3,
	       input_args =
		   'tr_decode_repeated_finalize_Operate.input_args'(R1,
								    TrUserData)};
dfp_read_field_def_Operate(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Operate(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

dg_read_field_def_Operate(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Operate(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Operate(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Operate_command(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      18 ->
	  d_field_Operate_command_key(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      24 ->
	  d_field_Operate_send_resp(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      34 ->
	  d_field_Operate_input_args(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Operate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    1 ->
		skip_64_Operate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData);
	    2 ->
		skip_length_delimited_Operate(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Operate(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
	    5 ->
		skip_32_Operate(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData)
	  end
    end;
dg_read_field_def_Operate(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  R1, TrUserData) ->
    #'Operate'{command = F@_1, command_key = F@_2,
	       send_resp = F@_3,
	       input_args =
		   'tr_decode_repeated_finalize_Operate.input_args'(R1,
								    TrUserData)}.

d_field_Operate_command(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Operate_command(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operate_command(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Operate(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, TrUserData).

d_field_Operate_command_key(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Operate_command_key(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operate_command_key(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Operate(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, TrUserData).

d_field_Operate_send_resp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Operate_send_resp(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operate_send_resp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Operate(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, TrUserData).

d_field_Operate_input_args(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Operate_input_args(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Operate_input_args(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Operate(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       'tr_decode_repeated_add_elem_Operate.input_args'(NewFValue,
										Prev,
										TrUserData),
			       TrUserData).

skip_varint_Operate(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Operate(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
skip_varint_Operate(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Operate(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_length_delimited_Operate(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Operate(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
skip_length_delimited_Operate(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Operate(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_group_Operate(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Operate(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_32_Operate(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Operate(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_64_Operate(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Operate(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

'decode_msg_OperateResp.OperationResult'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult'(Bin, 0,
						     0, id([], TrUserData),
						     id(undefined, TrUserData),
						     TrUserData).

'dfp_read_field_def_OperateResp.OperationResult'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_OperateResp.OperationResult_executed_command'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_OperateResp.OperationResult'(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_OperateResp.OperationResult_req_obj_path'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_OperateResp.OperationResult'(<<26,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_OperateResp.OperationResult_req_output_args'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'dfp_read_field_def_OperateResp.OperationResult'(<<34,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_OperateResp.OperationResult_cmd_failure'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'dfp_read_field_def_OperateResp.OperationResult'(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #'OperateResp.OperationResult'{executed_command = F@_1,
				   operation_resp = F@_2};
'dfp_read_field_def_OperateResp.OperationResult'(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dg_read_field_def_OperateResp.OperationResult'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'dg_read_field_def_OperateResp.OperationResult'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_OperateResp.OperationResult'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'dg_read_field_def_OperateResp.OperationResult'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_OperateResp.OperationResult_executed_command'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      18 ->
	  'd_field_OperateResp.OperationResult_req_obj_path'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      26 ->
	  'd_field_OperateResp.OperationResult_req_output_args'(Rest,
								0, 0, F@_1,
								F@_2,
								TrUserData);
      34 ->
	  'd_field_OperateResp.OperationResult_cmd_failure'(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_OperateResp.OperationResult'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		'skip_64_OperateResp.OperationResult'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_OperateResp.OperationResult'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		'skip_group_OperateResp.OperationResult'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		'skip_32_OperateResp.OperationResult'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_OperateResp.OperationResult'(<<>>, 0,
						0, F@_1, F@_2, _) ->
    #'OperateResp.OperationResult'{executed_command = F@_1,
				   operation_resp = F@_2}.

'd_field_OperateResp.OperationResult_executed_command'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_OperateResp.OperationResult_executed_command'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_OperateResp.OperationResult_executed_command'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F@_2,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_OperateResp.OperationResult'(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

'd_field_OperateResp.OperationResult_req_obj_path'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_OperateResp.OperationResult_req_obj_path'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_OperateResp.OperationResult_req_obj_path'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_OperateResp.OperationResult'(RestF,
						     0, 0, F@_1,
						     id({req_obj_path,
							 NewFValue},
							TrUserData),
						     TrUserData).

'd_field_OperateResp.OperationResult_req_output_args'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    'd_field_OperateResp.OperationResult_req_output_args'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'd_field_OperateResp.OperationResult_req_output_args'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, Prev,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_OperateResp.OperationResult.OutputArgs'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_OperateResp.OperationResult'(RestF,
						     0, 0, F@_1,
						     case Prev of
						       undefined ->
							   id({req_output_args,
							       NewFValue},
							      TrUserData);
						       {req_output_args,
							MVPrev} ->
							   id({req_output_args,
							       'merge_msg_OperateResp.OperationResult.OutputArgs'(MVPrev,
														  NewFValue,
														  TrUserData)},
							      TrUserData);
						       _ ->
							   id({req_output_args,
							       NewFValue},
							      TrUserData)
						     end,
						     TrUserData).

'd_field_OperateResp.OperationResult_cmd_failure'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    'd_field_OperateResp.OperationResult_cmd_failure'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'd_field_OperateResp.OperationResult_cmd_failure'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, Prev,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_OperateResp.OperationResult.CommandFailure'(Bs,
										       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_OperateResp.OperationResult'(RestF,
						     0, 0, F@_1,
						     case Prev of
						       undefined ->
							   id({cmd_failure,
							       NewFValue},
							      TrUserData);
						       {cmd_failure, MVPrev} ->
							   id({cmd_failure,
							       'merge_msg_OperateResp.OperationResult.CommandFailure'(MVPrev,
														      NewFValue,
														      TrUserData)},
							      TrUserData);
						       _ ->
							   id({cmd_failure,
							       NewFValue},
							      TrUserData)
						     end,
						     TrUserData).

'skip_varint_OperateResp.OperationResult'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_OperateResp.OperationResult'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'skip_varint_OperateResp.OperationResult'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_length_delimited_OperateResp.OperationResult'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_OperateResp.OperationResult'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'skip_length_delimited_OperateResp.OperationResult'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_OperateResp.OperationResult'(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

'skip_group_OperateResp.OperationResult'(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_OperateResp.OperationResult'(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

'skip_32_OperateResp.OperationResult'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_64_OperateResp.OperationResult'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'decode_msg_OperateResp.OperationResult.CommandFailure'(Bin,
							TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Bin,
								    0, 0,
								    id(0,
								       TrUserData),
								    id([],
								       TrUserData),
								    TrUserData).

'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(<<13,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData) ->
    'd_field_OperateResp.OperationResult.CommandFailure_err_code'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(<<18,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData) ->
    'd_field_OperateResp.OperationResult.CommandFailure_err_msg'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(<<>>,
								0, 0, F@_1,
								F@_2, _) ->
    #'OperateResp.OperationResult.CommandFailure'{err_code =
						      F@_1,
						  err_msg = F@_2};
'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Other,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData) ->
    'dg_read_field_def_OperateResp.OperationResult.CommandFailure'(Other,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData).

'dg_read_field_def_OperateResp.OperationResult.CommandFailure'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   TrUserData);
'dg_read_field_def_OperateResp.OperationResult.CommandFailure'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2,
							       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_OperateResp.OperationResult.CommandFailure_err_code'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      18 ->
	  'd_field_OperateResp.OperationResult.CommandFailure_err_msg'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_OperateResp.OperationResult.CommandFailure'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData);
	    1 ->
		'skip_64_OperateResp.OperationResult.CommandFailure'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    2 ->
		'skip_length_delimited_OperateResp.OperationResult.CommandFailure'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   TrUserData);
	    3 ->
		'skip_group_OperateResp.OperationResult.CommandFailure'(Rest,
									Key bsr
									  3,
									0, F@_1,
									F@_2,
									TrUserData);
	    5 ->
		'skip_32_OperateResp.OperationResult.CommandFailure'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData)
	  end
    end;
'dg_read_field_def_OperateResp.OperationResult.CommandFailure'(<<>>,
							       0, 0, F@_1, F@_2,
							       _) ->
    #'OperateResp.OperationResult.CommandFailure'{err_code =
						      F@_1,
						  err_msg = F@_2}.

'd_field_OperateResp.OperationResult.CommandFailure_err_code'(<<Value:32/little,
								Rest/binary>>,
							      Z1, Z2, _, F@_2,
							      TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest,
								    Z1, Z2,
								    id(Value,
								       TrUserData),
								    F@_2,
								    TrUserData).

'd_field_OperateResp.OperationResult.CommandFailure_err_msg'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_OperateResp.OperationResult.CommandFailure_err_msg'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_OperateResp.OperationResult.CommandFailure_err_msg'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, _,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(RestF,
								    0, 0, F@_1,
								    NewFValue,
								    TrUserData).

'skip_varint_OperateResp.OperationResult.CommandFailure'(<<1:1,
							   _:7, Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'skip_varint_OperateResp.OperationResult.CommandFailure'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
'skip_varint_OperateResp.OperationResult.CommandFailure'(<<0:1,
							   _:7, Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'skip_length_delimited_OperateResp.OperationResult.CommandFailure'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    'skip_length_delimited_OperateResp.OperationResult.CommandFailure'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
'skip_length_delimited_OperateResp.OperationResult.CommandFailure'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest2,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData).

'skip_group_OperateResp.OperationResult.CommandFailure'(Bin,
							FNum, Z2, F@_1, F@_2,
							TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest,
								    0, Z2, F@_1,
								    F@_2,
								    TrUserData).

'skip_32_OperateResp.OperationResult.CommandFailure'(<<_:32,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'skip_64_OperateResp.OperationResult.CommandFailure'(<<_:64,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.CommandFailure'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'decode_msg_OperateResp.OperationResult.OutputArgs'(Bin,
						    TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Bin,
								0, 0,
								'tr_decode_init_default_OperateResp.OperationResult.OutputArgs.output_args'([],
																	    TrUserData),
								TrUserData).

'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(<<10,
							      Rest/binary>>,
							    Z1, Z2, F@_1,
							    TrUserData) ->
    'd_field_OperateResp.OperationResult.OutputArgs_output_args'(Rest,
								 Z1, Z2, F@_1,
								 TrUserData);
'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(<<>>,
							    0, 0, R1,
							    TrUserData) ->
    #'OperateResp.OperationResult.OutputArgs'{output_args =
						  'tr_decode_repeated_finalize_OperateResp.OperationResult.OutputArgs.output_args'(R1,
																   TrUserData)};
'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Other,
							    Z1, Z2, F@_1,
							    TrUserData) ->
    'dg_read_field_def_OperateResp.OperationResult.OutputArgs'(Other,
							       Z1, Z2, F@_1,
							       TrUserData).

'dg_read_field_def_OperateResp.OperationResult.OutputArgs'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1,
							   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_OperateResp.OperationResult.OutputArgs'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1,
							       TrUserData);
'dg_read_field_def_OperateResp.OperationResult.OutputArgs'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1,
							   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_OperateResp.OperationResult.OutputArgs_output_args'(Rest,
								       0, 0,
								       F@_1,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_OperateResp.OperationResult.OutputArgs'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    1 ->
		'skip_64_OperateResp.OperationResult.OutputArgs'(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    2 ->
		'skip_length_delimited_OperateResp.OperationResult.OutputArgs'(Rest,
									       0,
									       0,
									       F@_1,
									       TrUserData);
	    3 ->
		'skip_group_OperateResp.OperationResult.OutputArgs'(Rest,
								    Key bsr 3,
								    0, F@_1,
								    TrUserData);
	    5 ->
		'skip_32_OperateResp.OperationResult.OutputArgs'(Rest,
								 0, 0, F@_1,
								 TrUserData)
	  end
    end;
'dg_read_field_def_OperateResp.OperationResult.OutputArgs'(<<>>,
							   0, 0, R1,
							   TrUserData) ->
    #'OperateResp.OperationResult.OutputArgs'{output_args =
						  'tr_decode_repeated_finalize_OperateResp.OperationResult.OutputArgs.output_args'(R1,
																   TrUserData)}.

'd_field_OperateResp.OperationResult.OutputArgs_output_args'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1,
							     TrUserData)
    when N < 57 ->
    'd_field_OperateResp.OperationResult.OutputArgs_output_args'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1,
								 TrUserData);
'd_field_OperateResp.OperationResult.OutputArgs_output_args'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(RestF,
								0, 0,
								'tr_decode_repeated_add_elem_OperateResp.OperationResult.OutputArgs.output_args'(NewFValue,
																		 Prev,
																		 TrUserData),
								TrUserData).

'skip_varint_OperateResp.OperationResult.OutputArgs'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1,
						     TrUserData) ->
    'skip_varint_OperateResp.OperationResult.OutputArgs'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData);
'skip_varint_OperateResp.OperationResult.OutputArgs'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1,
						     TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Rest,
								Z1, Z2, F@_1,
								TrUserData).

'skip_length_delimited_OperateResp.OperationResult.OutputArgs'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       TrUserData)
    when N < 57 ->
    'skip_length_delimited_OperateResp.OperationResult.OutputArgs'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1,
								   TrUserData);
'skip_length_delimited_OperateResp.OperationResult.OutputArgs'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Rest2,
								0, 0, F@_1,
								TrUserData).

'skip_group_OperateResp.OperationResult.OutputArgs'(Bin,
						    FNum, Z2, F@_1,
						    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Rest,
								0, Z2, F@_1,
								TrUserData).

'skip_32_OperateResp.OperationResult.OutputArgs'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Rest,
								Z1, Z2, F@_1,
								TrUserData).

'skip_64_OperateResp.OperationResult.OutputArgs'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_OperateResp.OperationResult.OutputArgs'(Rest,
								Z1, Z2, F@_1,
								TrUserData).

decode_msg_OperateResp(Bin, TrUserData) ->
    dfp_read_field_def_OperateResp(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_OperateResp(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_OperateResp_operation_results(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_OperateResp(<<>>, 0, 0, R1,
			       TrUserData) ->
    #'OperateResp'{operation_results =
		       lists_reverse(R1, TrUserData)};
dfp_read_field_def_OperateResp(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_OperateResp(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_OperateResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OperateResp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OperateResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OperateResp_operation_results(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OperateResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_OperateResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OperateResp(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_OperateResp(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_OperateResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OperateResp(<<>>, 0, 0, R1,
			      TrUserData) ->
    #'OperateResp'{operation_results =
		       lists_reverse(R1, TrUserData)}.

d_field_OperateResp_operation_results(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OperateResp_operation_results(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_OperateResp_operation_results(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_OperateResp.OperationResult'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OperateResp(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_OperateResp(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_OperateResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_OperateResp(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OperateResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_OperateResp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OperateResp(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OperateResp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OperateResp(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_OperateResp(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OperateResp(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_OperateResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_OperateResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_OperateResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_OperateResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

'decode_msg_Notify.Event'(Bin, TrUserData) ->
    'dfp_read_field_def_Notify.Event'(Bin, 0, 0,
				      id([], TrUserData), id([], TrUserData),
				      'tr_decode_init_default_Notify.Event.params'([],
										   TrUserData),
				      TrUserData).

'dfp_read_field_def_Notify.Event'(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_Notify.Event_obj_path'(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
'dfp_read_field_def_Notify.Event'(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_Notify.Event_event_name'(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
'dfp_read_field_def_Notify.Event'(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'd_field_Notify.Event_params'(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
'dfp_read_field_def_Notify.Event'(<<>>, 0, 0, F@_1,
				  F@_2, R1, TrUserData) ->
    #'Notify.Event'{obj_path = F@_1, event_name = F@_2,
		    params =
			'tr_decode_repeated_finalize_Notify.Event.params'(R1,
									  TrUserData)};
'dfp_read_field_def_Notify.Event'(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_Notify.Event'(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

'dg_read_field_def_Notify.Event'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.Event'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
'dg_read_field_def_Notify.Event'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.Event_obj_path'(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      18 ->
	  'd_field_Notify.Event_event_name'(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      26 ->
	  'd_field_Notify.Event_params'(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.Event'(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		'skip_64_Notify.Event'(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		'skip_length_delimited_Notify.Event'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		'skip_group_Notify.Event'(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		'skip_32_Notify.Event'(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
'dg_read_field_def_Notify.Event'(<<>>, 0, 0, F@_1, F@_2,
				 R1, TrUserData) ->
    #'Notify.Event'{obj_path = F@_1, event_name = F@_2,
		    params =
			'tr_decode_repeated_finalize_Notify.Event.params'(R1,
									  TrUserData)}.

'd_field_Notify.Event_obj_path'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Notify.Event_obj_path'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
'd_field_Notify.Event_obj_path'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.Event'(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, TrUserData).

'd_field_Notify.Event_event_name'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Notify.Event_event_name'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
'd_field_Notify.Event_event_name'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.Event'(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

'd_field_Notify.Event_params'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_Notify.Event_params'(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Notify.Event_params'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.Event'(RestF, 0, 0, F@_1,
				      F@_2,
				      'tr_decode_repeated_add_elem_Notify.Event.params'(NewFValue,
											Prev,
											TrUserData),
				      TrUserData).

'skip_varint_Notify.Event'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_Notify.Event'(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
'skip_varint_Notify.Event'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Notify.Event'(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

'skip_length_delimited_Notify.Event'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.Event'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
'skip_length_delimited_Notify.Event'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.Event'(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

'skip_group_Notify.Event'(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.Event'(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

'skip_32_Notify.Event'(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Notify.Event'(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

'skip_64_Notify.Event'(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_Notify.Event'(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

'decode_msg_Notify.ValueChange'(Bin, TrUserData) ->
    'dfp_read_field_def_Notify.ValueChange'(Bin, 0, 0,
					    id([], TrUserData),
					    id([], TrUserData), TrUserData).

'dfp_read_field_def_Notify.ValueChange'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Notify.ValueChange_param_path'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
'dfp_read_field_def_Notify.ValueChange'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Notify.ValueChange_param_value'(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
'dfp_read_field_def_Notify.ValueChange'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'Notify.ValueChange'{param_path = F@_1,
			  param_value = F@_2};
'dfp_read_field_def_Notify.ValueChange'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_Notify.ValueChange'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_Notify.ValueChange'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.ValueChange'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_Notify.ValueChange'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.ValueChange_param_path'(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_Notify.ValueChange_param_value'(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.ValueChange'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_Notify.ValueChange'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_Notify.ValueChange'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_Notify.ValueChange'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_Notify.ValueChange'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_Notify.ValueChange'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'Notify.ValueChange'{param_path = F@_1,
			  param_value = F@_2}.

'd_field_Notify.ValueChange_param_path'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Notify.ValueChange_param_path'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
'd_field_Notify.ValueChange_param_path'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.ValueChange'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_Notify.ValueChange_param_value'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Notify.ValueChange_param_value'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'd_field_Notify.ValueChange_param_value'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.ValueChange'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_Notify.ValueChange'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_Notify.ValueChange'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_Notify.ValueChange'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Notify.ValueChange'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_Notify.ValueChange'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.ValueChange'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_Notify.ValueChange'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.ValueChange'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_Notify.ValueChange'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.ValueChange'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_Notify.ValueChange'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Notify.ValueChange'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_Notify.ValueChange'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Notify.ValueChange'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'decode_msg_Notify.ObjectCreation'(Bin, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectCreation'(Bin, 0, 0,
					       id([], TrUserData),
					       'tr_decode_init_default_Notify.ObjectCreation.unique_keys'([],
													  TrUserData),
					       TrUserData).

'dfp_read_field_def_Notify.ObjectCreation'(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Notify.ObjectCreation_obj_path'(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
'dfp_read_field_def_Notify.ObjectCreation'(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_Notify.ObjectCreation_unique_keys'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Notify.ObjectCreation'(<<>>, 0, 0,
					   F@_1, R1, TrUserData) ->
    #'Notify.ObjectCreation'{obj_path = F@_1,
			     unique_keys =
				 'tr_decode_repeated_finalize_Notify.ObjectCreation.unique_keys'(R1,
												 TrUserData)};
'dfp_read_field_def_Notify.ObjectCreation'(Other, Z1,
					   Z2, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_Notify.ObjectCreation'(Other, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'dg_read_field_def_Notify.ObjectCreation'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.ObjectCreation'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'dg_read_field_def_Notify.ObjectCreation'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.ObjectCreation_obj_path'(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_Notify.ObjectCreation_unique_keys'(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.ObjectCreation'(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    1 ->
		'skip_64_Notify.ObjectCreation'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    2 ->
		'skip_length_delimited_Notify.ObjectCreation'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData);
	    3 ->
		'skip_group_Notify.ObjectCreation'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_Notify.ObjectCreation'(Rest, 0, 0, F@_1, F@_2,
						TrUserData)
	  end
    end;
'dg_read_field_def_Notify.ObjectCreation'(<<>>, 0, 0,
					  F@_1, R1, TrUserData) ->
    #'Notify.ObjectCreation'{obj_path = F@_1,
			     unique_keys =
				 'tr_decode_repeated_finalize_Notify.ObjectCreation.unique_keys'(R1,
												 TrUserData)}.

'd_field_Notify.ObjectCreation_obj_path'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Notify.ObjectCreation_obj_path'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'd_field_Notify.ObjectCreation_obj_path'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.ObjectCreation'(RestF, 0, 0,
					       NewFValue, F@_2, TrUserData).

'd_field_Notify.ObjectCreation_unique_keys'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_Notify.ObjectCreation_unique_keys'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'd_field_Notify.ObjectCreation_unique_keys'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.ObjectCreation'(RestF, 0, 0,
					       F@_1,
					       'tr_decode_repeated_add_elem_Notify.ObjectCreation.unique_keys'(NewFValue,
													       Prev,
													       TrUserData),
					       TrUserData).

'skip_varint_Notify.ObjectCreation'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_Notify.ObjectCreation'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'skip_varint_Notify.ObjectCreation'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectCreation'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData).

'skip_length_delimited_Notify.ObjectCreation'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.ObjectCreation'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
'skip_length_delimited_Notify.ObjectCreation'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.ObjectCreation'(Rest2, 0, 0,
					       F@_1, F@_2, TrUserData).

'skip_group_Notify.ObjectCreation'(Bin, FNum, Z2, F@_1,
				   F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.ObjectCreation'(Rest, 0, Z2,
					       F@_1, F@_2, TrUserData).

'skip_32_Notify.ObjectCreation'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectCreation'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData).

'skip_64_Notify.ObjectCreation'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectCreation'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData).

'decode_msg_Notify.ObjectDeletion'(Bin, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectDeletion'(Bin, 0, 0,
					       id([], TrUserData), TrUserData).

'dfp_read_field_def_Notify.ObjectDeletion'(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'd_field_Notify.ObjectDeletion_obj_path'(Rest, Z1, Z2,
					     F@_1, TrUserData);
'dfp_read_field_def_Notify.ObjectDeletion'(<<>>, 0, 0,
					   F@_1, _) ->
    #'Notify.ObjectDeletion'{obj_path = F@_1};
'dfp_read_field_def_Notify.ObjectDeletion'(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    'dg_read_field_def_Notify.ObjectDeletion'(Other, Z1, Z2,
					      F@_1, TrUserData).

'dg_read_field_def_Notify.ObjectDeletion'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.ObjectDeletion'(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_Notify.ObjectDeletion'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.ObjectDeletion_obj_path'(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.ObjectDeletion'(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		'skip_64_Notify.ObjectDeletion'(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		'skip_length_delimited_Notify.ObjectDeletion'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		'skip_group_Notify.ObjectDeletion'(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		'skip_32_Notify.ObjectDeletion'(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
'dg_read_field_def_Notify.ObjectDeletion'(<<>>, 0, 0,
					  F@_1, _) ->
    #'Notify.ObjectDeletion'{obj_path = F@_1}.

'd_field_Notify.ObjectDeletion_obj_path'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_Notify.ObjectDeletion_obj_path'(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
'd_field_Notify.ObjectDeletion_obj_path'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.ObjectDeletion'(RestF, 0, 0,
					       NewFValue, TrUserData).

'skip_varint_Notify.ObjectDeletion'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_Notify.ObjectDeletion'(Rest, Z1, Z2, F@_1,
					TrUserData);
'skip_varint_Notify.ObjectDeletion'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectDeletion'(Rest, Z1, Z2,
					       F@_1, TrUserData).

'skip_length_delimited_Notify.ObjectDeletion'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.ObjectDeletion'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
'skip_length_delimited_Notify.ObjectDeletion'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.ObjectDeletion'(Rest2, 0, 0,
					       F@_1, TrUserData).

'skip_group_Notify.ObjectDeletion'(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.ObjectDeletion'(Rest, 0, Z2,
					       F@_1, TrUserData).

'skip_32_Notify.ObjectDeletion'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectDeletion'(Rest, Z1, Z2,
					       F@_1, TrUserData).

'skip_64_Notify.ObjectDeletion'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Notify.ObjectDeletion'(Rest, Z1, Z2,
					       F@_1, TrUserData).

'decode_msg_Notify.OperationComplete'(Bin,
				      TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete'(Bin, 0, 0,
						  id([], TrUserData),
						  id([], TrUserData),
						  id([], TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

'dfp_read_field_def_Notify.OperationComplete'(<<10,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'd_field_Notify.OperationComplete_obj_path'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData);
'dfp_read_field_def_Notify.OperationComplete'(<<18,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'd_field_Notify.OperationComplete_command_name'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData);
'dfp_read_field_def_Notify.OperationComplete'(<<26,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'd_field_Notify.OperationComplete_command_key'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
'dfp_read_field_def_Notify.OperationComplete'(<<34,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'd_field_Notify.OperationComplete_req_output_args'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
'dfp_read_field_def_Notify.OperationComplete'(<<42,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'd_field_Notify.OperationComplete_cmd_failure'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
'dfp_read_field_def_Notify.OperationComplete'(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, _) ->
    #'Notify.OperationComplete'{obj_path = F@_1,
				command_name = F@_2, command_key = F@_3,
				operation_resp = F@_4};
'dfp_read_field_def_Notify.OperationComplete'(Other, Z1,
					      Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dg_read_field_def_Notify.OperationComplete'(Other, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

'dg_read_field_def_Notify.OperationComplete'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.OperationComplete'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_Notify.OperationComplete'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.OperationComplete_obj_path'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
      18 ->
	  'd_field_Notify.OperationComplete_command_name'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
      26 ->
	  'd_field_Notify.OperationComplete_command_key'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, TrUserData);
      34 ->
	  'd_field_Notify.OperationComplete_req_output_args'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
      42 ->
	  'd_field_Notify.OperationComplete_cmd_failure'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.OperationComplete'(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4,
						       TrUserData);
	    1 ->
		'skip_64_Notify.OperationComplete'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
	    2 ->
		'skip_length_delimited_Notify.OperationComplete'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
	    3 ->
		'skip_group_Notify.OperationComplete'(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
	    5 ->
		'skip_32_Notify.OperationComplete'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_Notify.OperationComplete'(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, _) ->
    #'Notify.OperationComplete'{obj_path = F@_1,
				command_name = F@_2, command_key = F@_3,
				operation_resp = F@_4}.

'd_field_Notify.OperationComplete_obj_path'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete_obj_path'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, TrUserData);
'd_field_Notify.OperationComplete_obj_path'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, F@_3, F@_4,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete'(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  F@_4, TrUserData).

'd_field_Notify.OperationComplete_command_name'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete_command_name'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
'd_field_Notify.OperationComplete_command_name'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete'(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  F@_4, TrUserData).

'd_field_Notify.OperationComplete_command_key'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete_command_key'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
'd_field_Notify.OperationComplete_command_key'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _, F@_4,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete'(RestF, 0,
						  0, F@_1, F@_2, NewFValue,
						  F@_4, TrUserData).

'd_field_Notify.OperationComplete_req_output_args'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete_req_output_args'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
'd_field_Notify.OperationComplete_req_output_args'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.OperationComplete.OutputArgs'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete'(RestF, 0,
						  0, F@_1, F@_2, F@_3,
						  case Prev of
						    undefined ->
							id({req_output_args,
							    NewFValue},
							   TrUserData);
						    {req_output_args, MVPrev} ->
							id({req_output_args,
							    'merge_msg_Notify.OperationComplete.OutputArgs'(MVPrev,
													    NewFValue,
													    TrUserData)},
							   TrUserData);
						    _ ->
							id({req_output_args,
							    NewFValue},
							   TrUserData)
						  end,
						  TrUserData).

'd_field_Notify.OperationComplete_cmd_failure'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete_cmd_failure'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
'd_field_Notify.OperationComplete_cmd_failure'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, Prev,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.OperationComplete.CommandFailure'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete'(RestF, 0,
						  0, F@_1, F@_2, F@_3,
						  case Prev of
						    undefined ->
							id({cmd_failure,
							    NewFValue},
							   TrUserData);
						    {cmd_failure, MVPrev} ->
							id({cmd_failure,
							    'merge_msg_Notify.OperationComplete.CommandFailure'(MVPrev,
														NewFValue,
														TrUserData)},
							   TrUserData);
						    _ ->
							id({cmd_failure,
							    NewFValue},
							   TrUserData)
						  end,
						  TrUserData).

'skip_varint_Notify.OperationComplete'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    'skip_varint_Notify.OperationComplete'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_Notify.OperationComplete'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

'skip_length_delimited_Notify.OperationComplete'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.OperationComplete'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
'skip_length_delimited_Notify.OperationComplete'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.OperationComplete'(Rest2, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

'skip_group_Notify.OperationComplete'(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.OperationComplete'(Rest, 0,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

'skip_32_Notify.OperationComplete'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

'skip_64_Notify.OperationComplete'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

'decode_msg_Notify.OperationComplete.CommandFailure'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Bin,
								 0, 0,
								 id(0,
								    TrUserData),
								 id([],
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(<<13,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_Notify.OperationComplete.CommandFailure_err_code'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData);
'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_Notify.OperationComplete.CommandFailure_err_msg'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(<<>>,
							     0, 0, F@_1, F@_2,
							     _) ->
    #'Notify.OperationComplete.CommandFailure'{err_code =
						   F@_1,
					       err_msg = F@_2};
'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Other,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'dg_read_field_def_Notify.OperationComplete.CommandFailure'(Other,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'dg_read_field_def_Notify.OperationComplete.CommandFailure'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.OperationComplete.CommandFailure'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'dg_read_field_def_Notify.OperationComplete.CommandFailure'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_Notify.OperationComplete.CommandFailure_err_code'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
      18 ->
	  'd_field_Notify.OperationComplete.CommandFailure_err_msg'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.OperationComplete.CommandFailure'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    1 ->
		'skip_64_Notify.OperationComplete.CommandFailure'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    2 ->
		'skip_length_delimited_Notify.OperationComplete.CommandFailure'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										TrUserData);
	    3 ->
		'skip_group_Notify.OperationComplete.CommandFailure'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2,
								     TrUserData);
	    5 ->
		'skip_32_Notify.OperationComplete.CommandFailure'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData)
	  end
    end;
'dg_read_field_def_Notify.OperationComplete.CommandFailure'(<<>>,
							    0, 0, F@_1, F@_2,
							    _) ->
    #'Notify.OperationComplete.CommandFailure'{err_code =
						   F@_1,
					       err_msg = F@_2}.

'd_field_Notify.OperationComplete.CommandFailure_err_code'(<<Value:32/little,
							     Rest/binary>>,
							   Z1, Z2, _, F@_2,
							   TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Rest,
								 Z1, Z2,
								 id(Value,
								    TrUserData),
								 F@_2,
								 TrUserData).

'd_field_Notify.OperationComplete.CommandFailure_err_msg'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete.CommandFailure_err_msg'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_Notify.OperationComplete.CommandFailure_err_msg'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, _,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(RestF,
								 0, 0, F@_1,
								 NewFValue,
								 TrUserData).

'skip_varint_Notify.OperationComplete.CommandFailure'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'skip_varint_Notify.OperationComplete.CommandFailure'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'skip_varint_Notify.OperationComplete.CommandFailure'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_length_delimited_Notify.OperationComplete.CommandFailure'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.OperationComplete.CommandFailure'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'skip_length_delimited_Notify.OperationComplete.CommandFailure'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Rest2,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData).

'skip_group_Notify.OperationComplete.CommandFailure'(Bin,
						     FNum, Z2, F@_1, F@_2,
						     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Rest,
								 0, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_32_Notify.OperationComplete.CommandFailure'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_64_Notify.OperationComplete.CommandFailure'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.CommandFailure'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'decode_msg_Notify.OperationComplete.OutputArgs'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Bin,
							     0, 0,
							     'tr_decode_init_default_Notify.OperationComplete.OutputArgs.output_args'([],
																      TrUserData),
							     TrUserData).

'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'd_field_Notify.OperationComplete.OutputArgs_output_args'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData);
'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(<<>>,
							 0, 0, R1,
							 TrUserData) ->
    #'Notify.OperationComplete.OutputArgs'{output_args =
					       'tr_decode_repeated_finalize_Notify.OperationComplete.OutputArgs.output_args'(R1,
															     TrUserData)};
'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Other,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'dg_read_field_def_Notify.OperationComplete.OutputArgs'(Other,
							    Z1, Z2, F@_1,
							    TrUserData).

'dg_read_field_def_Notify.OperationComplete.OutputArgs'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.OperationComplete.OutputArgs'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    TrUserData);
'dg_read_field_def_Notify.OperationComplete.OutputArgs'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.OperationComplete.OutputArgs_output_args'(Rest,
								    0, 0, F@_1,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.OperationComplete.OutputArgs'(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    1 ->
		'skip_64_Notify.OperationComplete.OutputArgs'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    2 ->
		'skip_length_delimited_Notify.OperationComplete.OutputArgs'(Rest,
									    0,
									    0,
									    F@_1,
									    TrUserData);
	    3 ->
		'skip_group_Notify.OperationComplete.OutputArgs'(Rest,
								 Key bsr 3, 0,
								 F@_1,
								 TrUserData);
	    5 ->
		'skip_32_Notify.OperationComplete.OutputArgs'(Rest, 0,
							      0, F@_1,
							      TrUserData)
	  end
    end;
'dg_read_field_def_Notify.OperationComplete.OutputArgs'(<<>>,
							0, 0, R1, TrUserData) ->
    #'Notify.OperationComplete.OutputArgs'{output_args =
					       'tr_decode_repeated_finalize_Notify.OperationComplete.OutputArgs.output_args'(R1,
															     TrUserData)}.

'd_field_Notify.OperationComplete.OutputArgs_output_args'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData)
    when N < 57 ->
    'd_field_Notify.OperationComplete.OutputArgs_output_args'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, TrUserData);
'd_field_Notify.OperationComplete.OutputArgs_output_args'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(RestF,
							     0, 0,
							     'tr_decode_repeated_add_elem_Notify.OperationComplete.OutputArgs.output_args'(NewFValue,
																	   Prev,
																	   TrUserData),
							     TrUserData).

'skip_varint_Notify.OperationComplete.OutputArgs'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_Notify.OperationComplete.OutputArgs'(Rest,
						      Z1, Z2, F@_1, TrUserData);
'skip_varint_Notify.OperationComplete.OutputArgs'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_length_delimited_Notify.OperationComplete.OutputArgs'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.OperationComplete.OutputArgs'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'skip_length_delimited_Notify.OperationComplete.OutputArgs'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Rest2,
							     0, 0, F@_1,
							     TrUserData).

'skip_group_Notify.OperationComplete.OutputArgs'(Bin,
						 FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Rest,
							     0, Z2, F@_1,
							     TrUserData).

'skip_32_Notify.OperationComplete.OutputArgs'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_64_Notify.OperationComplete.OutputArgs'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Notify.OperationComplete.OutputArgs'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'decode_msg_Notify.OnBoardRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_Notify.OnBoardRequest'(Bin, 0, 0,
					       id([], TrUserData),
					       id([], TrUserData),
					       id([], TrUserData),
					       id([], TrUserData), TrUserData).

'dfp_read_field_def_Notify.OnBoardRequest'(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_Notify.OnBoardRequest_oui'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_Notify.OnBoardRequest'(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_Notify.OnBoardRequest_product_class'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
'dfp_read_field_def_Notify.OnBoardRequest'(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_Notify.OnBoardRequest_serial_number'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
'dfp_read_field_def_Notify.OnBoardRequest'(<<34,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_Notify.OnBoardRequest_agent_supported_protocol_versions'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'dfp_read_field_def_Notify.OnBoardRequest'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, _) ->
    #'Notify.OnBoardRequest'{oui = F@_1,
			     product_class = F@_2, serial_number = F@_3,
			     agent_supported_protocol_versions = F@_4};
'dfp_read_field_def_Notify.OnBoardRequest'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'dg_read_field_def_Notify.OnBoardRequest'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

'dg_read_field_def_Notify.OnBoardRequest'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Notify.OnBoardRequest'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
'dg_read_field_def_Notify.OnBoardRequest'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Notify.OnBoardRequest_oui'(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      18 ->
	  'd_field_Notify.OnBoardRequest_product_class'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      26 ->
	  'd_field_Notify.OnBoardRequest_serial_number'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      34 ->
	  'd_field_Notify.OnBoardRequest_agent_supported_protocol_versions'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Notify.OnBoardRequest'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    1 ->
		'skip_64_Notify.OnBoardRequest'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_Notify.OnBoardRequest'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    3 ->
		'skip_group_Notify.OnBoardRequest'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
	    5 ->
		'skip_32_Notify.OnBoardRequest'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_Notify.OnBoardRequest'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, _) ->
    #'Notify.OnBoardRequest'{oui = F@_1,
			     product_class = F@_2, serial_number = F@_3,
			     agent_supported_protocol_versions = F@_4}.

'd_field_Notify.OnBoardRequest_oui'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    'd_field_Notify.OnBoardRequest_oui'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
'd_field_Notify.OnBoardRequest_oui'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OnBoardRequest'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       TrUserData).

'd_field_Notify.OnBoardRequest_product_class'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'd_field_Notify.OnBoardRequest_product_class'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'd_field_Notify.OnBoardRequest_product_class'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3, F@_4,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OnBoardRequest'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       TrUserData).

'd_field_Notify.OnBoardRequest_serial_number'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'd_field_Notify.OnBoardRequest_serial_number'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'd_field_Notify.OnBoardRequest_serial_number'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _, F@_4,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OnBoardRequest'(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       TrUserData).

'd_field_Notify.OnBoardRequest_agent_supported_protocol_versions'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData)
    when N < 57 ->
    'd_field_Notify.OnBoardRequest_agent_supported_protocol_versions'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'd_field_Notify.OnBoardRequest_agent_supported_protocol_versions'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3, _,
								  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_Notify.OnBoardRequest'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       TrUserData).

'skip_varint_Notify.OnBoardRequest'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    'skip_varint_Notify.OnBoardRequest'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
'skip_varint_Notify.OnBoardRequest'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    'dfp_read_field_def_Notify.OnBoardRequest'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_length_delimited_Notify.OnBoardRequest'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'skip_length_delimited_Notify.OnBoardRequest'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_Notify.OnBoardRequest'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Notify.OnBoardRequest'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_group_Notify.OnBoardRequest'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Notify.OnBoardRequest'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_32_Notify.OnBoardRequest'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_Notify.OnBoardRequest'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_64_Notify.OnBoardRequest'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_Notify.OnBoardRequest'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

decode_msg_Notify(Bin, TrUserData) ->
    dfp_read_field_def_Notify(Bin, 0, 0, id([], TrUserData),
			      id(false, TrUserData), id(undefined, TrUserData),
			      TrUserData).

dfp_read_field_def_Notify(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_subscription_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_Notify(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_send_resp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Notify(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_Notify(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_value_change(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Notify(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_obj_creation(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Notify(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_obj_deletion(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Notify(<<58, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_oper_complete(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_Notify(<<66, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Notify_on_board_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_Notify(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #'Notify'{subscription_id = F@_1, send_resp = F@_2,
	      notification = F@_3};
dfp_read_field_def_Notify(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_Notify(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_Notify(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Notify(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Notify(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Notify_subscription_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      16 ->
	  d_field_Notify_send_resp(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      26 ->
	  d_field_Notify_event(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      34 ->
	  d_field_Notify_value_change(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      42 ->
	  d_field_Notify_obj_creation(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      50 ->
	  d_field_Notify_obj_deletion(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      58 ->
	  d_field_Notify_oper_complete(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      66 ->
	  d_field_Notify_on_board_req(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Notify(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_Notify(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_Notify(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_Notify(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_Notify(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_Notify(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 _) ->
    #'Notify'{subscription_id = F@_1, send_resp = F@_2,
	      notification = F@_3}.

d_field_Notify_subscription_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_subscription_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_subscription_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, TrUserData).

d_field_Notify_send_resp(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_send_resp(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_send_resp(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, TrUserData).

d_field_Notify_event(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_event(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_Notify_event(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.Event'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				undefined -> id({event, NewFValue}, TrUserData);
				{event, MVPrev} ->
				    id({event,
					'merge_msg_Notify.Event'(MVPrev,
								 NewFValue,
								 TrUserData)},
				       TrUserData);
				_ -> id({event, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Notify_value_change(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_value_change(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_value_change(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.ValueChange'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				undefined ->
				    id({value_change, NewFValue}, TrUserData);
				{value_change, MVPrev} ->
				    id({value_change,
					'merge_msg_Notify.ValueChange'(MVPrev,
								       NewFValue,
								       TrUserData)},
				       TrUserData);
				_ -> id({value_change, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Notify_obj_creation(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_obj_creation(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_obj_creation(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.ObjectCreation'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				undefined ->
				    id({obj_creation, NewFValue}, TrUserData);
				{obj_creation, MVPrev} ->
				    id({obj_creation,
					'merge_msg_Notify.ObjectCreation'(MVPrev,
									  NewFValue,
									  TrUserData)},
				       TrUserData);
				_ -> id({obj_creation, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Notify_obj_deletion(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_obj_deletion(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_obj_deletion(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.ObjectDeletion'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				undefined ->
				    id({obj_deletion, NewFValue}, TrUserData);
				{obj_deletion, MVPrev} ->
				    id({obj_deletion,
					'merge_msg_Notify.ObjectDeletion'(MVPrev,
									  NewFValue,
									  TrUserData)},
				       TrUserData);
				_ -> id({obj_deletion, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Notify_oper_complete(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_oper_complete(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_oper_complete(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.OperationComplete'(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				undefined ->
				    id({oper_complete, NewFValue}, TrUserData);
				{oper_complete, MVPrev} ->
				    id({oper_complete,
					'merge_msg_Notify.OperationComplete'(MVPrev,
									     NewFValue,
									     TrUserData)},
				       TrUserData);
				_ -> id({oper_complete, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Notify_on_board_req(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Notify_on_board_req(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_Notify_on_board_req(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_Notify.OnBoardRequest'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notify(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				undefined ->
				    id({on_board_req, NewFValue}, TrUserData);
				{on_board_req, MVPrev} ->
				    id({on_board_req,
					'merge_msg_Notify.OnBoardRequest'(MVPrev,
									  NewFValue,
									  TrUserData)},
				       TrUserData);
				_ -> id({on_board_req, NewFValue}, TrUserData)
			      end,
			      TrUserData).

skip_varint_Notify(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Notify(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_Notify(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Notify(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_Notify(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Notify(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Notify(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Notify(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_Notify(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Notify(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_Notify(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Notify(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_Notify(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Notify(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

decode_msg_NotifyResp(Bin, TrUserData) ->
    dfp_read_field_def_NotifyResp(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_NotifyResp(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_NotifyResp_subscription_id(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_NotifyResp(<<>>, 0, 0, F@_1, _) ->
    #'NotifyResp'{subscription_id = F@_1};
dfp_read_field_def_NotifyResp(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_NotifyResp(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_NotifyResp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotifyResp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_NotifyResp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NotifyResp_subscription_id(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotifyResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_NotifyResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_NotifyResp(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_NotifyResp(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_NotifyResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_NotifyResp(<<>>, 0, 0, F@_1, _) ->
    #'NotifyResp'{subscription_id = F@_1}.

d_field_NotifyResp_subscription_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_NotifyResp_subscription_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_NotifyResp_subscription_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NotifyResp(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_NotifyResp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_NotifyResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_NotifyResp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotifyResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_NotifyResp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotifyResp(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_NotifyResp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotifyResp(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_NotifyResp(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotifyResp(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_NotifyResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_NotifyResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_NotifyResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_NotifyResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_DoubleValue(Bin, TrUserData) ->
    dfp_read_field_def_DoubleValue(Bin, 0, 0,
				   id(0.0, TrUserData), TrUserData).

dfp_read_field_def_DoubleValue(<<9, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_DoubleValue_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_DoubleValue(<<>>, 0, 0, F@_1, _) ->
    #'DoubleValue'{value = F@_1};
dfp_read_field_def_DoubleValue(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_DoubleValue(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_DoubleValue(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DoubleValue(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_DoubleValue(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_DoubleValue_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DoubleValue(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_DoubleValue(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_DoubleValue(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_DoubleValue(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_DoubleValue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_DoubleValue(<<>>, 0, 0, F@_1, _) ->
    #'DoubleValue'{value = F@_1}.

d_field_DoubleValue_value(<<0:48, 240, 127,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2,
				   id(infinity, TrUserData), TrUserData);
d_field_DoubleValue_value(<<0:48, 240, 255,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2,
				   id('-infinity', TrUserData), TrUserData);
d_field_DoubleValue_value(<<_:48, 15:4, _:4, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2,
				   id(nan, TrUserData), TrUserData);
d_field_DoubleValue_value(<<Value:64/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2,
				   id(Value, TrUserData), TrUserData).

skip_varint_DoubleValue(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_DoubleValue(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_DoubleValue(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_DoubleValue(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DoubleValue(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_DoubleValue(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DoubleValue(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_DoubleValue(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DoubleValue(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_DoubleValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_DoubleValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_DoubleValue(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_FloatValue(Bin, TrUserData) ->
    dfp_read_field_def_FloatValue(Bin, 0, 0,
				  id(0.0, TrUserData), TrUserData).

dfp_read_field_def_FloatValue(<<13, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_FloatValue_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_FloatValue(<<>>, 0, 0, F@_1, _) ->
    #'FloatValue'{value = F@_1};
dfp_read_field_def_FloatValue(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_FloatValue(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_FloatValue(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FloatValue(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_FloatValue(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_FloatValue_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FloatValue(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_FloatValue(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_FloatValue(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_FloatValue(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_FloatValue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_FloatValue(<<>>, 0, 0, F@_1, _) ->
    #'FloatValue'{value = F@_1}.

d_field_FloatValue_value(<<0:16, 128, 127,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2,
				  id(infinity, TrUserData), TrUserData);
d_field_FloatValue_value(<<0:16, 128, 255,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2,
				  id('-infinity', TrUserData), TrUserData);
d_field_FloatValue_value(<<_:16, 1:1, _:7, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2,
				  id(nan, TrUserData), TrUserData);
d_field_FloatValue_value(<<Value:32/little-float,
			   Rest/binary>>,
			 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2,
				  id(Value, TrUserData), TrUserData).

skip_varint_FloatValue(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_FloatValue(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_FloatValue(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_FloatValue(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_FloatValue(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_FloatValue(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FloatValue(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_FloatValue(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FloatValue(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_FloatValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_FloatValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_FloatValue(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_Int64Value(Bin, TrUserData) ->
    dfp_read_field_def_Int64Value(Bin, 0, 0,
				  id(0, TrUserData), TrUserData).

dfp_read_field_def_Int64Value(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_Int64Value_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_Int64Value(<<>>, 0, 0, F@_1, _) ->
    #'Int64Value'{value = F@_1};
dfp_read_field_def_Int64Value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_Int64Value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_Int64Value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Int64Value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_Int64Value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Int64Value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Int64Value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Int64Value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Int64Value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_Int64Value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_Int64Value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Int64Value(<<>>, 0, 0, F@_1, _) ->
    #'Int64Value'{value = F@_1}.

d_field_Int64Value_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Int64Value_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_Int64Value_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Int64Value(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_Int64Value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_Int64Value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Int64Value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_Int64Value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_Int64Value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Int64Value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Int64Value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Int64Value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_Int64Value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Int64Value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_Int64Value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Int64Value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_Int64Value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Int64Value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_UInt64Value(Bin, TrUserData) ->
    dfp_read_field_def_UInt64Value(Bin, 0, 0,
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_UInt64Value(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_UInt64Value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_UInt64Value(<<>>, 0, 0, F@_1, _) ->
    #'UInt64Value'{value = F@_1};
dfp_read_field_def_UInt64Value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_UInt64Value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_UInt64Value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UInt64Value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_UInt64Value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UInt64Value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UInt64Value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_UInt64Value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_UInt64Value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_UInt64Value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_UInt64Value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_UInt64Value(<<>>, 0, 0, F@_1, _) ->
    #'UInt64Value'{value = F@_1}.

d_field_UInt64Value_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_UInt64Value_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_UInt64Value_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_UInt64Value(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_UInt64Value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_UInt64Value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_UInt64Value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_UInt64Value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_UInt64Value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_UInt64Value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_UInt64Value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UInt64Value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_UInt64Value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UInt64Value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_UInt64Value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_UInt64Value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_UInt64Value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_UInt64Value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_Int32Value(Bin, TrUserData) ->
    dfp_read_field_def_Int32Value(Bin, 0, 0,
				  id(0, TrUserData), TrUserData).

dfp_read_field_def_Int32Value(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_Int32Value_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_Int32Value(<<>>, 0, 0, F@_1, _) ->
    #'Int32Value'{value = F@_1};
dfp_read_field_def_Int32Value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_Int32Value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_Int32Value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Int32Value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_Int32Value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Int32Value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Int32Value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Int32Value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Int32Value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_Int32Value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_Int32Value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Int32Value(<<>>, 0, 0, F@_1, _) ->
    #'Int32Value'{value = F@_1}.

d_field_Int32Value_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Int32Value_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_Int32Value_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Int32Value(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_Int32Value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_Int32Value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Int32Value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_Int32Value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_Int32Value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Int32Value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Int32Value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Int32Value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_Int32Value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Int32Value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_Int32Value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Int32Value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_Int32Value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Int32Value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_UInt32Value(Bin, TrUserData) ->
    dfp_read_field_def_UInt32Value(Bin, 0, 0,
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_UInt32Value(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_UInt32Value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_UInt32Value(<<>>, 0, 0, F@_1, _) ->
    #'UInt32Value'{value = F@_1};
dfp_read_field_def_UInt32Value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_UInt32Value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_UInt32Value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UInt32Value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_UInt32Value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UInt32Value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UInt32Value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_UInt32Value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_UInt32Value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_UInt32Value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_UInt32Value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_UInt32Value(<<>>, 0, 0, F@_1, _) ->
    #'UInt32Value'{value = F@_1}.

d_field_UInt32Value_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_UInt32Value_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_UInt32Value_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_UInt32Value(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_UInt32Value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_UInt32Value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_UInt32Value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_UInt32Value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_UInt32Value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_UInt32Value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_UInt32Value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UInt32Value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_UInt32Value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UInt32Value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_UInt32Value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_UInt32Value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_UInt32Value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_UInt32Value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_BoolValue(Bin, TrUserData) ->
    dfp_read_field_def_BoolValue(Bin, 0, 0,
				 id(false, TrUserData), TrUserData).

dfp_read_field_def_BoolValue(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, TrUserData) ->
    d_field_BoolValue_value(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_BoolValue(<<>>, 0, 0, F@_1, _) ->
    #'BoolValue'{value = F@_1};
dfp_read_field_def_BoolValue(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_BoolValue(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_BoolValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BoolValue(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_BoolValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BoolValue_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BoolValue(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_BoolValue(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_BoolValue(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_BoolValue(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_BoolValue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_BoolValue(<<>>, 0, 0, F@_1, _) ->
    #'BoolValue'{value = F@_1}.

d_field_BoolValue_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_BoolValue_value(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_BoolValue_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_BoolValue(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_BoolValue(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_BoolValue(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_BoolValue(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_BoolValue(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_BoolValue(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BoolValue(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BoolValue(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BoolValue(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_BoolValue(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BoolValue(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_BoolValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_BoolValue(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_BoolValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_BoolValue(Rest, Z1, Z2, F@_1,
				 TrUserData).

decode_msg_StringValue(Bin, TrUserData) ->
    dfp_read_field_def_StringValue(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_StringValue(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_StringValue_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_StringValue(<<>>, 0, 0, F@_1, _) ->
    #'StringValue'{value = F@_1};
dfp_read_field_def_StringValue(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_StringValue(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_StringValue(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StringValue(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_StringValue(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_StringValue_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StringValue(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_StringValue(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_StringValue(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_StringValue(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_StringValue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_StringValue(<<>>, 0, 0, F@_1, _) ->
    #'StringValue'{value = F@_1}.

d_field_StringValue_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_StringValue_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_StringValue_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StringValue(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_StringValue(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_StringValue(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_StringValue(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_StringValue(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_StringValue(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_StringValue(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_StringValue(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StringValue(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_StringValue(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StringValue(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_StringValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_StringValue(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_StringValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_StringValue(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_BytesValue(Bin, TrUserData) ->
    dfp_read_field_def_BytesValue(Bin, 0, 0,
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_BytesValue(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_BytesValue_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_BytesValue(<<>>, 0, 0, F@_1, _) ->
    #'BytesValue'{value = F@_1};
dfp_read_field_def_BytesValue(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_BytesValue(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_BytesValue(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BytesValue(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_BytesValue(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BytesValue_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BytesValue(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_BytesValue(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_BytesValue(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_BytesValue(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_BytesValue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_BytesValue(<<>>, 0, 0, F@_1, _) ->
    #'BytesValue'{value = F@_1}.

d_field_BytesValue_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_BytesValue_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_BytesValue_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_BytesValue(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_BytesValue(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_BytesValue(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_BytesValue(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_BytesValue(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_BytesValue(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BytesValue(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BytesValue(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BytesValue(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_BytesValue(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BytesValue(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_BytesValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_BytesValue(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_BytesValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_BytesValue(Rest, Z1, Z2, F@_1,
				  TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id([], TrUserData),
					    id([], TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,string>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'd_enum_Record.PayloadSecurity'(0) -> 'PLAINTEXT';
'd_enum_Record.PayloadSecurity'(1) -> 'TLS12';
'd_enum_Record.PayloadSecurity'(V) -> V.

'd_enum_SessionContextRecord.PayloadSARState'(0) ->
    'NONE';
'd_enum_SessionContextRecord.PayloadSARState'(1) ->
    'BEGIN';
'd_enum_SessionContextRecord.PayloadSARState'(2) ->
    'INPROCESS';
'd_enum_SessionContextRecord.PayloadSARState'(3) ->
    'COMPLETE';
'd_enum_SessionContextRecord.PayloadSARState'(V) -> V.

'd_enum_Header.MsgType'(0) -> 'ERROR';
'd_enum_Header.MsgType'(1) -> 'GET';
'd_enum_Header.MsgType'(2) -> 'GET_RESP';
'd_enum_Header.MsgType'(3) -> 'NOTIFY';
'd_enum_Header.MsgType'(4) -> 'SET';
'd_enum_Header.MsgType'(5) -> 'SET_RESP';
'd_enum_Header.MsgType'(6) -> 'OPERATE';
'd_enum_Header.MsgType'(7) -> 'OPERATE_RESP';
'd_enum_Header.MsgType'(8) -> 'ADD';
'd_enum_Header.MsgType'(9) -> 'ADD_RESP';
'd_enum_Header.MsgType'(10) -> 'DELETE';
'd_enum_Header.MsgType'(11) -> 'DELETE_RESP';
'd_enum_Header.MsgType'(12) -> 'GET_SUPPORTED_DM';
'd_enum_Header.MsgType'(13) -> 'GET_SUPPORTED_DM_RESP';
'd_enum_Header.MsgType'(14) -> 'GET_INSTANCES';
'd_enum_Header.MsgType'(15) -> 'GET_INSTANCES_RESP';
'd_enum_Header.MsgType'(16) -> 'NOTIFY_RESP';
'd_enum_Header.MsgType'(17) -> 'GET_SUPPORTED_PROTO';
'd_enum_Header.MsgType'(18) ->
    'GET_SUPPORTED_PROTO_RESP';
'd_enum_Header.MsgType'(V) -> V.

'd_enum_GetSupportedDMResp.ParamAccessType'(0) ->
    'PARAM_READ_ONLY';
'd_enum_GetSupportedDMResp.ParamAccessType'(1) ->
    'PARAM_READ_WRITE';
'd_enum_GetSupportedDMResp.ParamAccessType'(2) ->
    'PARAM_WRITE_ONLY';
'd_enum_GetSupportedDMResp.ParamAccessType'(V) -> V.

'd_enum_GetSupportedDMResp.ObjAccessType'(0) ->
    'OBJ_READ_ONLY';
'd_enum_GetSupportedDMResp.ObjAccessType'(1) ->
    'OBJ_ADD_DELETE';
'd_enum_GetSupportedDMResp.ObjAccessType'(2) ->
    'OBJ_ADD_ONLY';
'd_enum_GetSupportedDMResp.ObjAccessType'(3) ->
    'OBJ_DELETE_ONLY';
'd_enum_GetSupportedDMResp.ObjAccessType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Record' -> merge_msg_Record(Prev, New, TrUserData);
      'NoSessionContextRecord' ->
	  merge_msg_NoSessionContextRecord(Prev, New, TrUserData);
      'SessionContextRecord' ->
	  merge_msg_SessionContextRecord(Prev, New, TrUserData);
      'Msg' -> merge_msg_Msg(Prev, New, TrUserData);
      'Header' -> merge_msg_Header(Prev, New, TrUserData);
      'Body' -> merge_msg_Body(Prev, New, TrUserData);
      'Request' -> merge_msg_Request(Prev, New, TrUserData);
      'Response' -> merge_msg_Response(Prev, New, TrUserData);
      'Error.ParamError' ->
	  'merge_msg_Error.ParamError'(Prev, New, TrUserData);
      'Error' -> merge_msg_Error(Prev, New, TrUserData);
      'Get' -> merge_msg_Get(Prev, New, TrUserData);
      'GetResp.RequestedPathResult' ->
	  'merge_msg_GetResp.RequestedPathResult'(Prev, New,
						  TrUserData);
      'GetResp.ResolvedPathResult' ->
	  'merge_msg_GetResp.ResolvedPathResult'(Prev, New,
						 TrUserData);
      'GetResp' -> merge_msg_GetResp(Prev, New, TrUserData);
      'GetSupportedDM' ->
	  merge_msg_GetSupportedDM(Prev, New, TrUserData);
      'GetSupportedDMResp.RequestedObjectResult' ->
	  'merge_msg_GetSupportedDMResp.RequestedObjectResult'(Prev,
							       New, TrUserData);
      'GetSupportedDMResp.SupportedObjectResult' ->
	  'merge_msg_GetSupportedDMResp.SupportedObjectResult'(Prev,
							       New, TrUserData);
      'GetSupportedDMResp.SupportedParamResult' ->
	  'merge_msg_GetSupportedDMResp.SupportedParamResult'(Prev,
							      New, TrUserData);
      'GetSupportedDMResp.SupportedCommandResult' ->
	  'merge_msg_GetSupportedDMResp.SupportedCommandResult'(Prev,
								New,
								TrUserData);
      'GetSupportedDMResp.SupportedEventResult' ->
	  'merge_msg_GetSupportedDMResp.SupportedEventResult'(Prev,
							      New, TrUserData);
      'GetSupportedDMResp' ->
	  merge_msg_GetSupportedDMResp(Prev, New, TrUserData);
      'GetInstances' ->
	  merge_msg_GetInstances(Prev, New, TrUserData);
      'GetInstancesResp.RequestedPathResult' ->
	  'merge_msg_GetInstancesResp.RequestedPathResult'(Prev,
							   New, TrUserData);
      'GetInstancesResp.CurrInstance' ->
	  'merge_msg_GetInstancesResp.CurrInstance'(Prev, New,
						    TrUserData);
      'GetInstancesResp' ->
	  merge_msg_GetInstancesResp(Prev, New, TrUserData);
      'GetSupportedProtocol' ->
	  merge_msg_GetSupportedProtocol(Prev, New, TrUserData);
      'GetSupportedProtocolResp' ->
	  merge_msg_GetSupportedProtocolResp(Prev, New,
					     TrUserData);
      'Add.CreateObject' ->
	  'merge_msg_Add.CreateObject'(Prev, New, TrUserData);
      'Add.CreateParamSetting' ->
	  'merge_msg_Add.CreateParamSetting'(Prev, New,
					     TrUserData);
      'Add' -> merge_msg_Add(Prev, New, TrUserData);
      'AddResp.CreatedObjectResult' ->
	  'merge_msg_AddResp.CreatedObjectResult'(Prev, New,
						  TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus.OperationFailure' ->
	  'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Prev,
										   New,
										   TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess' ->
	  'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Prev,
										   New,
										   TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus' ->
	  'merge_msg_AddResp.CreatedObjectResult.OperationStatus'(Prev,
								  New,
								  TrUserData);
      'AddResp.ParameterError' ->
	  'merge_msg_AddResp.ParameterError'(Prev, New,
					     TrUserData);
      'AddResp' -> merge_msg_AddResp(Prev, New, TrUserData);
      'Delete' -> merge_msg_Delete(Prev, New, TrUserData);
      'DeleteResp.DeletedObjectResult' ->
	  'merge_msg_DeleteResp.DeletedObjectResult'(Prev, New,
						     TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure' ->
	  'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Prev,
										      New,
										      TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess' ->
	  'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Prev,
										      New,
										      TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus' ->
	  'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Prev,
								     New,
								     TrUserData);
      'DeleteResp.UnaffectedPathError' ->
	  'merge_msg_DeleteResp.UnaffectedPathError'(Prev, New,
						     TrUserData);
      'DeleteResp' ->
	  merge_msg_DeleteResp(Prev, New, TrUserData);
      'Set.UpdateObject' ->
	  'merge_msg_Set.UpdateObject'(Prev, New, TrUserData);
      'Set.UpdateParamSetting' ->
	  'merge_msg_Set.UpdateParamSetting'(Prev, New,
					     TrUserData);
      'Set' -> merge_msg_Set(Prev, New, TrUserData);
      'SetResp.UpdatedObjectResult' ->
	  'merge_msg_SetResp.UpdatedObjectResult'(Prev, New,
						  TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure' ->
	  'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Prev,
										   New,
										   TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess' ->
	  'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Prev,
										   New,
										   TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus' ->
	  'merge_msg_SetResp.UpdatedObjectResult.OperationStatus'(Prev,
								  New,
								  TrUserData);
      'SetResp.UpdatedInstanceFailure' ->
	  'merge_msg_SetResp.UpdatedInstanceFailure'(Prev, New,
						     TrUserData);
      'SetResp.UpdatedInstanceResult' ->
	  'merge_msg_SetResp.UpdatedInstanceResult'(Prev, New,
						    TrUserData);
      'SetResp.ParameterError' ->
	  'merge_msg_SetResp.ParameterError'(Prev, New,
					     TrUserData);
      'SetResp' -> merge_msg_SetResp(Prev, New, TrUserData);
      'Operate' -> merge_msg_Operate(Prev, New, TrUserData);
      'OperateResp.OperationResult' ->
	  'merge_msg_OperateResp.OperationResult'(Prev, New,
						  TrUserData);
      'OperateResp.OperationResult.CommandFailure' ->
	  'merge_msg_OperateResp.OperationResult.CommandFailure'(Prev,
								 New,
								 TrUserData);
      'OperateResp.OperationResult.OutputArgs' ->
	  'merge_msg_OperateResp.OperationResult.OutputArgs'(Prev,
							     New, TrUserData);
      'OperateResp' ->
	  merge_msg_OperateResp(Prev, New, TrUserData);
      'Notify.Event' ->
	  'merge_msg_Notify.Event'(Prev, New, TrUserData);
      'Notify.ValueChange' ->
	  'merge_msg_Notify.ValueChange'(Prev, New, TrUserData);
      'Notify.ObjectCreation' ->
	  'merge_msg_Notify.ObjectCreation'(Prev, New,
					    TrUserData);
      'Notify.ObjectDeletion' ->
	  'merge_msg_Notify.ObjectDeletion'(Prev, New,
					    TrUserData);
      'Notify.OperationComplete' ->
	  'merge_msg_Notify.OperationComplete'(Prev, New,
					       TrUserData);
      'Notify.OperationComplete.CommandFailure' ->
	  'merge_msg_Notify.OperationComplete.CommandFailure'(Prev,
							      New, TrUserData);
      'Notify.OperationComplete.OutputArgs' ->
	  'merge_msg_Notify.OperationComplete.OutputArgs'(Prev,
							  New, TrUserData);
      'Notify.OnBoardRequest' ->
	  'merge_msg_Notify.OnBoardRequest'(Prev, New,
					    TrUserData);
      'Notify' -> merge_msg_Notify(Prev, New, TrUserData);
      'NotifyResp' ->
	  merge_msg_NotifyResp(Prev, New, TrUserData);
      'DoubleValue' ->
	  merge_msg_DoubleValue(Prev, New, TrUserData);
      'FloatValue' ->
	  merge_msg_FloatValue(Prev, New, TrUserData);
      'Int64Value' ->
	  merge_msg_Int64Value(Prev, New, TrUserData);
      'UInt64Value' ->
	  merge_msg_UInt64Value(Prev, New, TrUserData);
      'Int32Value' ->
	  merge_msg_Int32Value(Prev, New, TrUserData);
      'UInt32Value' ->
	  merge_msg_UInt32Value(Prev, New, TrUserData);
      'BoolValue' ->
	  merge_msg_BoolValue(Prev, New, TrUserData);
      'StringValue' ->
	  merge_msg_StringValue(Prev, New, TrUserData);
      'BytesValue' ->
	  merge_msg_BytesValue(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Record/3}).
merge_msg_Record(#'Record'{version = PFversion,
			   to_id = PFto_id, from_id = PFfrom_id,
			   payload_security = PFpayload_security,
			   mac_signature = PFmac_signature,
			   sender_cert = PFsender_cert,
			   record_type = PFrecord_type},
		 #'Record'{version = NFversion, to_id = NFto_id,
			   from_id = NFfrom_id,
			   payload_security = NFpayload_security,
			   mac_signature = NFmac_signature,
			   sender_cert = NFsender_cert,
			   record_type = NFrecord_type},
		 TrUserData) ->
    #'Record'{version =
		  if NFversion =:= undefined -> PFversion;
		     true -> NFversion
		  end,
	      to_id =
		  if NFto_id =:= undefined -> PFto_id;
		     true -> NFto_id
		  end,
	      from_id =
		  if NFfrom_id =:= undefined -> PFfrom_id;
		     true -> NFfrom_id
		  end,
	      payload_security =
		  if NFpayload_security =:= undefined ->
			 PFpayload_security;
		     true -> NFpayload_security
		  end,
	      mac_signature =
		  if NFmac_signature =:= undefined -> PFmac_signature;
		     true -> NFmac_signature
		  end,
	      sender_cert =
		  if NFsender_cert =:= undefined -> PFsender_cert;
		     true -> NFsender_cert
		  end,
	      record_type =
		  case {PFrecord_type, NFrecord_type} of
		    {{no_session_context, OPFrecord_type},
		     {no_session_context, ONFrecord_type}} ->
			{no_session_context,
			 merge_msg_NoSessionContextRecord(OPFrecord_type,
							  ONFrecord_type,
							  TrUserData)};
		    {{session_context, OPFrecord_type},
		     {session_context, ONFrecord_type}} ->
			{session_context,
			 merge_msg_SessionContextRecord(OPFrecord_type,
							ONFrecord_type,
							TrUserData)};
		    {_, undefined} -> PFrecord_type;
		    _ -> NFrecord_type
		  end}.

-compile({nowarn_unused_function,merge_msg_NoSessionContextRecord/3}).
merge_msg_NoSessionContextRecord(#'NoSessionContextRecord'{payload
							       = PFpayload},
				 #'NoSessionContextRecord'{payload = NFpayload},
				 _) ->
    #'NoSessionContextRecord'{payload =
				  if NFpayload =:= undefined -> PFpayload;
				     true -> NFpayload
				  end}.

-compile({nowarn_unused_function,merge_msg_SessionContextRecord/3}).
merge_msg_SessionContextRecord(#'SessionContextRecord'{session_id
							   = PFsession_id,
						       sequence_id =
							   PFsequence_id,
						       expected_id =
							   PFexpected_id,
						       retransmit_id =
							   PFretransmit_id,
						       payload_sar_state =
							   PFpayload_sar_state,
						       payloadrec_sar_state =
							   PFpayloadrec_sar_state,
						       payload = PFpayload},
			       #'SessionContextRecord'{session_id =
							   NFsession_id,
						       sequence_id =
							   NFsequence_id,
						       expected_id =
							   NFexpected_id,
						       retransmit_id =
							   NFretransmit_id,
						       payload_sar_state =
							   NFpayload_sar_state,
						       payloadrec_sar_state =
							   NFpayloadrec_sar_state,
						       payload = NFpayload},
			       TrUserData) ->
    #'SessionContextRecord'{session_id =
				if NFsession_id =:= undefined -> PFsession_id;
				   true -> NFsession_id
				end,
			    sequence_id =
				if NFsequence_id =:= undefined -> PFsequence_id;
				   true -> NFsequence_id
				end,
			    expected_id =
				if NFexpected_id =:= undefined -> PFexpected_id;
				   true -> NFexpected_id
				end,
			    retransmit_id =
				if NFretransmit_id =:= undefined ->
				       PFretransmit_id;
				   true -> NFretransmit_id
				end,
			    payload_sar_state =
				if NFpayload_sar_state =:= undefined ->
				       PFpayload_sar_state;
				   true -> NFpayload_sar_state
				end,
			    payloadrec_sar_state =
				if NFpayloadrec_sar_state =:= undefined ->
				       PFpayloadrec_sar_state;
				   true -> NFpayloadrec_sar_state
				end,
			    payload =
				if PFpayload /= undefined,
				   NFpayload /= undefined ->
				       'erlang_++'(PFpayload, NFpayload,
						   TrUserData);
				   PFpayload == undefined -> NFpayload;
				   NFpayload == undefined -> PFpayload
				end}.

-compile({nowarn_unused_function,merge_msg_Msg/3}).
merge_msg_Msg(#'Msg'{header = PFheader, body = PFbody},
	      #'Msg'{header = NFheader, body = NFbody}, TrUserData) ->
    #'Msg'{header =
	       if PFheader /= undefined, NFheader /= undefined ->
		      merge_msg_Header(PFheader, NFheader, TrUserData);
		  PFheader == undefined -> NFheader;
		  NFheader == undefined -> PFheader
	       end,
	   body =
	       if PFbody /= undefined, NFbody /= undefined ->
		      merge_msg_Body(PFbody, NFbody, TrUserData);
		  PFbody == undefined -> NFbody;
		  NFbody == undefined -> PFbody
	       end}.

-compile({nowarn_unused_function,merge_msg_Header/3}).
merge_msg_Header(#'Header'{msg_id = PFmsg_id,
			   msg_type = PFmsg_type},
		 #'Header'{msg_id = NFmsg_id, msg_type = NFmsg_type},
		 _) ->
    #'Header'{msg_id =
		  if NFmsg_id =:= undefined -> PFmsg_id;
		     true -> NFmsg_id
		  end,
	      msg_type =
		  if NFmsg_type =:= undefined -> PFmsg_type;
		     true -> NFmsg_type
		  end}.

-compile({nowarn_unused_function,merge_msg_Body/3}).
merge_msg_Body(#'Body'{msg_body = PFmsg_body},
	       #'Body'{msg_body = NFmsg_body}, TrUserData) ->
    #'Body'{msg_body =
		case {PFmsg_body, NFmsg_body} of
		  {{request, OPFmsg_body}, {request, ONFmsg_body}} ->
		      {request,
		       merge_msg_Request(OPFmsg_body, ONFmsg_body,
					 TrUserData)};
		  {{response, OPFmsg_body}, {response, ONFmsg_body}} ->
		      {response,
		       merge_msg_Response(OPFmsg_body, ONFmsg_body,
					  TrUserData)};
		  {{error, OPFmsg_body}, {error, ONFmsg_body}} ->
		      {error,
		       merge_msg_Error(OPFmsg_body, ONFmsg_body, TrUserData)};
		  {_, undefined} -> PFmsg_body;
		  _ -> NFmsg_body
		end}.

-compile({nowarn_unused_function,merge_msg_Request/3}).
merge_msg_Request(#'Request'{req_type = PFreq_type},
		  #'Request'{req_type = NFreq_type}, TrUserData) ->
    #'Request'{req_type =
		   case {PFreq_type, NFreq_type} of
		     {{get, OPFreq_type}, {get, ONFreq_type}} ->
			 {get,
			  merge_msg_Get(OPFreq_type, ONFreq_type, TrUserData)};
		     {{get_supported_dm, OPFreq_type},
		      {get_supported_dm, ONFreq_type}} ->
			 {get_supported_dm,
			  merge_msg_GetSupportedDM(OPFreq_type, ONFreq_type,
						   TrUserData)};
		     {{get_instances, OPFreq_type},
		      {get_instances, ONFreq_type}} ->
			 {get_instances,
			  merge_msg_GetInstances(OPFreq_type, ONFreq_type,
						 TrUserData)};
		     {{set, OPFreq_type}, {set, ONFreq_type}} ->
			 {set,
			  merge_msg_Set(OPFreq_type, ONFreq_type, TrUserData)};
		     {{add, OPFreq_type}, {add, ONFreq_type}} ->
			 {add,
			  merge_msg_Add(OPFreq_type, ONFreq_type, TrUserData)};
		     {{delete, OPFreq_type}, {delete, ONFreq_type}} ->
			 {delete,
			  merge_msg_Delete(OPFreq_type, ONFreq_type,
					   TrUserData)};
		     {{operate, OPFreq_type}, {operate, ONFreq_type}} ->
			 {operate,
			  merge_msg_Operate(OPFreq_type, ONFreq_type,
					    TrUserData)};
		     {{notify, OPFreq_type}, {notify, ONFreq_type}} ->
			 {notify,
			  merge_msg_Notify(OPFreq_type, ONFreq_type,
					   TrUserData)};
		     {{get_supported_protocol, OPFreq_type},
		      {get_supported_protocol, ONFreq_type}} ->
			 {get_supported_protocol,
			  merge_msg_GetSupportedProtocol(OPFreq_type,
							 ONFreq_type,
							 TrUserData)};
		     {_, undefined} -> PFreq_type;
		     _ -> NFreq_type
		   end}.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(#'Response'{resp_type = PFresp_type},
		   #'Response'{resp_type = NFresp_type}, TrUserData) ->
    #'Response'{resp_type =
		    case {PFresp_type, NFresp_type} of
		      {{get_resp, OPFresp_type}, {get_resp, ONFresp_type}} ->
			  {get_resp,
			   merge_msg_GetResp(OPFresp_type, ONFresp_type,
					     TrUserData)};
		      {{get_supported_dm_resp, OPFresp_type},
		       {get_supported_dm_resp, ONFresp_type}} ->
			  {get_supported_dm_resp,
			   merge_msg_GetSupportedDMResp(OPFresp_type,
							ONFresp_type,
							TrUserData)};
		      {{get_instances_resp, OPFresp_type},
		       {get_instances_resp, ONFresp_type}} ->
			  {get_instances_resp,
			   merge_msg_GetInstancesResp(OPFresp_type,
						      ONFresp_type,
						      TrUserData)};
		      {{set_resp, OPFresp_type}, {set_resp, ONFresp_type}} ->
			  {set_resp,
			   merge_msg_SetResp(OPFresp_type, ONFresp_type,
					     TrUserData)};
		      {{add_resp, OPFresp_type}, {add_resp, ONFresp_type}} ->
			  {add_resp,
			   merge_msg_AddResp(OPFresp_type, ONFresp_type,
					     TrUserData)};
		      {{delete_resp, OPFresp_type},
		       {delete_resp, ONFresp_type}} ->
			  {delete_resp,
			   merge_msg_DeleteResp(OPFresp_type, ONFresp_type,
						TrUserData)};
		      {{operate_resp, OPFresp_type},
		       {operate_resp, ONFresp_type}} ->
			  {operate_resp,
			   merge_msg_OperateResp(OPFresp_type, ONFresp_type,
						 TrUserData)};
		      {{notify_resp, OPFresp_type},
		       {notify_resp, ONFresp_type}} ->
			  {notify_resp,
			   merge_msg_NotifyResp(OPFresp_type, ONFresp_type,
						TrUserData)};
		      {{get_supported_protocol_resp, OPFresp_type},
		       {get_supported_protocol_resp, ONFresp_type}} ->
			  {get_supported_protocol_resp,
			   merge_msg_GetSupportedProtocolResp(OPFresp_type,
							      ONFresp_type,
							      TrUserData)};
		      {_, undefined} -> PFresp_type;
		      _ -> NFresp_type
		    end}.

-compile({nowarn_unused_function,'merge_msg_Error.ParamError'/3}).
'merge_msg_Error.ParamError'(#'Error.ParamError'{param_path
						     = PFparam_path,
						 err_code = PFerr_code,
						 err_msg = PFerr_msg},
			     #'Error.ParamError'{param_path = NFparam_path,
						 err_code = NFerr_code,
						 err_msg = NFerr_msg},
			     _) ->
    #'Error.ParamError'{param_path =
			    if NFparam_path =:= undefined -> PFparam_path;
			       true -> NFparam_path
			    end,
			err_code =
			    if NFerr_code =:= undefined -> PFerr_code;
			       true -> NFerr_code
			    end,
			err_msg =
			    if NFerr_msg =:= undefined -> PFerr_msg;
			       true -> NFerr_msg
			    end}.

-compile({nowarn_unused_function,merge_msg_Error/3}).
merge_msg_Error(#'Error'{err_code = PFerr_code,
			 err_msg = PFerr_msg, param_errs = PFparam_errs},
		#'Error'{err_code = NFerr_code, err_msg = NFerr_msg,
			 param_errs = NFparam_errs},
		TrUserData) ->
    #'Error'{err_code =
		 if NFerr_code =:= undefined -> PFerr_code;
		    true -> NFerr_code
		 end,
	     err_msg =
		 if NFerr_msg =:= undefined -> PFerr_msg;
		    true -> NFerr_msg
		 end,
	     param_errs =
		 if PFparam_errs /= undefined,
		    NFparam_errs /= undefined ->
			'erlang_++'(PFparam_errs, NFparam_errs, TrUserData);
		    PFparam_errs == undefined -> NFparam_errs;
		    NFparam_errs == undefined -> PFparam_errs
		 end}.

-compile({nowarn_unused_function,merge_msg_Get/3}).
merge_msg_Get(#'Get'{param_paths = PFparam_paths},
	      #'Get'{param_paths = NFparam_paths}, TrUserData) ->
    #'Get'{param_paths =
	       if PFparam_paths /= undefined,
		  NFparam_paths /= undefined ->
		      'erlang_++'(PFparam_paths, NFparam_paths, TrUserData);
		  PFparam_paths == undefined -> NFparam_paths;
		  NFparam_paths == undefined -> PFparam_paths
	       end}.

-compile({nowarn_unused_function,'merge_msg_GetResp.RequestedPathResult'/3}).
'merge_msg_GetResp.RequestedPathResult'(#'GetResp.RequestedPathResult'{requested_path
									   =
									   PFrequested_path,
								       err_code
									   =
									   PFerr_code,
								       err_msg =
									   PFerr_msg,
								       resolved_path_results
									   =
									   PFresolved_path_results},
					#'GetResp.RequestedPathResult'{requested_path
									   =
									   NFrequested_path,
								       err_code
									   =
									   NFerr_code,
								       err_msg =
									   NFerr_msg,
								       resolved_path_results
									   =
									   NFresolved_path_results},
					TrUserData) ->
    #'GetResp.RequestedPathResult'{requested_path =
				       if NFrequested_path =:= undefined ->
					      PFrequested_path;
					  true -> NFrequested_path
				       end,
				   err_code =
				       if NFerr_code =:= undefined ->
					      PFerr_code;
					  true -> NFerr_code
				       end,
				   err_msg =
				       if NFerr_msg =:= undefined -> PFerr_msg;
					  true -> NFerr_msg
				       end,
				   resolved_path_results =
				       if PFresolved_path_results /= undefined,
					  NFresolved_path_results /=
					    undefined ->
					      'erlang_++'(PFresolved_path_results,
							  NFresolved_path_results,
							  TrUserData);
					  PFresolved_path_results ==
					    undefined ->
					      NFresolved_path_results;
					  NFresolved_path_results ==
					    undefined ->
					      PFresolved_path_results
				       end}.

-compile({nowarn_unused_function,'merge_msg_GetResp.ResolvedPathResult'/3}).
'merge_msg_GetResp.ResolvedPathResult'(#'GetResp.ResolvedPathResult'{resolved_path
									 =
									 PFresolved_path,
								     result_params
									 =
									 PFresult_params},
				       #'GetResp.ResolvedPathResult'{resolved_path
									 =
									 NFresolved_path,
								     result_params
									 =
									 NFresult_params},
				       TrUserData) ->
    #'GetResp.ResolvedPathResult'{resolved_path =
				      if NFresolved_path =:= undefined ->
					     PFresolved_path;
					 true -> NFresolved_path
				      end,
				  result_params =
				      if PFresult_params /= undefined,
					 NFresult_params /= undefined ->
					     'tr_merge_GetResp.ResolvedPathResult.result_params'(PFresult_params,
												 NFresult_params,
												 TrUserData);
					 PFresult_params == undefined ->
					     NFresult_params;
					 NFresult_params == undefined ->
					     PFresult_params
				      end}.

-compile({nowarn_unused_function,merge_msg_GetResp/3}).
merge_msg_GetResp(#'GetResp'{req_path_results =
				 PFreq_path_results},
		  #'GetResp'{req_path_results = NFreq_path_results},
		  TrUserData) ->
    #'GetResp'{req_path_results =
		   if PFreq_path_results /= undefined,
		      NFreq_path_results /= undefined ->
			  'erlang_++'(PFreq_path_results, NFreq_path_results,
				      TrUserData);
		      PFreq_path_results == undefined -> NFreq_path_results;
		      NFreq_path_results == undefined -> PFreq_path_results
		   end}.

-compile({nowarn_unused_function,merge_msg_GetSupportedDM/3}).
merge_msg_GetSupportedDM(#'GetSupportedDM'{obj_paths =
					       PFobj_paths,
					   first_level_only =
					       PFfirst_level_only,
					   return_commands = PFreturn_commands,
					   return_events = PFreturn_events,
					   return_params = PFreturn_params},
			 #'GetSupportedDM'{obj_paths = NFobj_paths,
					   first_level_only =
					       NFfirst_level_only,
					   return_commands = NFreturn_commands,
					   return_events = NFreturn_events,
					   return_params = NFreturn_params},
			 TrUserData) ->
    #'GetSupportedDM'{obj_paths =
			  if PFobj_paths /= undefined,
			     NFobj_paths /= undefined ->
				 'erlang_++'(PFobj_paths, NFobj_paths,
					     TrUserData);
			     PFobj_paths == undefined -> NFobj_paths;
			     NFobj_paths == undefined -> PFobj_paths
			  end,
		      first_level_only =
			  if NFfirst_level_only =:= undefined ->
				 PFfirst_level_only;
			     true -> NFfirst_level_only
			  end,
		      return_commands =
			  if NFreturn_commands =:= undefined ->
				 PFreturn_commands;
			     true -> NFreturn_commands
			  end,
		      return_events =
			  if NFreturn_events =:= undefined -> PFreturn_events;
			     true -> NFreturn_events
			  end,
		      return_params =
			  if NFreturn_params =:= undefined -> PFreturn_params;
			     true -> NFreturn_params
			  end}.

-compile({nowarn_unused_function,'merge_msg_GetSupportedDMResp.RequestedObjectResult'/3}).
'merge_msg_GetSupportedDMResp.RequestedObjectResult'(#'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
												     =
												     PFreq_obj_path,
												 err_code
												     =
												     PFerr_code,
												 err_msg
												     =
												     PFerr_msg,
												 data_model_inst_uri
												     =
												     PFdata_model_inst_uri,
												 supported_objs
												     =
												     PFsupported_objs},
						     #'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
												     =
												     NFreq_obj_path,
												 err_code
												     =
												     NFerr_code,
												 err_msg
												     =
												     NFerr_msg,
												 data_model_inst_uri
												     =
												     NFdata_model_inst_uri,
												 supported_objs
												     =
												     NFsupported_objs},
						     TrUserData) ->
    #'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
						    =
						    if NFreq_obj_path =:=
							 undefined ->
							   PFreq_obj_path;
						       true -> NFreq_obj_path
						    end,
						err_code =
						    if NFerr_code =:=
							 undefined ->
							   PFerr_code;
						       true -> NFerr_code
						    end,
						err_msg =
						    if NFerr_msg =:=
							 undefined ->
							   PFerr_msg;
						       true -> NFerr_msg
						    end,
						data_model_inst_uri =
						    if NFdata_model_inst_uri =:=
							 undefined ->
							   PFdata_model_inst_uri;
						       true ->
							   NFdata_model_inst_uri
						    end,
						supported_objs =
						    if PFsupported_objs /=
							 undefined,
						       NFsupported_objs /=
							 undefined ->
							   'erlang_++'(PFsupported_objs,
								       NFsupported_objs,
								       TrUserData);
						       PFsupported_objs ==
							 undefined ->
							   NFsupported_objs;
						       NFsupported_objs ==
							 undefined ->
							   PFsupported_objs
						    end}.

-compile({nowarn_unused_function,'merge_msg_GetSupportedDMResp.SupportedObjectResult'/3}).
'merge_msg_GetSupportedDMResp.SupportedObjectResult'(#'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
												     =
												     PFsupported_obj_path,
												 access
												     =
												     PFaccess,
												 is_multi_instance
												     =
												     PFis_multi_instance,
												 supported_commands
												     =
												     PFsupported_commands,
												 supported_events
												     =
												     PFsupported_events,
												 supported_params
												     =
												     PFsupported_params},
						     #'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
												     =
												     NFsupported_obj_path,
												 access
												     =
												     NFaccess,
												 is_multi_instance
												     =
												     NFis_multi_instance,
												 supported_commands
												     =
												     NFsupported_commands,
												 supported_events
												     =
												     NFsupported_events,
												 supported_params
												     =
												     NFsupported_params},
						     TrUserData) ->
    #'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
						    =
						    if NFsupported_obj_path =:=
							 undefined ->
							   PFsupported_obj_path;
						       true ->
							   NFsupported_obj_path
						    end,
						access =
						    if NFaccess =:= undefined ->
							   PFaccess;
						       true -> NFaccess
						    end,
						is_multi_instance =
						    if NFis_multi_instance =:=
							 undefined ->
							   PFis_multi_instance;
						       true ->
							   NFis_multi_instance
						    end,
						supported_commands =
						    if PFsupported_commands /=
							 undefined,
						       NFsupported_commands /=
							 undefined ->
							   'erlang_++'(PFsupported_commands,
								       NFsupported_commands,
								       TrUserData);
						       PFsupported_commands ==
							 undefined ->
							   NFsupported_commands;
						       NFsupported_commands ==
							 undefined ->
							   PFsupported_commands
						    end,
						supported_events =
						    if PFsupported_events /=
							 undefined,
						       NFsupported_events /=
							 undefined ->
							   'erlang_++'(PFsupported_events,
								       NFsupported_events,
								       TrUserData);
						       PFsupported_events ==
							 undefined ->
							   NFsupported_events;
						       NFsupported_events ==
							 undefined ->
							   PFsupported_events
						    end,
						supported_params =
						    if PFsupported_params /=
							 undefined,
						       NFsupported_params /=
							 undefined ->
							   'erlang_++'(PFsupported_params,
								       NFsupported_params,
								       TrUserData);
						       PFsupported_params ==
							 undefined ->
							   NFsupported_params;
						       NFsupported_params ==
							 undefined ->
							   PFsupported_params
						    end}.

-compile({nowarn_unused_function,'merge_msg_GetSupportedDMResp.SupportedParamResult'/3}).
'merge_msg_GetSupportedDMResp.SupportedParamResult'(#'GetSupportedDMResp.SupportedParamResult'{param_name
												   =
												   PFparam_name,
											       access
												   =
												   PFaccess},
						    #'GetSupportedDMResp.SupportedParamResult'{param_name
												   =
												   NFparam_name,
											       access
												   =
												   NFaccess},
						    _) ->
    #'GetSupportedDMResp.SupportedParamResult'{param_name =
						   if NFparam_name =:=
							undefined ->
							  PFparam_name;
						      true -> NFparam_name
						   end,
					       access =
						   if NFaccess =:= undefined ->
							  PFaccess;
						      true -> NFaccess
						   end}.

-compile({nowarn_unused_function,'merge_msg_GetSupportedDMResp.SupportedCommandResult'/3}).
'merge_msg_GetSupportedDMResp.SupportedCommandResult'(#'GetSupportedDMResp.SupportedCommandResult'{command_name
												       =
												       PFcommand_name,
												   input_arg_names
												       =
												       PFinput_arg_names,
												   output_arg_names
												       =
												       PFoutput_arg_names},
						      #'GetSupportedDMResp.SupportedCommandResult'{command_name
												       =
												       NFcommand_name,
												   input_arg_names
												       =
												       NFinput_arg_names,
												   output_arg_names
												       =
												       NFoutput_arg_names},
						      TrUserData) ->
    #'GetSupportedDMResp.SupportedCommandResult'{command_name
						     =
						     if NFcommand_name =:=
							  undefined ->
							    PFcommand_name;
							true -> NFcommand_name
						     end,
						 input_arg_names =
						     if PFinput_arg_names /=
							  undefined,
							NFinput_arg_names /=
							  undefined ->
							    'erlang_++'(PFinput_arg_names,
									NFinput_arg_names,
									TrUserData);
							PFinput_arg_names ==
							  undefined ->
							    NFinput_arg_names;
							NFinput_arg_names ==
							  undefined ->
							    PFinput_arg_names
						     end,
						 output_arg_names =
						     if PFoutput_arg_names /=
							  undefined,
							NFoutput_arg_names /=
							  undefined ->
							    'erlang_++'(PFoutput_arg_names,
									NFoutput_arg_names,
									TrUserData);
							PFoutput_arg_names ==
							  undefined ->
							    NFoutput_arg_names;
							NFoutput_arg_names ==
							  undefined ->
							    PFoutput_arg_names
						     end}.

-compile({nowarn_unused_function,'merge_msg_GetSupportedDMResp.SupportedEventResult'/3}).
'merge_msg_GetSupportedDMResp.SupportedEventResult'(#'GetSupportedDMResp.SupportedEventResult'{event_name
												   =
												   PFevent_name,
											       arg_names
												   =
												   PFarg_names},
						    #'GetSupportedDMResp.SupportedEventResult'{event_name
												   =
												   NFevent_name,
											       arg_names
												   =
												   NFarg_names},
						    TrUserData) ->
    #'GetSupportedDMResp.SupportedEventResult'{event_name =
						   if NFevent_name =:=
							undefined ->
							  PFevent_name;
						      true -> NFevent_name
						   end,
					       arg_names =
						   if PFarg_names /= undefined,
						      NFarg_names /=
							undefined ->
							  'erlang_++'(PFarg_names,
								      NFarg_names,
								      TrUserData);
						      PFarg_names ==
							undefined ->
							  NFarg_names;
						      NFarg_names ==
							undefined ->
							  PFarg_names
						   end}.

-compile({nowarn_unused_function,merge_msg_GetSupportedDMResp/3}).
merge_msg_GetSupportedDMResp(#'GetSupportedDMResp'{req_obj_results
						       = PFreq_obj_results},
			     #'GetSupportedDMResp'{req_obj_results =
						       NFreq_obj_results},
			     TrUserData) ->
    #'GetSupportedDMResp'{req_obj_results =
			      if PFreq_obj_results /= undefined,
				 NFreq_obj_results /= undefined ->
				     'erlang_++'(PFreq_obj_results,
						 NFreq_obj_results, TrUserData);
				 PFreq_obj_results == undefined ->
				     NFreq_obj_results;
				 NFreq_obj_results == undefined ->
				     PFreq_obj_results
			      end}.

-compile({nowarn_unused_function,merge_msg_GetInstances/3}).
merge_msg_GetInstances(#'GetInstances'{obj_paths =
					   PFobj_paths,
				       first_level_only = PFfirst_level_only},
		       #'GetInstances'{obj_paths = NFobj_paths,
				       first_level_only = NFfirst_level_only},
		       TrUserData) ->
    #'GetInstances'{obj_paths =
			if PFobj_paths /= undefined, NFobj_paths /= undefined ->
			       'erlang_++'(PFobj_paths, NFobj_paths,
					   TrUserData);
			   PFobj_paths == undefined -> NFobj_paths;
			   NFobj_paths == undefined -> PFobj_paths
			end,
		    first_level_only =
			if NFfirst_level_only =:= undefined ->
			       PFfirst_level_only;
			   true -> NFfirst_level_only
			end}.

-compile({nowarn_unused_function,'merge_msg_GetInstancesResp.RequestedPathResult'/3}).
'merge_msg_GetInstancesResp.RequestedPathResult'(#'GetInstancesResp.RequestedPathResult'{requested_path
											     =
											     PFrequested_path,
											 err_code
											     =
											     PFerr_code,
											 err_msg
											     =
											     PFerr_msg,
											 curr_insts
											     =
											     PFcurr_insts},
						 #'GetInstancesResp.RequestedPathResult'{requested_path
											     =
											     NFrequested_path,
											 err_code
											     =
											     NFerr_code,
											 err_msg
											     =
											     NFerr_msg,
											 curr_insts
											     =
											     NFcurr_insts},
						 TrUserData) ->
    #'GetInstancesResp.RequestedPathResult'{requested_path =
						if NFrequested_path =:=
						     undefined ->
						       PFrequested_path;
						   true -> NFrequested_path
						end,
					    err_code =
						if NFerr_code =:= undefined ->
						       PFerr_code;
						   true -> NFerr_code
						end,
					    err_msg =
						if NFerr_msg =:= undefined ->
						       PFerr_msg;
						   true -> NFerr_msg
						end,
					    curr_insts =
						if PFcurr_insts /= undefined,
						   NFcurr_insts /= undefined ->
						       'erlang_++'(PFcurr_insts,
								   NFcurr_insts,
								   TrUserData);
						   PFcurr_insts == undefined ->
						       NFcurr_insts;
						   NFcurr_insts == undefined ->
						       PFcurr_insts
						end}.

-compile({nowarn_unused_function,'merge_msg_GetInstancesResp.CurrInstance'/3}).
'merge_msg_GetInstancesResp.CurrInstance'(#'GetInstancesResp.CurrInstance'{instantiated_obj_path
									       =
									       PFinstantiated_obj_path,
									   unique_keys
									       =
									       PFunique_keys},
					  #'GetInstancesResp.CurrInstance'{instantiated_obj_path
									       =
									       NFinstantiated_obj_path,
									   unique_keys
									       =
									       NFunique_keys},
					  TrUserData) ->
    #'GetInstancesResp.CurrInstance'{instantiated_obj_path =
					 if NFinstantiated_obj_path =:=
					      undefined ->
						PFinstantiated_obj_path;
					    true -> NFinstantiated_obj_path
					 end,
				     unique_keys =
					 if PFunique_keys /= undefined,
					    NFunique_keys /= undefined ->
						'tr_merge_GetInstancesResp.CurrInstance.unique_keys'(PFunique_keys,
												     NFunique_keys,
												     TrUserData);
					    PFunique_keys == undefined ->
						NFunique_keys;
					    NFunique_keys == undefined ->
						PFunique_keys
					 end}.

-compile({nowarn_unused_function,merge_msg_GetInstancesResp/3}).
merge_msg_GetInstancesResp(#'GetInstancesResp'{req_path_results
						   = PFreq_path_results},
			   #'GetInstancesResp'{req_path_results =
						   NFreq_path_results},
			   TrUserData) ->
    #'GetInstancesResp'{req_path_results =
			    if PFreq_path_results /= undefined,
			       NFreq_path_results /= undefined ->
				   'erlang_++'(PFreq_path_results,
					       NFreq_path_results, TrUserData);
			       PFreq_path_results == undefined ->
				   NFreq_path_results;
			       NFreq_path_results == undefined ->
				   PFreq_path_results
			    end}.

-compile({nowarn_unused_function,merge_msg_GetSupportedProtocol/3}).
merge_msg_GetSupportedProtocol(#'GetSupportedProtocol'{controller_supported_protocol_versions
							   =
							   PFcontroller_supported_protocol_versions},
			       #'GetSupportedProtocol'{controller_supported_protocol_versions
							   =
							   NFcontroller_supported_protocol_versions},
			       _) ->
    #'GetSupportedProtocol'{controller_supported_protocol_versions
				=
				if NFcontroller_supported_protocol_versions =:=
				     undefined ->
				       PFcontroller_supported_protocol_versions;
				   true ->
				       NFcontroller_supported_protocol_versions
				end}.

-compile({nowarn_unused_function,merge_msg_GetSupportedProtocolResp/3}).
merge_msg_GetSupportedProtocolResp(#'GetSupportedProtocolResp'{agent_supported_protocol_versions
								   =
								   PFagent_supported_protocol_versions},
				   #'GetSupportedProtocolResp'{agent_supported_protocol_versions
								   =
								   NFagent_supported_protocol_versions},
				   _) ->
    #'GetSupportedProtocolResp'{agent_supported_protocol_versions
				    =
				    if NFagent_supported_protocol_versions =:=
					 undefined ->
					   PFagent_supported_protocol_versions;
				       true ->
					   NFagent_supported_protocol_versions
				    end}.

-compile({nowarn_unused_function,'merge_msg_Add.CreateObject'/3}).
'merge_msg_Add.CreateObject'(#'Add.CreateObject'{obj_path
						     = PFobj_path,
						 param_settings =
						     PFparam_settings},
			     #'Add.CreateObject'{obj_path = NFobj_path,
						 param_settings =
						     NFparam_settings},
			     TrUserData) ->
    #'Add.CreateObject'{obj_path =
			    if NFobj_path =:= undefined -> PFobj_path;
			       true -> NFobj_path
			    end,
			param_settings =
			    if PFparam_settings /= undefined,
			       NFparam_settings /= undefined ->
				   'erlang_++'(PFparam_settings,
					       NFparam_settings, TrUserData);
			       PFparam_settings == undefined ->
				   NFparam_settings;
			       NFparam_settings == undefined -> PFparam_settings
			    end}.

-compile({nowarn_unused_function,'merge_msg_Add.CreateParamSetting'/3}).
'merge_msg_Add.CreateParamSetting'(#'Add.CreateParamSetting'{param
								 = PFparam,
							     value = PFvalue,
							     required =
								 PFrequired},
				   #'Add.CreateParamSetting'{param = NFparam,
							     value = NFvalue,
							     required =
								 NFrequired},
				   _) ->
    #'Add.CreateParamSetting'{param =
				  if NFparam =:= undefined -> PFparam;
				     true -> NFparam
				  end,
			      value =
				  if NFvalue =:= undefined -> PFvalue;
				     true -> NFvalue
				  end,
			      required =
				  if NFrequired =:= undefined -> PFrequired;
				     true -> NFrequired
				  end}.

-compile({nowarn_unused_function,merge_msg_Add/3}).
merge_msg_Add(#'Add'{allow_partial = PFallow_partial,
		     create_objs = PFcreate_objs},
	      #'Add'{allow_partial = NFallow_partial,
		     create_objs = NFcreate_objs},
	      TrUserData) ->
    #'Add'{allow_partial =
	       if NFallow_partial =:= undefined -> PFallow_partial;
		  true -> NFallow_partial
	       end,
	   create_objs =
	       if PFcreate_objs /= undefined,
		  NFcreate_objs /= undefined ->
		      'erlang_++'(PFcreate_objs, NFcreate_objs, TrUserData);
		  PFcreate_objs == undefined -> NFcreate_objs;
		  NFcreate_objs == undefined -> PFcreate_objs
	       end}.

-compile({nowarn_unused_function,'merge_msg_AddResp.CreatedObjectResult'/3}).
'merge_msg_AddResp.CreatedObjectResult'(#'AddResp.CreatedObjectResult'{requested_path
									   =
									   PFrequested_path,
								       oper_status
									   =
									   PFoper_status},
					#'AddResp.CreatedObjectResult'{requested_path
									   =
									   NFrequested_path,
								       oper_status
									   =
									   NFoper_status},
					TrUserData) ->
    #'AddResp.CreatedObjectResult'{requested_path =
				       if NFrequested_path =:= undefined ->
					      PFrequested_path;
					  true -> NFrequested_path
				       end,
				   oper_status =
				       if PFoper_status /= undefined,
					  NFoper_status /= undefined ->
					      'merge_msg_AddResp.CreatedObjectResult.OperationStatus'(PFoper_status,
												      NFoper_status,
												      TrUserData);
					  PFoper_status == undefined ->
					      NFoper_status;
					  NFoper_status == undefined ->
					      PFoper_status
				       end}.

-compile({nowarn_unused_function,'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'/3}).
'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(#'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
																	     =
																	     PFerr_code,
																	 err_msg
																	     =
																	     PFerr_msg},
									 #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
																	     =
																	     NFerr_code,
																	 err_msg
																	     =
																	     NFerr_msg},
									 _) ->
    #'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
									=
									if
									  NFerr_code
									    =:=
									    undefined ->
									      PFerr_code;
									  true ->
									      NFerr_code
									end,
								    err_msg =
									if
									  NFerr_msg
									    =:=
									    undefined ->
									      PFerr_msg;
									  true ->
									      NFerr_msg
									end}.

-compile({nowarn_unused_function,'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'/3}).
'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(#'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
																	     =
																	     PFinstantiated_path,
																	 param_errs
																	     =
																	     PFparam_errs,
																	 unique_keys
																	     =
																	     PFunique_keys},
									 #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
																	     =
																	     NFinstantiated_path,
																	 param_errs
																	     =
																	     NFparam_errs,
																	 unique_keys
																	     =
																	     NFunique_keys},
									 TrUserData) ->
    #'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
									=
									if
									  NFinstantiated_path
									    =:=
									    undefined ->
									      PFinstantiated_path;
									  true ->
									      NFinstantiated_path
									end,
								    param_errs =
									if
									  PFparam_errs
									    /=
									    undefined,
									  NFparam_errs
									    /=
									    undefined ->
									      'erlang_++'(PFparam_errs,
											  NFparam_errs,
											  TrUserData);
									  PFparam_errs
									    ==
									    undefined ->
									      NFparam_errs;
									  NFparam_errs
									    ==
									    undefined ->
									      PFparam_errs
									end,
								    unique_keys
									=
									if
									  PFunique_keys
									    /=
									    undefined,
									  NFunique_keys
									    /=
									    undefined ->
									      'tr_merge_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(PFunique_keys,
																				  NFunique_keys,
																				  TrUserData);
									  PFunique_keys
									    ==
									    undefined ->
									      NFunique_keys;
									  NFunique_keys
									    ==
									    undefined ->
									      PFunique_keys
									end}.

-compile({nowarn_unused_function,'merge_msg_AddResp.CreatedObjectResult.OperationStatus'/3}).
'merge_msg_AddResp.CreatedObjectResult.OperationStatus'(#'AddResp.CreatedObjectResult.OperationStatus'{oper_status
													   =
													   PFoper_status},
							#'AddResp.CreatedObjectResult.OperationStatus'{oper_status
													   =
													   NFoper_status},
							TrUserData) ->
    #'AddResp.CreatedObjectResult.OperationStatus'{oper_status
						       =
						       case {PFoper_status,
							     NFoper_status}
							   of
							 {{oper_failure,
							   OPFoper_status},
							  {oper_failure,
							   ONFoper_status}} ->
							     {oper_failure,
							      'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(OPFoper_status,
																       ONFoper_status,
																       TrUserData)};
							 {{oper_success,
							   OPFoper_status},
							  {oper_success,
							   ONFoper_status}} ->
							     {oper_success,
							      'merge_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(OPFoper_status,
																       ONFoper_status,
																       TrUserData)};
							 {_, undefined} ->
							     PFoper_status;
							 _ -> NFoper_status
						       end}.

-compile({nowarn_unused_function,'merge_msg_AddResp.ParameterError'/3}).
'merge_msg_AddResp.ParameterError'(#'AddResp.ParameterError'{param
								 = PFparam,
							     err_code =
								 PFerr_code,
							     err_msg =
								 PFerr_msg},
				   #'AddResp.ParameterError'{param = NFparam,
							     err_code =
								 NFerr_code,
							     err_msg =
								 NFerr_msg},
				   _) ->
    #'AddResp.ParameterError'{param =
				  if NFparam =:= undefined -> PFparam;
				     true -> NFparam
				  end,
			      err_code =
				  if NFerr_code =:= undefined -> PFerr_code;
				     true -> NFerr_code
				  end,
			      err_msg =
				  if NFerr_msg =:= undefined -> PFerr_msg;
				     true -> NFerr_msg
				  end}.

-compile({nowarn_unused_function,merge_msg_AddResp/3}).
merge_msg_AddResp(#'AddResp'{created_obj_results =
				 PFcreated_obj_results},
		  #'AddResp'{created_obj_results = NFcreated_obj_results},
		  TrUserData) ->
    #'AddResp'{created_obj_results =
		   if PFcreated_obj_results /= undefined,
		      NFcreated_obj_results /= undefined ->
			  'erlang_++'(PFcreated_obj_results,
				      NFcreated_obj_results, TrUserData);
		      PFcreated_obj_results == undefined ->
			  NFcreated_obj_results;
		      NFcreated_obj_results == undefined ->
			  PFcreated_obj_results
		   end}.

-compile({nowarn_unused_function,merge_msg_Delete/3}).
merge_msg_Delete(#'Delete'{allow_partial =
			       PFallow_partial,
			   obj_paths = PFobj_paths},
		 #'Delete'{allow_partial = NFallow_partial,
			   obj_paths = NFobj_paths},
		 TrUserData) ->
    #'Delete'{allow_partial =
		  if NFallow_partial =:= undefined -> PFallow_partial;
		     true -> NFallow_partial
		  end,
	      obj_paths =
		  if PFobj_paths /= undefined, NFobj_paths /= undefined ->
			 'erlang_++'(PFobj_paths, NFobj_paths, TrUserData);
		     PFobj_paths == undefined -> NFobj_paths;
		     NFobj_paths == undefined -> PFobj_paths
		  end}.

-compile({nowarn_unused_function,'merge_msg_DeleteResp.DeletedObjectResult'/3}).
'merge_msg_DeleteResp.DeletedObjectResult'(#'DeleteResp.DeletedObjectResult'{requested_path
										 =
										 PFrequested_path,
									     oper_status
										 =
										 PFoper_status},
					   #'DeleteResp.DeletedObjectResult'{requested_path
										 =
										 NFrequested_path,
									     oper_status
										 =
										 NFoper_status},
					   TrUserData) ->
    #'DeleteResp.DeletedObjectResult'{requested_path =
					  if NFrequested_path =:= undefined ->
						 PFrequested_path;
					     true -> NFrequested_path
					  end,
				      oper_status =
					  if PFoper_status /= undefined,
					     NFoper_status /= undefined ->
						 'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus'(PFoper_status,
													    NFoper_status,
													    TrUserData);
					     PFoper_status == undefined ->
						 NFoper_status;
					     NFoper_status == undefined ->
						 PFoper_status
					  end}.

-compile({nowarn_unused_function,'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'/3}).
'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(#'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
																		   =
																		   PFerr_code,
																	       err_msg
																		   =
																		   PFerr_msg},
									    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
																		   =
																		   NFerr_code,
																	       err_msg
																		   =
																		   NFerr_msg},
									    _) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
									   =
									   if
									     NFerr_code
									       =:=
									       undefined ->
										 PFerr_code;
									     true ->
										 NFerr_code
									   end,
								       err_msg =
									   if
									     NFerr_msg
									       =:=
									       undefined ->
										 PFerr_msg;
									     true ->
										 NFerr_msg
									   end}.

-compile({nowarn_unused_function,'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'/3}).
'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(#'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
																		   =
																		   PFaffected_paths,
																	       unaffected_path_errs
																		   =
																		   PFunaffected_path_errs},
									    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
																		   =
																		   NFaffected_paths,
																	       unaffected_path_errs
																		   =
																		   NFunaffected_path_errs},
									    TrUserData) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
									   =
									   if
									     PFaffected_paths
									       /=
									       undefined,
									     NFaffected_paths
									       /=
									       undefined ->
										 'erlang_++'(PFaffected_paths,
											     NFaffected_paths,
											     TrUserData);
									     PFaffected_paths
									       ==
									       undefined ->
										 NFaffected_paths;
									     NFaffected_paths
									       ==
									       undefined ->
										 PFaffected_paths
									   end,
								       unaffected_path_errs
									   =
									   if
									     PFunaffected_path_errs
									       /=
									       undefined,
									     NFunaffected_path_errs
									       /=
									       undefined ->
										 'erlang_++'(PFunaffected_path_errs,
											     NFunaffected_path_errs,
											     TrUserData);
									     PFunaffected_path_errs
									       ==
									       undefined ->
										 NFunaffected_path_errs;
									     NFunaffected_path_errs
									       ==
									       undefined ->
										 PFunaffected_path_errs
									   end}.

-compile({nowarn_unused_function,'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus'/3}).
'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus'(#'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
														 =
														 PFoper_status},
							   #'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
														 =
														 NFoper_status},
							   TrUserData) ->
    #'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
							  =
							  case {PFoper_status,
								NFoper_status}
							      of
							    {{oper_failure,
							      OPFoper_status},
							     {oper_failure,
							      ONFoper_status}} ->
								{oper_failure,
								 'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(OPFoper_status,
																	     ONFoper_status,
																	     TrUserData)};
							    {{oper_success,
							      OPFoper_status},
							     {oper_success,
							      ONFoper_status}} ->
								{oper_success,
								 'merge_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(OPFoper_status,
																	     ONFoper_status,
																	     TrUserData)};
							    {_, undefined} ->
								PFoper_status;
							    _ -> NFoper_status
							  end}.

-compile({nowarn_unused_function,'merge_msg_DeleteResp.UnaffectedPathError'/3}).
'merge_msg_DeleteResp.UnaffectedPathError'(#'DeleteResp.UnaffectedPathError'{unaffected_path
										 =
										 PFunaffected_path,
									     err_code
										 =
										 PFerr_code,
									     err_msg
										 =
										 PFerr_msg},
					   #'DeleteResp.UnaffectedPathError'{unaffected_path
										 =
										 NFunaffected_path,
									     err_code
										 =
										 NFerr_code,
									     err_msg
										 =
										 NFerr_msg},
					   _) ->
    #'DeleteResp.UnaffectedPathError'{unaffected_path =
					  if NFunaffected_path =:= undefined ->
						 PFunaffected_path;
					     true -> NFunaffected_path
					  end,
				      err_code =
					  if NFerr_code =:= undefined ->
						 PFerr_code;
					     true -> NFerr_code
					  end,
				      err_msg =
					  if NFerr_msg =:= undefined ->
						 PFerr_msg;
					     true -> NFerr_msg
					  end}.

-compile({nowarn_unused_function,merge_msg_DeleteResp/3}).
merge_msg_DeleteResp(#'DeleteResp'{deleted_obj_results =
				       PFdeleted_obj_results},
		     #'DeleteResp'{deleted_obj_results =
				       NFdeleted_obj_results},
		     TrUserData) ->
    #'DeleteResp'{deleted_obj_results =
		      if PFdeleted_obj_results /= undefined,
			 NFdeleted_obj_results /= undefined ->
			     'erlang_++'(PFdeleted_obj_results,
					 NFdeleted_obj_results, TrUserData);
			 PFdeleted_obj_results == undefined ->
			     NFdeleted_obj_results;
			 NFdeleted_obj_results == undefined ->
			     PFdeleted_obj_results
		      end}.

-compile({nowarn_unused_function,'merge_msg_Set.UpdateObject'/3}).
'merge_msg_Set.UpdateObject'(#'Set.UpdateObject'{obj_path
						     = PFobj_path,
						 param_settings =
						     PFparam_settings},
			     #'Set.UpdateObject'{obj_path = NFobj_path,
						 param_settings =
						     NFparam_settings},
			     TrUserData) ->
    #'Set.UpdateObject'{obj_path =
			    if NFobj_path =:= undefined -> PFobj_path;
			       true -> NFobj_path
			    end,
			param_settings =
			    if PFparam_settings /= undefined,
			       NFparam_settings /= undefined ->
				   'erlang_++'(PFparam_settings,
					       NFparam_settings, TrUserData);
			       PFparam_settings == undefined ->
				   NFparam_settings;
			       NFparam_settings == undefined -> PFparam_settings
			    end}.

-compile({nowarn_unused_function,'merge_msg_Set.UpdateParamSetting'/3}).
'merge_msg_Set.UpdateParamSetting'(#'Set.UpdateParamSetting'{param
								 = PFparam,
							     value = PFvalue,
							     required =
								 PFrequired},
				   #'Set.UpdateParamSetting'{param = NFparam,
							     value = NFvalue,
							     required =
								 NFrequired},
				   _) ->
    #'Set.UpdateParamSetting'{param =
				  if NFparam =:= undefined -> PFparam;
				     true -> NFparam
				  end,
			      value =
				  if NFvalue =:= undefined -> PFvalue;
				     true -> NFvalue
				  end,
			      required =
				  if NFrequired =:= undefined -> PFrequired;
				     true -> NFrequired
				  end}.

-compile({nowarn_unused_function,merge_msg_Set/3}).
merge_msg_Set(#'Set'{allow_partial = PFallow_partial,
		     update_objs = PFupdate_objs},
	      #'Set'{allow_partial = NFallow_partial,
		     update_objs = NFupdate_objs},
	      TrUserData) ->
    #'Set'{allow_partial =
	       if NFallow_partial =:= undefined -> PFallow_partial;
		  true -> NFallow_partial
	       end,
	   update_objs =
	       if PFupdate_objs /= undefined,
		  NFupdate_objs /= undefined ->
		      'erlang_++'(PFupdate_objs, NFupdate_objs, TrUserData);
		  PFupdate_objs == undefined -> NFupdate_objs;
		  NFupdate_objs == undefined -> PFupdate_objs
	       end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.UpdatedObjectResult'/3}).
'merge_msg_SetResp.UpdatedObjectResult'(#'SetResp.UpdatedObjectResult'{requested_path
									   =
									   PFrequested_path,
								       oper_status
									   =
									   PFoper_status},
					#'SetResp.UpdatedObjectResult'{requested_path
									   =
									   NFrequested_path,
								       oper_status
									   =
									   NFoper_status},
					TrUserData) ->
    #'SetResp.UpdatedObjectResult'{requested_path =
				       if NFrequested_path =:= undefined ->
					      PFrequested_path;
					  true -> NFrequested_path
				       end,
				   oper_status =
				       if PFoper_status /= undefined,
					  NFoper_status /= undefined ->
					      'merge_msg_SetResp.UpdatedObjectResult.OperationStatus'(PFoper_status,
												      NFoper_status,
												      TrUserData);
					  PFoper_status == undefined ->
					      NFoper_status;
					  NFoper_status == undefined ->
					      PFoper_status
				       end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'/3}).
'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(#'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
																	     =
																	     PFerr_code,
																	 err_msg
																	     =
																	     PFerr_msg,
																	 updated_inst_failures
																	     =
																	     PFupdated_inst_failures},
									 #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
																	     =
																	     NFerr_code,
																	 err_msg
																	     =
																	     NFerr_msg,
																	 updated_inst_failures
																	     =
																	     NFupdated_inst_failures},
									 TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
									=
									if
									  NFerr_code
									    =:=
									    undefined ->
									      PFerr_code;
									  true ->
									      NFerr_code
									end,
								    err_msg =
									if
									  NFerr_msg
									    =:=
									    undefined ->
									      PFerr_msg;
									  true ->
									      NFerr_msg
									end,
								    updated_inst_failures
									=
									if
									  PFupdated_inst_failures
									    /=
									    undefined,
									  NFupdated_inst_failures
									    /=
									    undefined ->
									      'erlang_++'(PFupdated_inst_failures,
											  NFupdated_inst_failures,
											  TrUserData);
									  PFupdated_inst_failures
									    ==
									    undefined ->
									      NFupdated_inst_failures;
									  NFupdated_inst_failures
									    ==
									    undefined ->
									      PFupdated_inst_failures
									end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'/3}).
'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(#'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
																	     =
																	     PFupdated_inst_results},
									 #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
																	     =
																	     NFupdated_inst_results},
									 TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
									=
									if
									  PFupdated_inst_results
									    /=
									    undefined,
									  NFupdated_inst_results
									    /=
									    undefined ->
									      'erlang_++'(PFupdated_inst_results,
											  NFupdated_inst_results,
											  TrUserData);
									  PFupdated_inst_results
									    ==
									    undefined ->
									      NFupdated_inst_results;
									  NFupdated_inst_results
									    ==
									    undefined ->
									      PFupdated_inst_results
									end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.UpdatedObjectResult.OperationStatus'/3}).
'merge_msg_SetResp.UpdatedObjectResult.OperationStatus'(#'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
													   =
													   PFoper_status},
							#'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
													   =
													   NFoper_status},
							TrUserData) ->
    #'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
						       =
						       case {PFoper_status,
							     NFoper_status}
							   of
							 {{oper_failure,
							   OPFoper_status},
							  {oper_failure,
							   ONFoper_status}} ->
							     {oper_failure,
							      'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(OPFoper_status,
																       ONFoper_status,
																       TrUserData)};
							 {{oper_success,
							   OPFoper_status},
							  {oper_success,
							   ONFoper_status}} ->
							     {oper_success,
							      'merge_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(OPFoper_status,
																       ONFoper_status,
																       TrUserData)};
							 {_, undefined} ->
							     PFoper_status;
							 _ -> NFoper_status
						       end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.UpdatedInstanceFailure'/3}).
'merge_msg_SetResp.UpdatedInstanceFailure'(#'SetResp.UpdatedInstanceFailure'{affected_path
										 =
										 PFaffected_path,
									     param_errs
										 =
										 PFparam_errs},
					   #'SetResp.UpdatedInstanceFailure'{affected_path
										 =
										 NFaffected_path,
									     param_errs
										 =
										 NFparam_errs},
					   TrUserData) ->
    #'SetResp.UpdatedInstanceFailure'{affected_path =
					  if NFaffected_path =:= undefined ->
						 PFaffected_path;
					     true -> NFaffected_path
					  end,
				      param_errs =
					  if PFparam_errs /= undefined,
					     NFparam_errs /= undefined ->
						 'erlang_++'(PFparam_errs,
							     NFparam_errs,
							     TrUserData);
					     PFparam_errs == undefined ->
						 NFparam_errs;
					     NFparam_errs == undefined ->
						 PFparam_errs
					  end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.UpdatedInstanceResult'/3}).
'merge_msg_SetResp.UpdatedInstanceResult'(#'SetResp.UpdatedInstanceResult'{affected_path
									       =
									       PFaffected_path,
									   param_errs
									       =
									       PFparam_errs,
									   updated_params
									       =
									       PFupdated_params},
					  #'SetResp.UpdatedInstanceResult'{affected_path
									       =
									       NFaffected_path,
									   param_errs
									       =
									       NFparam_errs,
									   updated_params
									       =
									       NFupdated_params},
					  TrUserData) ->
    #'SetResp.UpdatedInstanceResult'{affected_path =
					 if NFaffected_path =:= undefined ->
						PFaffected_path;
					    true -> NFaffected_path
					 end,
				     param_errs =
					 if PFparam_errs /= undefined,
					    NFparam_errs /= undefined ->
						'erlang_++'(PFparam_errs,
							    NFparam_errs,
							    TrUserData);
					    PFparam_errs == undefined ->
						NFparam_errs;
					    NFparam_errs == undefined ->
						PFparam_errs
					 end,
				     updated_params =
					 if PFupdated_params /= undefined,
					    NFupdated_params /= undefined ->
						'tr_merge_SetResp.UpdatedInstanceResult.updated_params'(PFupdated_params,
													NFupdated_params,
													TrUserData);
					    PFupdated_params == undefined ->
						NFupdated_params;
					    NFupdated_params == undefined ->
						PFupdated_params
					 end}.

-compile({nowarn_unused_function,'merge_msg_SetResp.ParameterError'/3}).
'merge_msg_SetResp.ParameterError'(#'SetResp.ParameterError'{param
								 = PFparam,
							     err_code =
								 PFerr_code,
							     err_msg =
								 PFerr_msg},
				   #'SetResp.ParameterError'{param = NFparam,
							     err_code =
								 NFerr_code,
							     err_msg =
								 NFerr_msg},
				   _) ->
    #'SetResp.ParameterError'{param =
				  if NFparam =:= undefined -> PFparam;
				     true -> NFparam
				  end,
			      err_code =
				  if NFerr_code =:= undefined -> PFerr_code;
				     true -> NFerr_code
				  end,
			      err_msg =
				  if NFerr_msg =:= undefined -> PFerr_msg;
				     true -> NFerr_msg
				  end}.

-compile({nowarn_unused_function,merge_msg_SetResp/3}).
merge_msg_SetResp(#'SetResp'{updated_obj_results =
				 PFupdated_obj_results},
		  #'SetResp'{updated_obj_results = NFupdated_obj_results},
		  TrUserData) ->
    #'SetResp'{updated_obj_results =
		   if PFupdated_obj_results /= undefined,
		      NFupdated_obj_results /= undefined ->
			  'erlang_++'(PFupdated_obj_results,
				      NFupdated_obj_results, TrUserData);
		      PFupdated_obj_results == undefined ->
			  NFupdated_obj_results;
		      NFupdated_obj_results == undefined ->
			  PFupdated_obj_results
		   end}.

-compile({nowarn_unused_function,merge_msg_Operate/3}).
merge_msg_Operate(#'Operate'{command = PFcommand,
			     command_key = PFcommand_key,
			     send_resp = PFsend_resp,
			     input_args = PFinput_args},
		  #'Operate'{command = NFcommand,
			     command_key = NFcommand_key,
			     send_resp = NFsend_resp,
			     input_args = NFinput_args},
		  TrUserData) ->
    #'Operate'{command =
		   if NFcommand =:= undefined -> PFcommand;
		      true -> NFcommand
		   end,
	       command_key =
		   if NFcommand_key =:= undefined -> PFcommand_key;
		      true -> NFcommand_key
		   end,
	       send_resp =
		   if NFsend_resp =:= undefined -> PFsend_resp;
		      true -> NFsend_resp
		   end,
	       input_args =
		   if PFinput_args /= undefined,
		      NFinput_args /= undefined ->
			  'tr_merge_Operate.input_args'(PFinput_args,
							NFinput_args,
							TrUserData);
		      PFinput_args == undefined -> NFinput_args;
		      NFinput_args == undefined -> PFinput_args
		   end}.

-compile({nowarn_unused_function,'merge_msg_OperateResp.OperationResult'/3}).
'merge_msg_OperateResp.OperationResult'(#'OperateResp.OperationResult'{executed_command
									   =
									   PFexecuted_command,
								       operation_resp
									   =
									   PFoperation_resp},
					#'OperateResp.OperationResult'{executed_command
									   =
									   NFexecuted_command,
								       operation_resp
									   =
									   NFoperation_resp},
					TrUserData) ->
    #'OperateResp.OperationResult'{executed_command =
				       if NFexecuted_command =:= undefined ->
					      PFexecuted_command;
					  true -> NFexecuted_command
				       end,
				   operation_resp =
				       case {PFoperation_resp, NFoperation_resp}
					   of
					 {{req_output_args, OPFoperation_resp},
					  {req_output_args,
					   ONFoperation_resp}} ->
					     {req_output_args,
					      'merge_msg_OperateResp.OperationResult.OutputArgs'(OPFoperation_resp,
												 ONFoperation_resp,
												 TrUserData)};
					 {{cmd_failure, OPFoperation_resp},
					  {cmd_failure, ONFoperation_resp}} ->
					     {cmd_failure,
					      'merge_msg_OperateResp.OperationResult.CommandFailure'(OPFoperation_resp,
												     ONFoperation_resp,
												     TrUserData)};
					 {_, undefined} -> PFoperation_resp;
					 _ -> NFoperation_resp
				       end}.

-compile({nowarn_unused_function,'merge_msg_OperateResp.OperationResult.CommandFailure'/3}).
'merge_msg_OperateResp.OperationResult.CommandFailure'(#'OperateResp.OperationResult.CommandFailure'{err_code
													 =
													 PFerr_code,
												     err_msg
													 =
													 PFerr_msg},
						       #'OperateResp.OperationResult.CommandFailure'{err_code
													 =
													 NFerr_code,
												     err_msg
													 =
													 NFerr_msg},
						       _) ->
    #'OperateResp.OperationResult.CommandFailure'{err_code =
						      if NFerr_code =:=
							   undefined ->
							     PFerr_code;
							 true -> NFerr_code
						      end,
						  err_msg =
						      if NFerr_msg =:=
							   undefined ->
							     PFerr_msg;
							 true -> NFerr_msg
						      end}.

-compile({nowarn_unused_function,'merge_msg_OperateResp.OperationResult.OutputArgs'/3}).
'merge_msg_OperateResp.OperationResult.OutputArgs'(#'OperateResp.OperationResult.OutputArgs'{output_args
												 =
												 PFoutput_args},
						   #'OperateResp.OperationResult.OutputArgs'{output_args
												 =
												 NFoutput_args},
						   TrUserData) ->
    #'OperateResp.OperationResult.OutputArgs'{output_args =
						  if PFoutput_args /= undefined,
						     NFoutput_args /=
						       undefined ->
							 'tr_merge_OperateResp.OperationResult.OutputArgs.output_args'(PFoutput_args,
														       NFoutput_args,
														       TrUserData);
						     PFoutput_args ==
						       undefined ->
							 NFoutput_args;
						     NFoutput_args ==
						       undefined ->
							 PFoutput_args
						  end}.

-compile({nowarn_unused_function,merge_msg_OperateResp/3}).
merge_msg_OperateResp(#'OperateResp'{operation_results =
					 PFoperation_results},
		      #'OperateResp'{operation_results = NFoperation_results},
		      TrUserData) ->
    #'OperateResp'{operation_results =
		       if PFoperation_results /= undefined,
			  NFoperation_results /= undefined ->
			      'erlang_++'(PFoperation_results,
					  NFoperation_results, TrUserData);
			  PFoperation_results == undefined ->
			      NFoperation_results;
			  NFoperation_results == undefined ->
			      PFoperation_results
		       end}.

-compile({nowarn_unused_function,'merge_msg_Notify.Event'/3}).
'merge_msg_Notify.Event'(#'Notify.Event'{obj_path =
					     PFobj_path,
					 event_name = PFevent_name,
					 params = PFparams},
			 #'Notify.Event'{obj_path = NFobj_path,
					 event_name = NFevent_name,
					 params = NFparams},
			 TrUserData) ->
    #'Notify.Event'{obj_path =
			if NFobj_path =:= undefined -> PFobj_path;
			   true -> NFobj_path
			end,
		    event_name =
			if NFevent_name =:= undefined -> PFevent_name;
			   true -> NFevent_name
			end,
		    params =
			if PFparams /= undefined, NFparams /= undefined ->
			       'tr_merge_Notify.Event.params'(PFparams,
							      NFparams,
							      TrUserData);
			   PFparams == undefined -> NFparams;
			   NFparams == undefined -> PFparams
			end}.

-compile({nowarn_unused_function,'merge_msg_Notify.ValueChange'/3}).
'merge_msg_Notify.ValueChange'(#'Notify.ValueChange'{param_path
							 = PFparam_path,
						     param_value =
							 PFparam_value},
			       #'Notify.ValueChange'{param_path = NFparam_path,
						     param_value =
							 NFparam_value},
			       _) ->
    #'Notify.ValueChange'{param_path =
			      if NFparam_path =:= undefined -> PFparam_path;
				 true -> NFparam_path
			      end,
			  param_value =
			      if NFparam_value =:= undefined -> PFparam_value;
				 true -> NFparam_value
			      end}.

-compile({nowarn_unused_function,'merge_msg_Notify.ObjectCreation'/3}).
'merge_msg_Notify.ObjectCreation'(#'Notify.ObjectCreation'{obj_path
							       = PFobj_path,
							   unique_keys =
							       PFunique_keys},
				  #'Notify.ObjectCreation'{obj_path =
							       NFobj_path,
							   unique_keys =
							       NFunique_keys},
				  TrUserData) ->
    #'Notify.ObjectCreation'{obj_path =
				 if NFobj_path =:= undefined -> PFobj_path;
				    true -> NFobj_path
				 end,
			     unique_keys =
				 if PFunique_keys /= undefined,
				    NFunique_keys /= undefined ->
					'tr_merge_Notify.ObjectCreation.unique_keys'(PFunique_keys,
										     NFunique_keys,
										     TrUserData);
				    PFunique_keys == undefined -> NFunique_keys;
				    NFunique_keys == undefined -> PFunique_keys
				 end}.

-compile({nowarn_unused_function,'merge_msg_Notify.ObjectDeletion'/3}).
'merge_msg_Notify.ObjectDeletion'(#'Notify.ObjectDeletion'{obj_path
							       = PFobj_path},
				  #'Notify.ObjectDeletion'{obj_path =
							       NFobj_path},
				  _) ->
    #'Notify.ObjectDeletion'{obj_path =
				 if NFobj_path =:= undefined -> PFobj_path;
				    true -> NFobj_path
				 end}.

-compile({nowarn_unused_function,'merge_msg_Notify.OperationComplete'/3}).
'merge_msg_Notify.OperationComplete'(#'Notify.OperationComplete'{obj_path
								     =
								     PFobj_path,
								 command_name =
								     PFcommand_name,
								 command_key =
								     PFcommand_key,
								 operation_resp
								     =
								     PFoperation_resp},
				     #'Notify.OperationComplete'{obj_path =
								     NFobj_path,
								 command_name =
								     NFcommand_name,
								 command_key =
								     NFcommand_key,
								 operation_resp
								     =
								     NFoperation_resp},
				     TrUserData) ->
    #'Notify.OperationComplete'{obj_path =
				    if NFobj_path =:= undefined -> PFobj_path;
				       true -> NFobj_path
				    end,
				command_name =
				    if NFcommand_name =:= undefined ->
					   PFcommand_name;
				       true -> NFcommand_name
				    end,
				command_key =
				    if NFcommand_key =:= undefined ->
					   PFcommand_key;
				       true -> NFcommand_key
				    end,
				operation_resp =
				    case {PFoperation_resp, NFoperation_resp} of
				      {{req_output_args, OPFoperation_resp},
				       {req_output_args, ONFoperation_resp}} ->
					  {req_output_args,
					   'merge_msg_Notify.OperationComplete.OutputArgs'(OPFoperation_resp,
											   ONFoperation_resp,
											   TrUserData)};
				      {{cmd_failure, OPFoperation_resp},
				       {cmd_failure, ONFoperation_resp}} ->
					  {cmd_failure,
					   'merge_msg_Notify.OperationComplete.CommandFailure'(OPFoperation_resp,
											       ONFoperation_resp,
											       TrUserData)};
				      {_, undefined} -> PFoperation_resp;
				      _ -> NFoperation_resp
				    end}.

-compile({nowarn_unused_function,'merge_msg_Notify.OperationComplete.CommandFailure'/3}).
'merge_msg_Notify.OperationComplete.CommandFailure'(#'Notify.OperationComplete.CommandFailure'{err_code
												   =
												   PFerr_code,
											       err_msg
												   =
												   PFerr_msg},
						    #'Notify.OperationComplete.CommandFailure'{err_code
												   =
												   NFerr_code,
											       err_msg
												   =
												   NFerr_msg},
						    _) ->
    #'Notify.OperationComplete.CommandFailure'{err_code =
						   if NFerr_code =:=
							undefined ->
							  PFerr_code;
						      true -> NFerr_code
						   end,
					       err_msg =
						   if NFerr_msg =:= undefined ->
							  PFerr_msg;
						      true -> NFerr_msg
						   end}.

-compile({nowarn_unused_function,'merge_msg_Notify.OperationComplete.OutputArgs'/3}).
'merge_msg_Notify.OperationComplete.OutputArgs'(#'Notify.OperationComplete.OutputArgs'{output_args
											   =
											   PFoutput_args},
						#'Notify.OperationComplete.OutputArgs'{output_args
											   =
											   NFoutput_args},
						TrUserData) ->
    #'Notify.OperationComplete.OutputArgs'{output_args =
					       if PFoutput_args /= undefined,
						  NFoutput_args /= undefined ->
						      'tr_merge_Notify.OperationComplete.OutputArgs.output_args'(PFoutput_args,
														 NFoutput_args,
														 TrUserData);
						  PFoutput_args == undefined ->
						      NFoutput_args;
						  NFoutput_args == undefined ->
						      PFoutput_args
					       end}.

-compile({nowarn_unused_function,'merge_msg_Notify.OnBoardRequest'/3}).
'merge_msg_Notify.OnBoardRequest'(#'Notify.OnBoardRequest'{oui
							       = PFoui,
							   product_class =
							       PFproduct_class,
							   serial_number =
							       PFserial_number,
							   agent_supported_protocol_versions
							       =
							       PFagent_supported_protocol_versions},
				  #'Notify.OnBoardRequest'{oui = NFoui,
							   product_class =
							       NFproduct_class,
							   serial_number =
							       NFserial_number,
							   agent_supported_protocol_versions
							       =
							       NFagent_supported_protocol_versions},
				  _) ->
    #'Notify.OnBoardRequest'{oui =
				 if NFoui =:= undefined -> PFoui;
				    true -> NFoui
				 end,
			     product_class =
				 if NFproduct_class =:= undefined ->
					PFproduct_class;
				    true -> NFproduct_class
				 end,
			     serial_number =
				 if NFserial_number =:= undefined ->
					PFserial_number;
				    true -> NFserial_number
				 end,
			     agent_supported_protocol_versions =
				 if NFagent_supported_protocol_versions =:=
				      undefined ->
					PFagent_supported_protocol_versions;
				    true -> NFagent_supported_protocol_versions
				 end}.

-compile({nowarn_unused_function,merge_msg_Notify/3}).
merge_msg_Notify(#'Notify'{subscription_id =
			       PFsubscription_id,
			   send_resp = PFsend_resp,
			   notification = PFnotification},
		 #'Notify'{subscription_id = NFsubscription_id,
			   send_resp = NFsend_resp,
			   notification = NFnotification},
		 TrUserData) ->
    #'Notify'{subscription_id =
		  if NFsubscription_id =:= undefined -> PFsubscription_id;
		     true -> NFsubscription_id
		  end,
	      send_resp =
		  if NFsend_resp =:= undefined -> PFsend_resp;
		     true -> NFsend_resp
		  end,
	      notification =
		  case {PFnotification, NFnotification} of
		    {{event, OPFnotification}, {event, ONFnotification}} ->
			{event,
			 'merge_msg_Notify.Event'(OPFnotification,
						  ONFnotification, TrUserData)};
		    {{value_change, OPFnotification},
		     {value_change, ONFnotification}} ->
			{value_change,
			 'merge_msg_Notify.ValueChange'(OPFnotification,
							ONFnotification,
							TrUserData)};
		    {{obj_creation, OPFnotification},
		     {obj_creation, ONFnotification}} ->
			{obj_creation,
			 'merge_msg_Notify.ObjectCreation'(OPFnotification,
							   ONFnotification,
							   TrUserData)};
		    {{obj_deletion, OPFnotification},
		     {obj_deletion, ONFnotification}} ->
			{obj_deletion,
			 'merge_msg_Notify.ObjectDeletion'(OPFnotification,
							   ONFnotification,
							   TrUserData)};
		    {{oper_complete, OPFnotification},
		     {oper_complete, ONFnotification}} ->
			{oper_complete,
			 'merge_msg_Notify.OperationComplete'(OPFnotification,
							      ONFnotification,
							      TrUserData)};
		    {{on_board_req, OPFnotification},
		     {on_board_req, ONFnotification}} ->
			{on_board_req,
			 'merge_msg_Notify.OnBoardRequest'(OPFnotification,
							   ONFnotification,
							   TrUserData)};
		    {_, undefined} -> PFnotification;
		    _ -> NFnotification
		  end}.

-compile({nowarn_unused_function,merge_msg_NotifyResp/3}).
merge_msg_NotifyResp(#'NotifyResp'{subscription_id =
				       PFsubscription_id},
		     #'NotifyResp'{subscription_id = NFsubscription_id},
		     _) ->
    #'NotifyResp'{subscription_id =
		      if NFsubscription_id =:= undefined -> PFsubscription_id;
			 true -> NFsubscription_id
		      end}.

-compile({nowarn_unused_function,merge_msg_DoubleValue/3}).
merge_msg_DoubleValue(#'DoubleValue'{value = PFvalue},
		      #'DoubleValue'{value = NFvalue}, _) ->
    #'DoubleValue'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

-compile({nowarn_unused_function,merge_msg_FloatValue/3}).
merge_msg_FloatValue(#'FloatValue'{value = PFvalue},
		     #'FloatValue'{value = NFvalue}, _) ->
    #'FloatValue'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

-compile({nowarn_unused_function,merge_msg_Int64Value/3}).
merge_msg_Int64Value(#'Int64Value'{value = PFvalue},
		     #'Int64Value'{value = NFvalue}, _) ->
    #'Int64Value'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

-compile({nowarn_unused_function,merge_msg_UInt64Value/3}).
merge_msg_UInt64Value(#'UInt64Value'{value = PFvalue},
		      #'UInt64Value'{value = NFvalue}, _) ->
    #'UInt64Value'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

-compile({nowarn_unused_function,merge_msg_Int32Value/3}).
merge_msg_Int32Value(#'Int32Value'{value = PFvalue},
		     #'Int32Value'{value = NFvalue}, _) ->
    #'Int32Value'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

-compile({nowarn_unused_function,merge_msg_UInt32Value/3}).
merge_msg_UInt32Value(#'UInt32Value'{value = PFvalue},
		      #'UInt32Value'{value = NFvalue}, _) ->
    #'UInt32Value'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

-compile({nowarn_unused_function,merge_msg_BoolValue/3}).
merge_msg_BoolValue(#'BoolValue'{value = PFvalue},
		    #'BoolValue'{value = NFvalue}, _) ->
    #'BoolValue'{value =
		     if NFvalue =:= undefined -> PFvalue;
			true -> NFvalue
		     end}.

-compile({nowarn_unused_function,merge_msg_StringValue/3}).
merge_msg_StringValue(#'StringValue'{value = PFvalue},
		      #'StringValue'{value = NFvalue}, _) ->
    #'StringValue'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

-compile({nowarn_unused_function,merge_msg_BytesValue/3}).
merge_msg_BytesValue(#'BytesValue'{value = PFvalue},
		     #'BytesValue'{value = NFvalue}, _) ->
    #'BytesValue'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Record' -> v_msg_Record(Msg, [MsgName], TrUserData);
      'NoSessionContextRecord' ->
	  v_msg_NoSessionContextRecord(Msg, [MsgName],
				       TrUserData);
      'SessionContextRecord' ->
	  v_msg_SessionContextRecord(Msg, [MsgName], TrUserData);
      'Msg' -> v_msg_Msg(Msg, [MsgName], TrUserData);
      'Header' -> v_msg_Header(Msg, [MsgName], TrUserData);
      'Body' -> v_msg_Body(Msg, [MsgName], TrUserData);
      'Request' -> v_msg_Request(Msg, [MsgName], TrUserData);
      'Response' ->
	  v_msg_Response(Msg, [MsgName], TrUserData);
      'Error.ParamError' ->
	  'v_msg_Error.ParamError'(Msg, [MsgName], TrUserData);
      'Error' -> v_msg_Error(Msg, [MsgName], TrUserData);
      'Get' -> v_msg_Get(Msg, [MsgName], TrUserData);
      'GetResp.RequestedPathResult' ->
	  'v_msg_GetResp.RequestedPathResult'(Msg, [MsgName],
					      TrUserData);
      'GetResp.ResolvedPathResult' ->
	  'v_msg_GetResp.ResolvedPathResult'(Msg, [MsgName],
					     TrUserData);
      'GetResp' -> v_msg_GetResp(Msg, [MsgName], TrUserData);
      'GetSupportedDM' ->
	  v_msg_GetSupportedDM(Msg, [MsgName], TrUserData);
      'GetSupportedDMResp.RequestedObjectResult' ->
	  'v_msg_GetSupportedDMResp.RequestedObjectResult'(Msg,
							   [MsgName],
							   TrUserData);
      'GetSupportedDMResp.SupportedObjectResult' ->
	  'v_msg_GetSupportedDMResp.SupportedObjectResult'(Msg,
							   [MsgName],
							   TrUserData);
      'GetSupportedDMResp.SupportedParamResult' ->
	  'v_msg_GetSupportedDMResp.SupportedParamResult'(Msg,
							  [MsgName],
							  TrUserData);
      'GetSupportedDMResp.SupportedCommandResult' ->
	  'v_msg_GetSupportedDMResp.SupportedCommandResult'(Msg,
							    [MsgName],
							    TrUserData);
      'GetSupportedDMResp.SupportedEventResult' ->
	  'v_msg_GetSupportedDMResp.SupportedEventResult'(Msg,
							  [MsgName],
							  TrUserData);
      'GetSupportedDMResp' ->
	  v_msg_GetSupportedDMResp(Msg, [MsgName], TrUserData);
      'GetInstances' ->
	  v_msg_GetInstances(Msg, [MsgName], TrUserData);
      'GetInstancesResp.RequestedPathResult' ->
	  'v_msg_GetInstancesResp.RequestedPathResult'(Msg,
						       [MsgName], TrUserData);
      'GetInstancesResp.CurrInstance' ->
	  'v_msg_GetInstancesResp.CurrInstance'(Msg, [MsgName],
						TrUserData);
      'GetInstancesResp' ->
	  v_msg_GetInstancesResp(Msg, [MsgName], TrUserData);
      'GetSupportedProtocol' ->
	  v_msg_GetSupportedProtocol(Msg, [MsgName], TrUserData);
      'GetSupportedProtocolResp' ->
	  v_msg_GetSupportedProtocolResp(Msg, [MsgName],
					 TrUserData);
      'Add.CreateObject' ->
	  'v_msg_Add.CreateObject'(Msg, [MsgName], TrUserData);
      'Add.CreateParamSetting' ->
	  'v_msg_Add.CreateParamSetting'(Msg, [MsgName],
					 TrUserData);
      'Add' -> v_msg_Add(Msg, [MsgName], TrUserData);
      'AddResp.CreatedObjectResult' ->
	  'v_msg_AddResp.CreatedObjectResult'(Msg, [MsgName],
					      TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus.OperationFailure' ->
	  'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(Msg,
									       [MsgName],
									       TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess' ->
	  'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(Msg,
									       [MsgName],
									       TrUserData);
      'AddResp.CreatedObjectResult.OperationStatus' ->
	  'v_msg_AddResp.CreatedObjectResult.OperationStatus'(Msg,
							      [MsgName],
							      TrUserData);
      'AddResp.ParameterError' ->
	  'v_msg_AddResp.ParameterError'(Msg, [MsgName],
					 TrUserData);
      'AddResp' -> v_msg_AddResp(Msg, [MsgName], TrUserData);
      'Delete' -> v_msg_Delete(Msg, [MsgName], TrUserData);
      'DeleteResp.DeletedObjectResult' ->
	  'v_msg_DeleteResp.DeletedObjectResult'(Msg, [MsgName],
						 TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure' ->
	  'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(Msg,
										  [MsgName],
										  TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess' ->
	  'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(Msg,
										  [MsgName],
										  TrUserData);
      'DeleteResp.DeletedObjectResult.OperationStatus' ->
	  'v_msg_DeleteResp.DeletedObjectResult.OperationStatus'(Msg,
								 [MsgName],
								 TrUserData);
      'DeleteResp.UnaffectedPathError' ->
	  'v_msg_DeleteResp.UnaffectedPathError'(Msg, [MsgName],
						 TrUserData);
      'DeleteResp' ->
	  v_msg_DeleteResp(Msg, [MsgName], TrUserData);
      'Set.UpdateObject' ->
	  'v_msg_Set.UpdateObject'(Msg, [MsgName], TrUserData);
      'Set.UpdateParamSetting' ->
	  'v_msg_Set.UpdateParamSetting'(Msg, [MsgName],
					 TrUserData);
      'Set' -> v_msg_Set(Msg, [MsgName], TrUserData);
      'SetResp.UpdatedObjectResult' ->
	  'v_msg_SetResp.UpdatedObjectResult'(Msg, [MsgName],
					      TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure' ->
	  'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(Msg,
									       [MsgName],
									       TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess' ->
	  'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(Msg,
									       [MsgName],
									       TrUserData);
      'SetResp.UpdatedObjectResult.OperationStatus' ->
	  'v_msg_SetResp.UpdatedObjectResult.OperationStatus'(Msg,
							      [MsgName],
							      TrUserData);
      'SetResp.UpdatedInstanceFailure' ->
	  'v_msg_SetResp.UpdatedInstanceFailure'(Msg, [MsgName],
						 TrUserData);
      'SetResp.UpdatedInstanceResult' ->
	  'v_msg_SetResp.UpdatedInstanceResult'(Msg, [MsgName],
						TrUserData);
      'SetResp.ParameterError' ->
	  'v_msg_SetResp.ParameterError'(Msg, [MsgName],
					 TrUserData);
      'SetResp' -> v_msg_SetResp(Msg, [MsgName], TrUserData);
      'Operate' -> v_msg_Operate(Msg, [MsgName], TrUserData);
      'OperateResp.OperationResult' ->
	  'v_msg_OperateResp.OperationResult'(Msg, [MsgName],
					      TrUserData);
      'OperateResp.OperationResult.CommandFailure' ->
	  'v_msg_OperateResp.OperationResult.CommandFailure'(Msg,
							     [MsgName],
							     TrUserData);
      'OperateResp.OperationResult.OutputArgs' ->
	  'v_msg_OperateResp.OperationResult.OutputArgs'(Msg,
							 [MsgName], TrUserData);
      'OperateResp' ->
	  v_msg_OperateResp(Msg, [MsgName], TrUserData);
      'Notify.Event' ->
	  'v_msg_Notify.Event'(Msg, [MsgName], TrUserData);
      'Notify.ValueChange' ->
	  'v_msg_Notify.ValueChange'(Msg, [MsgName], TrUserData);
      'Notify.ObjectCreation' ->
	  'v_msg_Notify.ObjectCreation'(Msg, [MsgName],
					TrUserData);
      'Notify.ObjectDeletion' ->
	  'v_msg_Notify.ObjectDeletion'(Msg, [MsgName],
					TrUserData);
      'Notify.OperationComplete' ->
	  'v_msg_Notify.OperationComplete'(Msg, [MsgName],
					   TrUserData);
      'Notify.OperationComplete.CommandFailure' ->
	  'v_msg_Notify.OperationComplete.CommandFailure'(Msg,
							  [MsgName],
							  TrUserData);
      'Notify.OperationComplete.OutputArgs' ->
	  'v_msg_Notify.OperationComplete.OutputArgs'(Msg,
						      [MsgName], TrUserData);
      'Notify.OnBoardRequest' ->
	  'v_msg_Notify.OnBoardRequest'(Msg, [MsgName],
					TrUserData);
      'Notify' -> v_msg_Notify(Msg, [MsgName], TrUserData);
      'NotifyResp' ->
	  v_msg_NotifyResp(Msg, [MsgName], TrUserData);
      'DoubleValue' ->
	  v_msg_DoubleValue(Msg, [MsgName], TrUserData);
      'FloatValue' ->
	  v_msg_FloatValue(Msg, [MsgName], TrUserData);
      'Int64Value' ->
	  v_msg_Int64Value(Msg, [MsgName], TrUserData);
      'UInt64Value' ->
	  v_msg_UInt64Value(Msg, [MsgName], TrUserData);
      'Int32Value' ->
	  v_msg_Int32Value(Msg, [MsgName], TrUserData);
      'UInt32Value' ->
	  v_msg_UInt32Value(Msg, [MsgName], TrUserData);
      'BoolValue' ->
	  v_msg_BoolValue(Msg, [MsgName], TrUserData);
      'StringValue' ->
	  v_msg_StringValue(Msg, [MsgName], TrUserData);
      'BytesValue' ->
	  v_msg_BytesValue(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Record/3}).
-dialyzer({nowarn_function,v_msg_Record/3}).
v_msg_Record(#'Record'{version = F1, to_id = F2,
		       from_id = F3, payload_security = F4, mac_signature = F5,
		       sender_cert = F6, record_type = F7},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [version | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [to_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [from_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_Record.PayloadSecurity'(F4,
					   [payload_security | Path],
					   TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_bytes(F5, [mac_signature | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_bytes(F6, [sender_cert | Path], TrUserData)
    end,
    case F7 of
      undefined -> ok;
      {no_session_context, OF7} ->
	  v_msg_NoSessionContextRecord(OF7,
				       [no_session_context, record_type | Path],
				       TrUserData);
      {session_context, OF7} ->
	  v_msg_SessionContextRecord(OF7,
				     [session_context, record_type | Path],
				     TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F7, [record_type | Path])
    end,
    ok;
v_msg_Record(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Record'}, X, Path).

-compile({nowarn_unused_function,v_msg_NoSessionContextRecord/3}).
-dialyzer({nowarn_function,v_msg_NoSessionContextRecord/3}).
v_msg_NoSessionContextRecord(#'NoSessionContextRecord'{payload
							   = F1},
			     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [payload | Path], TrUserData)
    end,
    ok;
v_msg_NoSessionContextRecord(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NoSessionContextRecord'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_SessionContextRecord/3}).
-dialyzer({nowarn_function,v_msg_SessionContextRecord/3}).
v_msg_SessionContextRecord(#'SessionContextRecord'{session_id
						       = F1,
						   sequence_id = F2,
						   expected_id = F3,
						   retransmit_id = F4,
						   payload_sar_state = F5,
						   payloadrec_sar_state = F6,
						   payload = F7},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_uint64(F1, [session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, [sequence_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint64(F3, [expected_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4, [retransmit_id | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_enum_SessionContextRecord.PayloadSARState'(F5,
							 [payload_sar_state
							  | Path],
							 TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_SessionContextRecord.PayloadSARState'(F6,
							 [payloadrec_sar_state
							  | Path],
							 TrUserData)
    end,
    if is_list(F7) ->
	   _ = [v_type_bytes(Elem, [payload | Path], TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F7,
			 [payload | Path])
    end,
    ok;
v_msg_SessionContextRecord(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SessionContextRecord'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Msg/3}).
-dialyzer({nowarn_function,v_msg_Msg/3}).
v_msg_Msg(#'Msg'{header = F1, body = F2}, Path,
	  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_Header(F1, [header | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Body(F2, [body | Path], TrUserData)
    end,
    ok;
v_msg_Msg(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Msg'}, X, Path).

-compile({nowarn_unused_function,v_msg_Header/3}).
-dialyzer({nowarn_function,v_msg_Header/3}).
v_msg_Header(#'Header'{msg_id = F1, msg_type = F2},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_Header.MsgType'(F2, [msg_type | Path],
				   TrUserData)
    end,
    ok;
v_msg_Header(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Header'}, X, Path).

-compile({nowarn_unused_function,v_msg_Body/3}).
-dialyzer({nowarn_function,v_msg_Body/3}).
v_msg_Body(#'Body'{msg_body = F1}, Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {request, OF1} ->
	  v_msg_Request(OF1, [request, msg_body | Path],
			TrUserData);
      {response, OF1} ->
	  v_msg_Response(OF1, [response, msg_body | Path],
			 TrUserData);
      {error, OF1} ->
	  v_msg_Error(OF1, [error, msg_body | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [msg_body | Path])
    end,
    ok;
v_msg_Body(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Body'}, X, Path).

-compile({nowarn_unused_function,v_msg_Request/3}).
-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{req_type = F1}, Path,
	      TrUserData) ->
    case F1 of
      undefined -> ok;
      {get, OF1} ->
	  v_msg_Get(OF1, [get, req_type | Path], TrUserData);
      {get_supported_dm, OF1} ->
	  v_msg_GetSupportedDM(OF1,
			       [get_supported_dm, req_type | Path], TrUserData);
      {get_instances, OF1} ->
	  v_msg_GetInstances(OF1,
			     [get_instances, req_type | Path], TrUserData);
      {set, OF1} ->
	  v_msg_Set(OF1, [set, req_type | Path], TrUserData);
      {add, OF1} ->
	  v_msg_Add(OF1, [add, req_type | Path], TrUserData);
      {delete, OF1} ->
	  v_msg_Delete(OF1, [delete, req_type | Path],
		       TrUserData);
      {operate, OF1} ->
	  v_msg_Operate(OF1, [operate, req_type | Path],
			TrUserData);
      {notify, OF1} ->
	  v_msg_Notify(OF1, [notify, req_type | Path],
		       TrUserData);
      {get_supported_protocol, OF1} ->
	  v_msg_GetSupportedProtocol(OF1,
				     [get_supported_protocol, req_type | Path],
				     TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [req_type | Path])
    end,
    ok;
v_msg_Request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{resp_type = F1}, Path,
	       TrUserData) ->
    case F1 of
      undefined -> ok;
      {get_resp, OF1} ->
	  v_msg_GetResp(OF1, [get_resp, resp_type | Path],
			TrUserData);
      {get_supported_dm_resp, OF1} ->
	  v_msg_GetSupportedDMResp(OF1,
				   [get_supported_dm_resp, resp_type | Path],
				   TrUserData);
      {get_instances_resp, OF1} ->
	  v_msg_GetInstancesResp(OF1,
				 [get_instances_resp, resp_type | Path],
				 TrUserData);
      {set_resp, OF1} ->
	  v_msg_SetResp(OF1, [set_resp, resp_type | Path],
			TrUserData);
      {add_resp, OF1} ->
	  v_msg_AddResp(OF1, [add_resp, resp_type | Path],
			TrUserData);
      {delete_resp, OF1} ->
	  v_msg_DeleteResp(OF1, [delete_resp, resp_type | Path],
			   TrUserData);
      {operate_resp, OF1} ->
	  v_msg_OperateResp(OF1, [operate_resp, resp_type | Path],
			    TrUserData);
      {notify_resp, OF1} ->
	  v_msg_NotifyResp(OF1, [notify_resp, resp_type | Path],
			   TrUserData);
      {get_supported_protocol_resp, OF1} ->
	  v_msg_GetSupportedProtocolResp(OF1,
					 [get_supported_protocol_resp, resp_type
					  | Path],
					 TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F1, [resp_type | Path])
    end,
    ok;
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Error.ParamError'/3}).
-dialyzer({nowarn_function,'v_msg_Error.ParamError'/3}).
'v_msg_Error.ParamError'(#'Error.ParamError'{param_path
						 = F1,
					     err_code = F2, err_msg = F3},
			 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [param_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_Error.ParamError'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Error.ParamError'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Error/3}).
-dialyzer({nowarn_function,v_msg_Error/3}).
v_msg_Error(#'Error'{err_code = F1, err_msg = F2,
		     param_errs = F3},
	    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed32(F1, [err_code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [err_msg | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = ['v_msg_Error.ParamError'(Elem, [param_errs | Path],
					 TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Error.ParamError'}},
			 F3, [param_errs | Path])
    end,
    ok;
v_msg_Error(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Error'}, X, Path).

-compile({nowarn_unused_function,v_msg_Get/3}).
-dialyzer({nowarn_function,v_msg_Get/3}).
v_msg_Get(#'Get'{param_paths = F1}, Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [param_paths | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [param_paths | Path])
    end,
    ok;
v_msg_Get(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Get'}, X, Path).

-compile({nowarn_unused_function,'v_msg_GetResp.RequestedPathResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetResp.RequestedPathResult'/3}).
'v_msg_GetResp.RequestedPathResult'(#'GetResp.RequestedPathResult'{requested_path
								       = F1,
								   err_code =
								       F2,
								   err_msg = F3,
								   resolved_path_results
								       = F4},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [requested_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = ['v_msg_GetResp.ResolvedPathResult'(Elem,
						   [resolved_path_results
						    | Path],
						   TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetResp.ResolvedPathResult'}},
			 F4, [resolved_path_results | Path])
    end,
    ok;
'v_msg_GetResp.RequestedPathResult'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetResp.RequestedPathResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_GetResp.ResolvedPathResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetResp.ResolvedPathResult'/3}).
'v_msg_GetResp.ResolvedPathResult'(#'GetResp.ResolvedPathResult'{resolved_path
								     = F1,
								 result_params =
								     F2},
				   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [resolved_path | Path], TrUserData)
    end,
    'v_map<string,string>'(F2, [result_params | Path],
			   TrUserData),
    ok;
'v_msg_GetResp.ResolvedPathResult'(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetResp.ResolvedPathResult'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_GetResp/3}).
-dialyzer({nowarn_function,v_msg_GetResp/3}).
v_msg_GetResp(#'GetResp'{req_path_results = F1}, Path,
	      TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_GetResp.RequestedPathResult'(Elem,
						    [req_path_results | Path],
						    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetResp.RequestedPathResult'}},
			 F1, [req_path_results | Path])
    end,
    ok;
v_msg_GetResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_GetSupportedDM/3}).
-dialyzer({nowarn_function,v_msg_GetSupportedDM/3}).
v_msg_GetSupportedDM(#'GetSupportedDM'{obj_paths = F1,
				       first_level_only = F2,
				       return_commands = F3, return_events = F4,
				       return_params = F5},
		     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [obj_paths | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [obj_paths | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2, [first_level_only | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bool(F3, [return_commands | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bool(F4, [return_events | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_bool(F5, [return_params | Path], TrUserData)
    end,
    ok;
v_msg_GetSupportedDM(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetSupportedDM'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_GetSupportedDMResp.RequestedObjectResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetSupportedDMResp.RequestedObjectResult'/3}).
'v_msg_GetSupportedDMResp.RequestedObjectResult'(#'GetSupportedDMResp.RequestedObjectResult'{req_obj_path
												 =
												 F1,
											     err_code
												 =
												 F2,
											     err_msg
												 =
												 F3,
											     data_model_inst_uri
												 =
												 F4,
											     supported_objs
												 =
												 F5},
						 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [req_obj_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [data_model_inst_uri | Path],
			 TrUserData)
    end,
    if is_list(F5) ->
	   _ =
	       ['v_msg_GetSupportedDMResp.SupportedObjectResult'(Elem,
								 [supported_objs
								  | Path],
								 TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetSupportedDMResp.SupportedObjectResult'}},
			 F5, [supported_objs | Path])
    end,
    ok;
'v_msg_GetSupportedDMResp.RequestedObjectResult'(X,
						 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetSupportedDMResp.RequestedObjectResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_GetSupportedDMResp.SupportedObjectResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetSupportedDMResp.SupportedObjectResult'/3}).
'v_msg_GetSupportedDMResp.SupportedObjectResult'(#'GetSupportedDMResp.SupportedObjectResult'{supported_obj_path
												 =
												 F1,
											     access
												 =
												 F2,
											     is_multi_instance
												 =
												 F3,
											     supported_commands
												 =
												 F4,
											     supported_events
												 =
												 F5,
											     supported_params
												 =
												 F6},
						 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [supported_obj_path | Path],
			 TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_GetSupportedDMResp.ObjAccessType'(F2,
						     [access | Path],
						     TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bool(F3, [is_multi_instance | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ =
	       ['v_msg_GetSupportedDMResp.SupportedCommandResult'(Elem,
								  [supported_commands
								   | Path],
								  TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetSupportedDMResp.SupportedCommandResult'}},
			 F4, [supported_commands | Path])
    end,
    if is_list(F5) ->
	   _ =
	       ['v_msg_GetSupportedDMResp.SupportedEventResult'(Elem,
								[supported_events
								 | Path],
								TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetSupportedDMResp.SupportedEventResult'}},
			 F5, [supported_events | Path])
    end,
    if is_list(F6) ->
	   _ =
	       ['v_msg_GetSupportedDMResp.SupportedParamResult'(Elem,
								[supported_params
								 | Path],
								TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetSupportedDMResp.SupportedParamResult'}},
			 F6, [supported_params | Path])
    end,
    ok;
'v_msg_GetSupportedDMResp.SupportedObjectResult'(X,
						 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetSupportedDMResp.SupportedObjectResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_GetSupportedDMResp.SupportedParamResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetSupportedDMResp.SupportedParamResult'/3}).
'v_msg_GetSupportedDMResp.SupportedParamResult'(#'GetSupportedDMResp.SupportedParamResult'{param_name
											       =
											       F1,
											   access
											       =
											       F2},
						Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [param_name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_enum_GetSupportedDMResp.ParamAccessType'(F2,
						       [access | Path],
						       TrUserData)
    end,
    ok;
'v_msg_GetSupportedDMResp.SupportedParamResult'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'GetSupportedDMResp.SupportedParamResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_GetSupportedDMResp.SupportedCommandResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetSupportedDMResp.SupportedCommandResult'/3}).
'v_msg_GetSupportedDMResp.SupportedCommandResult'(#'GetSupportedDMResp.SupportedCommandResult'{command_name
												   =
												   F1,
											       input_arg_names
												   =
												   F2,
											       output_arg_names
												   =
												   F3},
						  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [command_name | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [input_arg_names | Path],
			      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [input_arg_names | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [output_arg_names | Path],
			      TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3,
			 [output_arg_names | Path])
    end,
    ok;
'v_msg_GetSupportedDMResp.SupportedCommandResult'(X,
						  Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetSupportedDMResp.SupportedCommandResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_GetSupportedDMResp.SupportedEventResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetSupportedDMResp.SupportedEventResult'/3}).
'v_msg_GetSupportedDMResp.SupportedEventResult'(#'GetSupportedDMResp.SupportedEventResult'{event_name
											       =
											       F1,
											   arg_names
											       =
											       F2},
						Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [event_name | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [arg_names | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [arg_names | Path])
    end,
    ok;
'v_msg_GetSupportedDMResp.SupportedEventResult'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'GetSupportedDMResp.SupportedEventResult'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_GetSupportedDMResp/3}).
-dialyzer({nowarn_function,v_msg_GetSupportedDMResp/3}).
v_msg_GetSupportedDMResp(#'GetSupportedDMResp'{req_obj_results
						   = F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ =
	       ['v_msg_GetSupportedDMResp.RequestedObjectResult'(Elem,
								 [req_obj_results
								  | Path],
								 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetSupportedDMResp.RequestedObjectResult'}},
			 F1, [req_obj_results | Path])
    end,
    ok;
v_msg_GetSupportedDMResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetSupportedDMResp'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GetInstances/3}).
-dialyzer({nowarn_function,v_msg_GetInstances/3}).
v_msg_GetInstances(#'GetInstances'{obj_paths = F1,
				   first_level_only = F2},
		   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [obj_paths | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [obj_paths | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2, [first_level_only | Path], TrUserData)
    end,
    ok;
v_msg_GetInstances(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetInstances'}, X, Path).

-compile({nowarn_unused_function,'v_msg_GetInstancesResp.RequestedPathResult'/3}).
-dialyzer({nowarn_function,'v_msg_GetInstancesResp.RequestedPathResult'/3}).
'v_msg_GetInstancesResp.RequestedPathResult'(#'GetInstancesResp.RequestedPathResult'{requested_path
											 =
											 F1,
										     err_code
											 =
											 F2,
										     err_msg
											 =
											 F3,
										     curr_insts
											 =
											 F4},
					     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [requested_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = ['v_msg_GetInstancesResp.CurrInstance'(Elem,
						      [curr_insts | Path],
						      TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetInstancesResp.CurrInstance'}},
			 F4, [curr_insts | Path])
    end,
    ok;
'v_msg_GetInstancesResp.RequestedPathResult'(X, Path,
					     _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetInstancesResp.RequestedPathResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_GetInstancesResp.CurrInstance'/3}).
-dialyzer({nowarn_function,'v_msg_GetInstancesResp.CurrInstance'/3}).
'v_msg_GetInstancesResp.CurrInstance'(#'GetInstancesResp.CurrInstance'{instantiated_obj_path
									   = F1,
								       unique_keys
									   =
									   F2},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [instantiated_obj_path | Path],
			 TrUserData)
    end,
    'v_map<string,string>'(F2, [unique_keys | Path],
			   TrUserData),
    ok;
'v_msg_GetInstancesResp.CurrInstance'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetInstancesResp.CurrInstance'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_GetInstancesResp/3}).
-dialyzer({nowarn_function,v_msg_GetInstancesResp/3}).
v_msg_GetInstancesResp(#'GetInstancesResp'{req_path_results
					       = F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_GetInstancesResp.RequestedPathResult'(Elem,
							     [req_path_results
							      | Path],
							     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GetInstancesResp.RequestedPathResult'}},
			 F1, [req_path_results | Path])
    end,
    ok;
v_msg_GetInstancesResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetInstancesResp'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GetSupportedProtocol/3}).
-dialyzer({nowarn_function,v_msg_GetSupportedProtocol/3}).
v_msg_GetSupportedProtocol(#'GetSupportedProtocol'{controller_supported_protocol_versions
						       = F1},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1,
			 [controller_supported_protocol_versions | Path],
			 TrUserData)
    end,
    ok;
v_msg_GetSupportedProtocol(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetSupportedProtocol'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GetSupportedProtocolResp/3}).
-dialyzer({nowarn_function,v_msg_GetSupportedProtocolResp/3}).
v_msg_GetSupportedProtocolResp(#'GetSupportedProtocolResp'{agent_supported_protocol_versions
							       = F1},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1,
			 [agent_supported_protocol_versions | Path], TrUserData)
    end,
    ok;
v_msg_GetSupportedProtocolResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'GetSupportedProtocolResp'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_Add.CreateObject'/3}).
-dialyzer({nowarn_function,'v_msg_Add.CreateObject'/3}).
'v_msg_Add.CreateObject'(#'Add.CreateObject'{obj_path =
						 F1,
					     param_settings = F2},
			 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [obj_path | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_Add.CreateParamSetting'(Elem,
					       [param_settings | Path],
					       TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Add.CreateParamSetting'}},
			 F2, [param_settings | Path])
    end,
    ok;
'v_msg_Add.CreateObject'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Add.CreateObject'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_Add.CreateParamSetting'/3}).
-dialyzer({nowarn_function,'v_msg_Add.CreateParamSetting'/3}).
'v_msg_Add.CreateParamSetting'(#'Add.CreateParamSetting'{param
							     = F1,
							 value = F2,
							 required = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [param | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [required | Path], TrUserData)
    end,
    ok;
'v_msg_Add.CreateParamSetting'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Add.CreateParamSetting'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_Add/3}).
-dialyzer({nowarn_function,v_msg_Add/3}).
v_msg_Add(#'Add'{allow_partial = F1, create_objs = F2},
	  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bool(F1, [allow_partial | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_Add.CreateObject'(Elem,
					 [create_objs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Add.CreateObject'}},
			 F2, [create_objs | Path])
    end,
    ok;
v_msg_Add(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Add'}, X, Path).

-compile({nowarn_unused_function,'v_msg_AddResp.CreatedObjectResult'/3}).
-dialyzer({nowarn_function,'v_msg_AddResp.CreatedObjectResult'/3}).
'v_msg_AddResp.CreatedObjectResult'(#'AddResp.CreatedObjectResult'{requested_path
								       = F1,
								   oper_status =
								       F2},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [requested_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_AddResp.CreatedObjectResult.OperationStatus'(F2,
							       [oper_status
								| Path],
							       TrUserData)
    end,
    ok;
'v_msg_AddResp.CreatedObjectResult'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'AddResp.CreatedObjectResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'/3}).
-dialyzer({nowarn_function,'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'/3}).
'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(#'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'{err_code
																	 =
																	 F1,
																     err_msg
																	 =
																	 F2},
								     Path,
								     TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed32(F1, [err_code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(X,
								     Path,
								     _TrUserData) ->
    mk_type_error({expected_msg,
		   'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'/3}).
-dialyzer({nowarn_function,'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'/3}).
'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(#'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'{instantiated_path
																	 =
																	 F1,
																     param_errs
																	 =
																	 F2,
																     unique_keys
																	 =
																	 F3},
								     Path,
								     TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [instantiated_path | Path],
			 TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_AddResp.ParameterError'(Elem,
					       [param_errs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'AddResp.ParameterError'}},
			 F2, [param_errs | Path])
    end,
    'v_map<string,string>'(F3, [unique_keys | Path],
			   TrUserData),
    ok;
'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(X,
								     Path,
								     _TrUserData) ->
    mk_type_error({expected_msg,
		   'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_AddResp.CreatedObjectResult.OperationStatus'/3}).
-dialyzer({nowarn_function,'v_msg_AddResp.CreatedObjectResult.OperationStatus'/3}).
'v_msg_AddResp.CreatedObjectResult.OperationStatus'(#'AddResp.CreatedObjectResult.OperationStatus'{oper_status
												       =
												       F1},
						    Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {oper_failure, OF1} ->
	  'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationFailure'(OF1,
									       [oper_failure,
										oper_status
										| Path],
									       TrUserData);
      {oper_success, OF1} ->
	  'v_msg_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'(OF1,
									       [oper_success,
										oper_status
										| Path],
									       TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F1, [oper_status | Path])
    end,
    ok;
'v_msg_AddResp.CreatedObjectResult.OperationStatus'(X,
						    Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'AddResp.CreatedObjectResult.OperationStatus'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_AddResp.ParameterError'/3}).
-dialyzer({nowarn_function,'v_msg_AddResp.ParameterError'/3}).
'v_msg_AddResp.ParameterError'(#'AddResp.ParameterError'{param
							     = F1,
							 err_code = F2,
							 err_msg = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [param | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_AddResp.ParameterError'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddResp.ParameterError'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_AddResp/3}).
-dialyzer({nowarn_function,v_msg_AddResp/3}).
v_msg_AddResp(#'AddResp'{created_obj_results = F1},
	      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_AddResp.CreatedObjectResult'(Elem,
						    [created_obj_results
						     | Path],
						    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'AddResp.CreatedObjectResult'}},
			 F1, [created_obj_results | Path])
    end,
    ok;
v_msg_AddResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_Delete/3}).
-dialyzer({nowarn_function,v_msg_Delete/3}).
v_msg_Delete(#'Delete'{allow_partial = F1,
		       obj_paths = F2},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bool(F1, [allow_partial | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [obj_paths | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [obj_paths | Path])
    end,
    ok;
v_msg_Delete(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Delete'}, X, Path).

-compile({nowarn_unused_function,'v_msg_DeleteResp.DeletedObjectResult'/3}).
-dialyzer({nowarn_function,'v_msg_DeleteResp.DeletedObjectResult'/3}).
'v_msg_DeleteResp.DeletedObjectResult'(#'DeleteResp.DeletedObjectResult'{requested_path
									     =
									     F1,
									 oper_status
									     =
									     F2},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [requested_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_DeleteResp.DeletedObjectResult.OperationStatus'(F2,
								  [oper_status
								   | Path],
								  TrUserData)
    end,
    ok;
'v_msg_DeleteResp.DeletedObjectResult'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'DeleteResp.DeletedObjectResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'/3}).
-dialyzer({nowarn_function,'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'/3}).
'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(#'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'{err_code
																	       =
																	       F1,
																	   err_msg
																	       =
																	       F2},
									Path,
									TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed32(F1, [err_code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(X,
									Path,
									_TrUserData) ->
    mk_type_error({expected_msg,
		   'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'/3}).
-dialyzer({nowarn_function,'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'/3}).
'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(#'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'{affected_paths
																	       =
																	       F1,
																	   unaffected_path_errs
																	       =
																	       F2},
									Path,
									TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [affected_paths | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [affected_paths | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_DeleteResp.UnaffectedPathError'(Elem,
						       [unaffected_path_errs
							| Path],
						       TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DeleteResp.UnaffectedPathError'}},
			 F2, [unaffected_path_errs | Path])
    end,
    ok;
'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(X,
									Path,
									_TrUserData) ->
    mk_type_error({expected_msg,
		   'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_DeleteResp.DeletedObjectResult.OperationStatus'/3}).
-dialyzer({nowarn_function,'v_msg_DeleteResp.DeletedObjectResult.OperationStatus'/3}).
'v_msg_DeleteResp.DeletedObjectResult.OperationStatus'(#'DeleteResp.DeletedObjectResult.OperationStatus'{oper_status
													     =
													     F1},
						       Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {oper_failure, OF1} ->
	  'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'(OF1,
										  [oper_failure,
										   oper_status
										   | Path],
										  TrUserData);
      {oper_success, OF1} ->
	  'v_msg_DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'(OF1,
										  [oper_success,
										   oper_status
										   | Path],
										  TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F1, [oper_status | Path])
    end,
    ok;
'v_msg_DeleteResp.DeletedObjectResult.OperationStatus'(X,
						       Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'DeleteResp.DeletedObjectResult.OperationStatus'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_DeleteResp.UnaffectedPathError'/3}).
-dialyzer({nowarn_function,'v_msg_DeleteResp.UnaffectedPathError'/3}).
'v_msg_DeleteResp.UnaffectedPathError'(#'DeleteResp.UnaffectedPathError'{unaffected_path
									     =
									     F1,
									 err_code
									     =
									     F2,
									 err_msg
									     =
									     F3},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [unaffected_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_DeleteResp.UnaffectedPathError'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'DeleteResp.UnaffectedPathError'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_DeleteResp/3}).
-dialyzer({nowarn_function,v_msg_DeleteResp/3}).
v_msg_DeleteResp(#'DeleteResp'{deleted_obj_results =
				   F1},
		 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_DeleteResp.DeletedObjectResult'(Elem,
						       [deleted_obj_results
							| Path],
						       TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DeleteResp.DeletedObjectResult'}},
			 F1, [deleted_obj_results | Path])
    end,
    ok;
v_msg_DeleteResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteResp'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Set.UpdateObject'/3}).
-dialyzer({nowarn_function,'v_msg_Set.UpdateObject'/3}).
'v_msg_Set.UpdateObject'(#'Set.UpdateObject'{obj_path =
						 F1,
					     param_settings = F2},
			 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [obj_path | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_Set.UpdateParamSetting'(Elem,
					       [param_settings | Path],
					       TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Set.UpdateParamSetting'}},
			 F2, [param_settings | Path])
    end,
    ok;
'v_msg_Set.UpdateObject'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Set.UpdateObject'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_Set.UpdateParamSetting'/3}).
-dialyzer({nowarn_function,'v_msg_Set.UpdateParamSetting'/3}).
'v_msg_Set.UpdateParamSetting'(#'Set.UpdateParamSetting'{param
							     = F1,
							 value = F2,
							 required = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [param | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [required | Path], TrUserData)
    end,
    ok;
'v_msg_Set.UpdateParamSetting'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Set.UpdateParamSetting'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_Set/3}).
-dialyzer({nowarn_function,v_msg_Set/3}).
v_msg_Set(#'Set'{allow_partial = F1, update_objs = F2},
	  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bool(F1, [allow_partial | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_Set.UpdateObject'(Elem,
					 [update_objs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Set.UpdateObject'}},
			 F2, [update_objs | Path])
    end,
    ok;
v_msg_Set(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Set'}, X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.UpdatedObjectResult'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.UpdatedObjectResult'/3}).
'v_msg_SetResp.UpdatedObjectResult'(#'SetResp.UpdatedObjectResult'{requested_path
								       = F1,
								   oper_status =
								       F2},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [requested_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_SetResp.UpdatedObjectResult.OperationStatus'(F2,
							       [oper_status
								| Path],
							       TrUserData)
    end,
    ok;
'v_msg_SetResp.UpdatedObjectResult'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'SetResp.UpdatedObjectResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'/3}).
'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(#'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'{err_code
																	 =
																	 F1,
																     err_msg
																	 =
																	 F2,
																     updated_inst_failures
																	 =
																	 F3},
								     Path,
								     TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed32(F1, [err_code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [err_msg | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = ['v_msg_SetResp.UpdatedInstanceFailure'(Elem,
						       [updated_inst_failures
							| Path],
						       TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SetResp.UpdatedInstanceFailure'}},
			 F3, [updated_inst_failures | Path])
    end,
    ok;
'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(X,
								     Path,
								     _TrUserData) ->
    mk_type_error({expected_msg,
		   'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'/3}).
'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(#'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'{updated_inst_results
																	 =
																	 F1},
								     Path,
								     TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_SetResp.UpdatedInstanceResult'(Elem,
						      [updated_inst_results
						       | Path],
						      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SetResp.UpdatedInstanceResult'}},
			 F1, [updated_inst_results | Path])
    end,
    ok;
'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(X,
								     Path,
								     _TrUserData) ->
    mk_type_error({expected_msg,
		   'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.UpdatedObjectResult.OperationStatus'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.UpdatedObjectResult.OperationStatus'/3}).
'v_msg_SetResp.UpdatedObjectResult.OperationStatus'(#'SetResp.UpdatedObjectResult.OperationStatus'{oper_status
												       =
												       F1},
						    Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {oper_failure, OF1} ->
	  'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'(OF1,
									       [oper_failure,
										oper_status
										| Path],
									       TrUserData);
      {oper_success, OF1} ->
	  'v_msg_SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'(OF1,
									       [oper_success,
										oper_status
										| Path],
									       TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F1, [oper_status | Path])
    end,
    ok;
'v_msg_SetResp.UpdatedObjectResult.OperationStatus'(X,
						    Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'SetResp.UpdatedObjectResult.OperationStatus'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.UpdatedInstanceFailure'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.UpdatedInstanceFailure'/3}).
'v_msg_SetResp.UpdatedInstanceFailure'(#'SetResp.UpdatedInstanceFailure'{affected_path
									     =
									     F1,
									 param_errs
									     =
									     F2},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [affected_path | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_SetResp.ParameterError'(Elem,
					       [param_errs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SetResp.ParameterError'}},
			 F2, [param_errs | Path])
    end,
    ok;
'v_msg_SetResp.UpdatedInstanceFailure'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'SetResp.UpdatedInstanceFailure'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.UpdatedInstanceResult'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.UpdatedInstanceResult'/3}).
'v_msg_SetResp.UpdatedInstanceResult'(#'SetResp.UpdatedInstanceResult'{affected_path
									   = F1,
								       param_errs
									   = F2,
								       updated_params
									   =
									   F3},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [affected_path | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_SetResp.ParameterError'(Elem,
					       [param_errs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SetResp.ParameterError'}},
			 F2, [param_errs | Path])
    end,
    'v_map<string,string>'(F3, [updated_params | Path],
			   TrUserData),
    ok;
'v_msg_SetResp.UpdatedInstanceResult'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'SetResp.UpdatedInstanceResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_SetResp.ParameterError'/3}).
-dialyzer({nowarn_function,'v_msg_SetResp.ParameterError'/3}).
'v_msg_SetResp.ParameterError'(#'SetResp.ParameterError'{param
							     = F1,
							 err_code = F2,
							 err_msg = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [param | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_fixed32(F2, [err_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_SetResp.ParameterError'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SetResp.ParameterError'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_SetResp/3}).
-dialyzer({nowarn_function,v_msg_SetResp/3}).
v_msg_SetResp(#'SetResp'{updated_obj_results = F1},
	      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_SetResp.UpdatedObjectResult'(Elem,
						    [updated_obj_results
						     | Path],
						    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SetResp.UpdatedObjectResult'}},
			 F1, [updated_obj_results | Path])
    end,
    ok;
v_msg_SetResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SetResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_Operate/3}).
-dialyzer({nowarn_function,v_msg_Operate/3}).
v_msg_Operate(#'Operate'{command = F1, command_key = F2,
			 send_resp = F3, input_args = F4},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [command | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [command_key | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [send_resp | Path], TrUserData)
    end,
    'v_map<string,string>'(F4, [input_args | Path],
			   TrUserData),
    ok;
v_msg_Operate(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Operate'}, X, Path).

-compile({nowarn_unused_function,'v_msg_OperateResp.OperationResult'/3}).
-dialyzer({nowarn_function,'v_msg_OperateResp.OperationResult'/3}).
'v_msg_OperateResp.OperationResult'(#'OperateResp.OperationResult'{executed_command
								       = F1,
								   operation_resp
								       = F2},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [executed_command | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {req_obj_path, OF2} ->
	  v_type_string(OF2,
			[req_obj_path, operation_resp | Path], TrUserData);
      {req_output_args, OF2} ->
	  'v_msg_OperateResp.OperationResult.OutputArgs'(OF2,
							 [req_output_args,
							  operation_resp
							  | Path],
							 TrUserData);
      {cmd_failure, OF2} ->
	  'v_msg_OperateResp.OperationResult.CommandFailure'(OF2,
							     [cmd_failure,
							      operation_resp
							      | Path],
							     TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F2,
			[operation_resp | Path])
    end,
    ok;
'v_msg_OperateResp.OperationResult'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'OperateResp.OperationResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_OperateResp.OperationResult.CommandFailure'/3}).
-dialyzer({nowarn_function,'v_msg_OperateResp.OperationResult.CommandFailure'/3}).
'v_msg_OperateResp.OperationResult.CommandFailure'(#'OperateResp.OperationResult.CommandFailure'{err_code
												     =
												     F1,
												 err_msg
												     =
												     F2},
						   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed32(F1, [err_code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_OperateResp.OperationResult.CommandFailure'(X,
						   Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'OperateResp.OperationResult.CommandFailure'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_OperateResp.OperationResult.OutputArgs'/3}).
-dialyzer({nowarn_function,'v_msg_OperateResp.OperationResult.OutputArgs'/3}).
'v_msg_OperateResp.OperationResult.OutputArgs'(#'OperateResp.OperationResult.OutputArgs'{output_args
											     =
											     F1},
					       Path, TrUserData) ->
    'v_map<string,string>'(F1, [output_args | Path],
			   TrUserData),
    ok;
'v_msg_OperateResp.OperationResult.OutputArgs'(X, Path,
					       _TrUserData) ->
    mk_type_error({expected_msg,
		   'OperateResp.OperationResult.OutputArgs'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_OperateResp/3}).
-dialyzer({nowarn_function,v_msg_OperateResp/3}).
v_msg_OperateResp(#'OperateResp'{operation_results =
				     F1},
		  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_OperateResp.OperationResult'(Elem,
						    [operation_results | Path],
						    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'OperateResp.OperationResult'}},
			 F1, [operation_results | Path])
    end,
    ok;
v_msg_OperateResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OperateResp'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.Event'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.Event'/3}).
'v_msg_Notify.Event'(#'Notify.Event'{obj_path = F1,
				     event_name = F2, params = F3},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [obj_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [event_name | Path], TrUserData)
    end,
    'v_map<string,string>'(F3, [params | Path], TrUserData),
    ok;
'v_msg_Notify.Event'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notify.Event'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.ValueChange'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.ValueChange'/3}).
'v_msg_Notify.ValueChange'(#'Notify.ValueChange'{param_path
						     = F1,
						 param_value = F2},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [param_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [param_value | Path], TrUserData)
    end,
    ok;
'v_msg_Notify.ValueChange'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notify.ValueChange'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_Notify.ObjectCreation'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.ObjectCreation'/3}).
'v_msg_Notify.ObjectCreation'(#'Notify.ObjectCreation'{obj_path
							   = F1,
						       unique_keys = F2},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [obj_path | Path], TrUserData)
    end,
    'v_map<string,string>'(F2, [unique_keys | Path],
			   TrUserData),
    ok;
'v_msg_Notify.ObjectCreation'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notify.ObjectCreation'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.ObjectDeletion'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.ObjectDeletion'/3}).
'v_msg_Notify.ObjectDeletion'(#'Notify.ObjectDeletion'{obj_path
							   = F1},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [obj_path | Path], TrUserData)
    end,
    ok;
'v_msg_Notify.ObjectDeletion'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notify.ObjectDeletion'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.OperationComplete'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.OperationComplete'/3}).
'v_msg_Notify.OperationComplete'(#'Notify.OperationComplete'{obj_path
								 = F1,
							     command_name = F2,
							     command_key = F3,
							     operation_resp =
								 F4},
				 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [obj_path | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [command_name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [command_key | Path], TrUserData)
    end,
    case F4 of
      undefined -> ok;
      {req_output_args, OF4} ->
	  'v_msg_Notify.OperationComplete.OutputArgs'(OF4,
						      [req_output_args,
						       operation_resp
						       | Path],
						      TrUserData);
      {cmd_failure, OF4} ->
	  'v_msg_Notify.OperationComplete.CommandFailure'(OF4,
							  [cmd_failure,
							   operation_resp
							   | Path],
							  TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F4,
			[operation_resp | Path])
    end,
    ok;
'v_msg_Notify.OperationComplete'(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'Notify.OperationComplete'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.OperationComplete.CommandFailure'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.OperationComplete.CommandFailure'/3}).
'v_msg_Notify.OperationComplete.CommandFailure'(#'Notify.OperationComplete.CommandFailure'{err_code
											       =
											       F1,
											   err_msg
											       =
											       F2},
						Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed32(F1, [err_code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [err_msg | Path], TrUserData)
    end,
    ok;
'v_msg_Notify.OperationComplete.CommandFailure'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'Notify.OperationComplete.CommandFailure'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.OperationComplete.OutputArgs'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.OperationComplete.OutputArgs'/3}).
'v_msg_Notify.OperationComplete.OutputArgs'(#'Notify.OperationComplete.OutputArgs'{output_args
										       =
										       F1},
					    Path, TrUserData) ->
    'v_map<string,string>'(F1, [output_args | Path],
			   TrUserData),
    ok;
'v_msg_Notify.OperationComplete.OutputArgs'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'Notify.OperationComplete.OutputArgs'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_Notify.OnBoardRequest'/3}).
-dialyzer({nowarn_function,'v_msg_Notify.OnBoardRequest'/3}).
'v_msg_Notify.OnBoardRequest'(#'Notify.OnBoardRequest'{oui
							   = F1,
						       product_class = F2,
						       serial_number = F3,
						       agent_supported_protocol_versions
							   = F4},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [oui | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [product_class | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [serial_number | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4,
			 [agent_supported_protocol_versions | Path], TrUserData)
    end,
    ok;
'v_msg_Notify.OnBoardRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notify.OnBoardRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_Notify/3}).
-dialyzer({nowarn_function,v_msg_Notify/3}).
v_msg_Notify(#'Notify'{subscription_id = F1,
		       send_resp = F2, notification = F3},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [subscription_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [send_resp | Path], TrUserData)
    end,
    case F3 of
      undefined -> ok;
      {event, OF3} ->
	  'v_msg_Notify.Event'(OF3, [event, notification | Path],
			       TrUserData);
      {value_change, OF3} ->
	  'v_msg_Notify.ValueChange'(OF3,
				     [value_change, notification | Path],
				     TrUserData);
      {obj_creation, OF3} ->
	  'v_msg_Notify.ObjectCreation'(OF3,
					[obj_creation, notification | Path],
					TrUserData);
      {obj_deletion, OF3} ->
	  'v_msg_Notify.ObjectDeletion'(OF3,
					[obj_deletion, notification | Path],
					TrUserData);
      {oper_complete, OF3} ->
	  'v_msg_Notify.OperationComplete'(OF3,
					   [oper_complete, notification | Path],
					   TrUserData);
      {on_board_req, OF3} ->
	  'v_msg_Notify.OnBoardRequest'(OF3,
					[on_board_req, notification | Path],
					TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F3, [notification | Path])
    end,
    ok;
v_msg_Notify(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notify'}, X, Path).

-compile({nowarn_unused_function,v_msg_NotifyResp/3}).
-dialyzer({nowarn_function,v_msg_NotifyResp/3}).
v_msg_NotifyResp(#'NotifyResp'{subscription_id = F1},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [subscription_id | Path], TrUserData)
    end,
    ok;
v_msg_NotifyResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NotifyResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_DoubleValue/3}).
-dialyzer({nowarn_function,v_msg_DoubleValue/3}).
v_msg_DoubleValue(#'DoubleValue'{value = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_DoubleValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DoubleValue'}, X, Path).

-compile({nowarn_unused_function,v_msg_FloatValue/3}).
-dialyzer({nowarn_function,v_msg_FloatValue/3}).
v_msg_FloatValue(#'FloatValue'{value = F1}, Path,
		 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_float(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_FloatValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FloatValue'}, X, Path).

-compile({nowarn_unused_function,v_msg_Int64Value/3}).
-dialyzer({nowarn_function,v_msg_Int64Value/3}).
v_msg_Int64Value(#'Int64Value'{value = F1}, Path,
		 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_Int64Value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Int64Value'}, X, Path).

-compile({nowarn_unused_function,v_msg_UInt64Value/3}).
-dialyzer({nowarn_function,v_msg_UInt64Value/3}).
v_msg_UInt64Value(#'UInt64Value'{value = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_UInt64Value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UInt64Value'}, X, Path).

-compile({nowarn_unused_function,v_msg_Int32Value/3}).
-dialyzer({nowarn_function,v_msg_Int32Value/3}).
v_msg_Int32Value(#'Int32Value'{value = F1}, Path,
		 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_Int32Value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Int32Value'}, X, Path).

-compile({nowarn_unused_function,v_msg_UInt32Value/3}).
-dialyzer({nowarn_function,v_msg_UInt32Value/3}).
v_msg_UInt32Value(#'UInt32Value'{value = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_UInt32Value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UInt32Value'}, X, Path).

-compile({nowarn_unused_function,v_msg_BoolValue/3}).
-dialyzer({nowarn_function,v_msg_BoolValue/3}).
v_msg_BoolValue(#'BoolValue'{value = F1}, Path,
		TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_BoolValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BoolValue'}, X, Path).

-compile({nowarn_unused_function,v_msg_StringValue/3}).
-dialyzer({nowarn_function,v_msg_StringValue/3}).
v_msg_StringValue(#'StringValue'{value = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_StringValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StringValue'}, X, Path).

-compile({nowarn_unused_function,v_msg_BytesValue/3}).
-dialyzer({nowarn_function,v_msg_BytesValue/3}).
v_msg_BytesValue(#'BytesValue'{value = F1}, Path,
		 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_BytesValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BytesValue'}, X, Path).

-compile({nowarn_unused_function,'v_enum_Record.PayloadSecurity'/3}).
-dialyzer({nowarn_function,'v_enum_Record.PayloadSecurity'/3}).
'v_enum_Record.PayloadSecurity'('PLAINTEXT', _Path,
				_TrUserData) ->
    ok;
'v_enum_Record.PayloadSecurity'('TLS12', _Path,
				_TrUserData) ->
    ok;
'v_enum_Record.PayloadSecurity'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Record.PayloadSecurity'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Record.PayloadSecurity'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_SessionContextRecord.PayloadSARState'/3}).
-dialyzer({nowarn_function,'v_enum_SessionContextRecord.PayloadSARState'/3}).
'v_enum_SessionContextRecord.PayloadSARState'('NONE',
					      _Path, _TrUserData) ->
    ok;
'v_enum_SessionContextRecord.PayloadSARState'('BEGIN',
					      _Path, _TrUserData) ->
    ok;
'v_enum_SessionContextRecord.PayloadSARState'('INPROCESS',
					      _Path, _TrUserData) ->
    ok;
'v_enum_SessionContextRecord.PayloadSARState'('COMPLETE',
					      _Path, _TrUserData) ->
    ok;
'v_enum_SessionContextRecord.PayloadSARState'(V, Path,
					      TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_SessionContextRecord.PayloadSARState'(X, Path,
					      _TrUserData) ->
    mk_type_error({invalid_enum,
		   'SessionContextRecord.PayloadSARState'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Header.MsgType'/3}).
-dialyzer({nowarn_function,'v_enum_Header.MsgType'/3}).
'v_enum_Header.MsgType'('ERROR', _Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET', _Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('NOTIFY', _Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'('SET', _Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'('SET_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('OPERATE', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('OPERATE_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('ADD', _Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'('ADD_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('DELETE', _Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'('DELETE_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_SUPPORTED_DM', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_SUPPORTED_DM_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_INSTANCES', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_INSTANCES_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('NOTIFY_RESP', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_SUPPORTED_PROTO', _Path,
			_TrUserData) ->
    ok;
'v_enum_Header.MsgType'('GET_SUPPORTED_PROTO_RESP',
			_Path, _TrUserData) ->
    ok;
'v_enum_Header.MsgType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Header.MsgType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Header.MsgType'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_GetSupportedDMResp.ParamAccessType'/3}).
-dialyzer({nowarn_function,'v_enum_GetSupportedDMResp.ParamAccessType'/3}).
'v_enum_GetSupportedDMResp.ParamAccessType'('PARAM_READ_ONLY',
					    _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ParamAccessType'('PARAM_READ_WRITE',
					    _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ParamAccessType'('PARAM_WRITE_ONLY',
					    _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ParamAccessType'(V, Path,
					    TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_GetSupportedDMResp.ParamAccessType'(X, Path,
					    _TrUserData) ->
    mk_type_error({invalid_enum,
		   'GetSupportedDMResp.ParamAccessType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_GetSupportedDMResp.ObjAccessType'/3}).
-dialyzer({nowarn_function,'v_enum_GetSupportedDMResp.ObjAccessType'/3}).
'v_enum_GetSupportedDMResp.ObjAccessType'('OBJ_READ_ONLY',
					  _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ObjAccessType'('OBJ_ADD_DELETE',
					  _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ObjAccessType'('OBJ_ADD_ONLY',
					  _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ObjAccessType'('OBJ_DELETE_ONLY',
					  _Path, _TrUserData) ->
    ok;
'v_enum_GetSupportedDMResp.ObjAccessType'(V, Path,
					  TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_GetSupportedDMResp.ObjAccessType'(X, Path,
					  _TrUserData) ->
    mk_type_error({invalid_enum,
		   'GetSupportedDMResp.ObjAccessType'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed32/3}).
-dialyzer({nowarn_function,v_type_fixed32/3}).
v_type_fixed32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_fixed32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed32, unsigned,
		   32},
		  N, Path);
v_type_fixed32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path], TrUserData),
	   v_type_string(Value, [value | Path], TrUserData);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys[x]'/2}).
'tr_encode_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys[x]'(X,
											_) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_OperateResp.OperationResult.OutputArgs.output_args[x]'/2}).
'tr_encode_OperateResp.OperationResult.OutputArgs.output_args[x]'(X,
								  _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_Notify.OperationComplete.OutputArgs.output_args[x]'/2}).
'tr_encode_Notify.OperationComplete.OutputArgs.output_args[x]'(X,
							       _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_decode_init_default_GetInstancesResp.CurrInstance.unique_keys'/2}).
'tr_decode_init_default_GetInstancesResp.CurrInstance.unique_keys'(_,
								   _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_GetInstancesResp.CurrInstance.unique_keys'/3}).
'tr_merge_GetInstancesResp.CurrInstance.unique_keys'(X1,
						     X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_GetInstancesResp.CurrInstance.unique_keys'/2}).
'tr_decode_repeated_finalize_GetInstancesResp.CurrInstance.unique_keys'(L,
									_) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_GetInstancesResp.CurrInstance.unique_keys'/3}).
'tr_decode_repeated_add_elem_GetInstancesResp.CurrInstance.unique_keys'(Elem,
									L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_Operate.input_args'/2}).
'tr_decode_init_default_Operate.input_args'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Operate.input_args'/3}).
'tr_merge_Operate.input_args'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Operate.input_args'/2}).
'tr_decode_repeated_finalize_Operate.input_args'(L,
						 _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Operate.input_args'/3}).
'tr_decode_repeated_add_elem_Operate.input_args'(Elem,
						 L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_GetResp.ResolvedPathResult.result_params'/2}).
'tr_decode_init_default_GetResp.ResolvedPathResult.result_params'(_,
								  _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_GetResp.ResolvedPathResult.result_params'/3}).
'tr_merge_GetResp.ResolvedPathResult.result_params'(X1,
						    X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_GetResp.ResolvedPathResult.result_params'/2}).
'tr_decode_repeated_finalize_GetResp.ResolvedPathResult.result_params'(L,
								       _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_GetResp.ResolvedPathResult.result_params'/3}).
'tr_decode_repeated_add_elem_GetResp.ResolvedPathResult.result_params'(Elem,
								       L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_SetResp.UpdatedInstanceResult.updated_params'/2}).
'tr_decode_init_default_SetResp.UpdatedInstanceResult.updated_params'(_,
								      _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_SetResp.UpdatedInstanceResult.updated_params'/3}).
'tr_merge_SetResp.UpdatedInstanceResult.updated_params'(X1,
							X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_SetResp.UpdatedInstanceResult.updated_params'/2}).
'tr_decode_repeated_finalize_SetResp.UpdatedInstanceResult.updated_params'(L,
									   _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_SetResp.UpdatedInstanceResult.updated_params'/3}).
'tr_decode_repeated_add_elem_SetResp.UpdatedInstanceResult.updated_params'(Elem,
									   L,
									   _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_Notify.Event.params'/2}).
'tr_decode_init_default_Notify.Event.params'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Notify.Event.params'/3}).
'tr_merge_Notify.Event.params'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Notify.Event.params'/2}).
'tr_decode_repeated_finalize_Notify.Event.params'(L,
						  _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Notify.Event.params'/3}).
'tr_decode_repeated_add_elem_Notify.Event.params'(Elem,
						  L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'/2}).
'tr_decode_init_default_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(_,
												  _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'/3}).
'tr_merge_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(X1,
										    X2,
										    _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'/2}).
'tr_decode_repeated_finalize_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(L,
												       _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'/3}).
'tr_decode_repeated_add_elem_AddResp.CreatedObjectResult.OperationStatus.OperationSuccess.unique_keys'(Elem,
												       L,
												       _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_OperateResp.OperationResult.OutputArgs.output_args'/2}).
'tr_decode_init_default_OperateResp.OperationResult.OutputArgs.output_args'(_,
									    _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_OperateResp.OperationResult.OutputArgs.output_args'/3}).
'tr_merge_OperateResp.OperationResult.OutputArgs.output_args'(X1,
							      X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_OperateResp.OperationResult.OutputArgs.output_args'/2}).
'tr_decode_repeated_finalize_OperateResp.OperationResult.OutputArgs.output_args'(L,
										 _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_OperateResp.OperationResult.OutputArgs.output_args'/3}).
'tr_decode_repeated_add_elem_OperateResp.OperationResult.OutputArgs.output_args'(Elem,
										 L,
										 _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_Notify.OperationComplete.OutputArgs.output_args'/2}).
'tr_decode_init_default_Notify.OperationComplete.OutputArgs.output_args'(_,
									 _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Notify.OperationComplete.OutputArgs.output_args'/3}).
'tr_merge_Notify.OperationComplete.OutputArgs.output_args'(X1,
							   X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Notify.OperationComplete.OutputArgs.output_args'/2}).
'tr_decode_repeated_finalize_Notify.OperationComplete.OutputArgs.output_args'(L,
									      _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Notify.OperationComplete.OutputArgs.output_args'/3}).
'tr_decode_repeated_add_elem_Notify.OperationComplete.OutputArgs.output_args'(Elem,
									      L,
									      _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_Notify.ObjectCreation.unique_keys'/2}).
'tr_decode_init_default_Notify.ObjectCreation.unique_keys'(_,
							   _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Notify.ObjectCreation.unique_keys'/3}).
'tr_merge_Notify.ObjectCreation.unique_keys'(X1, X2,
					     _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Notify.ObjectCreation.unique_keys'/2}).
'tr_decode_repeated_finalize_Notify.ObjectCreation.unique_keys'(L,
								_) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Notify.ObjectCreation.unique_keys'/3}).
'tr_decode_repeated_add_elem_Notify.ObjectCreation.unique_keys'(Elem,
								L, _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_encode_GetInstancesResp.CurrInstance.unique_keys[x]'/2}).
'tr_encode_GetInstancesResp.CurrInstance.unique_keys[x]'(X,
							 _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_Operate.input_args[x]'/2}).
'tr_encode_Operate.input_args[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_GetResp.ResolvedPathResult.result_params[x]'/2}).
'tr_encode_GetResp.ResolvedPathResult.result_params[x]'(X,
							_) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_SetResp.UpdatedInstanceResult.updated_params[x]'/2}).
'tr_encode_SetResp.UpdatedInstanceResult.updated_params[x]'(X,
							    _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_Notify.Event.params[x]'/2}).
'tr_encode_Notify.Event.params[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_Notify.ObjectCreation.unique_keys[x]'/2}).
'tr_encode_Notify.ObjectCreation.unique_keys[x]'(X,
						 _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> [].

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, Acc) -> [{K, V} | Acc].


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(Acc) ->
    mt_finalize_items_r_aux(lists:reverse(Acc), dict:new()).

mt_finalize_items_r_aux([{K, V} | Tl], D) ->
    mt_finalize_items_r_aux(Tl, dict:store(K, V, D));
mt_finalize_items_r_aux([], D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).




get_msg_defs() ->
    [{{enum, 'Record.PayloadSecurity'},
      [{'PLAINTEXT', 0}, {'TLS12', 1}]},
     {{enum, 'SessionContextRecord.PayloadSARState'},
      [{'NONE', 0}, {'BEGIN', 1}, {'INPROCESS', 2},
       {'COMPLETE', 3}]},
     {{enum, 'Header.MsgType'},
      [{'ERROR', 0}, {'GET', 1}, {'GET_RESP', 2},
       {'NOTIFY', 3}, {'SET', 4}, {'SET_RESP', 5},
       {'OPERATE', 6}, {'OPERATE_RESP', 7}, {'ADD', 8},
       {'ADD_RESP', 9}, {'DELETE', 10}, {'DELETE_RESP', 11},
       {'GET_SUPPORTED_DM', 12}, {'GET_SUPPORTED_DM_RESP', 13},
       {'GET_INSTANCES', 14}, {'GET_INSTANCES_RESP', 15},
       {'NOTIFY_RESP', 16}, {'GET_SUPPORTED_PROTO', 17},
       {'GET_SUPPORTED_PROTO_RESP', 18}]},
     {{enum, 'GetSupportedDMResp.ParamAccessType'},
      [{'PARAM_READ_ONLY', 0}, {'PARAM_READ_WRITE', 1},
       {'PARAM_WRITE_ONLY', 2}]},
     {{enum, 'GetSupportedDMResp.ObjAccessType'},
      [{'OBJ_READ_ONLY', 0}, {'OBJ_ADD_DELETE', 1},
       {'OBJ_ADD_ONLY', 2}, {'OBJ_DELETE_ONLY', 3}]},
     {{msg, 'Record'},
      [#field{name = version, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = to_id, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = from_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = payload_security, fnum = 4, rnum = 5,
	      type = {enum, 'Record.PayloadSecurity'},
	      occurrence = optional, opts = []},
       #field{name = mac_signature, fnum = 5, rnum = 6,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = sender_cert, fnum = 6, rnum = 7,
	      type = bytes, occurrence = optional, opts = []},
       #gpb_oneof{name = record_type, rnum = 8,
		  fields =
		      [#field{name = no_session_context, fnum = 7, rnum = 8,
			      type = {msg, 'NoSessionContextRecord'},
			      occurrence = optional, opts = []},
		       #field{name = session_context, fnum = 8, rnum = 8,
			      type = {msg, 'SessionContextRecord'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'NoSessionContextRecord'},
      [#field{name = payload, fnum = 2, rnum = 2,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'SessionContextRecord'},
      [#field{name = session_id, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = sequence_id, fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = expected_id, fnum = 3, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = retransmit_id, fnum = 4, rnum = 5,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = payload_sar_state, fnum = 5, rnum = 6,
	      type = {enum, 'SessionContextRecord.PayloadSARState'},
	      occurrence = optional, opts = []},
       #field{name = payloadrec_sar_state, fnum = 6, rnum = 7,
	      type = {enum, 'SessionContextRecord.PayloadSARState'},
	      occurrence = optional, opts = []},
       #field{name = payload, fnum = 7, rnum = 8, type = bytes,
	      occurrence = repeated, opts = []}]},
     {{msg, 'Msg'},
      [#field{name = header, fnum = 1, rnum = 2,
	      type = {msg, 'Header'}, occurrence = optional,
	      opts = []},
       #field{name = body, fnum = 2, rnum = 3,
	      type = {msg, 'Body'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Header'},
      [#field{name = msg_id, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = msg_type, fnum = 2, rnum = 3,
	      type = {enum, 'Header.MsgType'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Body'},
      [#gpb_oneof{name = msg_body, rnum = 2,
		  fields =
		      [#field{name = request, fnum = 1, rnum = 2,
			      type = {msg, 'Request'}, occurrence = optional,
			      opts = []},
		       #field{name = response, fnum = 2, rnum = 2,
			      type = {msg, 'Response'}, occurrence = optional,
			      opts = []},
		       #field{name = error, fnum = 3, rnum = 2,
			      type = {msg, 'Error'}, occurrence = optional,
			      opts = []}]}]},
     {{msg, 'Request'},
      [#gpb_oneof{name = req_type, rnum = 2,
		  fields =
		      [#field{name = get, fnum = 1, rnum = 2,
			      type = {msg, 'Get'}, occurrence = optional,
			      opts = []},
		       #field{name = get_supported_dm, fnum = 2, rnum = 2,
			      type = {msg, 'GetSupportedDM'},
			      occurrence = optional, opts = []},
		       #field{name = get_instances, fnum = 3, rnum = 2,
			      type = {msg, 'GetInstances'},
			      occurrence = optional, opts = []},
		       #field{name = set, fnum = 4, rnum = 2,
			      type = {msg, 'Set'}, occurrence = optional,
			      opts = []},
		       #field{name = add, fnum = 5, rnum = 2,
			      type = {msg, 'Add'}, occurrence = optional,
			      opts = []},
		       #field{name = delete, fnum = 6, rnum = 2,
			      type = {msg, 'Delete'}, occurrence = optional,
			      opts = []},
		       #field{name = operate, fnum = 7, rnum = 2,
			      type = {msg, 'Operate'}, occurrence = optional,
			      opts = []},
		       #field{name = notify, fnum = 8, rnum = 2,
			      type = {msg, 'Notify'}, occurrence = optional,
			      opts = []},
		       #field{name = get_supported_protocol, fnum = 9,
			      rnum = 2, type = {msg, 'GetSupportedProtocol'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'Response'},
      [#gpb_oneof{name = resp_type, rnum = 2,
		  fields =
		      [#field{name = get_resp, fnum = 1, rnum = 2,
			      type = {msg, 'GetResp'}, occurrence = optional,
			      opts = []},
		       #field{name = get_supported_dm_resp, fnum = 2, rnum = 2,
			      type = {msg, 'GetSupportedDMResp'},
			      occurrence = optional, opts = []},
		       #field{name = get_instances_resp, fnum = 3, rnum = 2,
			      type = {msg, 'GetInstancesResp'},
			      occurrence = optional, opts = []},
		       #field{name = set_resp, fnum = 4, rnum = 2,
			      type = {msg, 'SetResp'}, occurrence = optional,
			      opts = []},
		       #field{name = add_resp, fnum = 5, rnum = 2,
			      type = {msg, 'AddResp'}, occurrence = optional,
			      opts = []},
		       #field{name = delete_resp, fnum = 6, rnum = 2,
			      type = {msg, 'DeleteResp'}, occurrence = optional,
			      opts = []},
		       #field{name = operate_resp, fnum = 7, rnum = 2,
			      type = {msg, 'OperateResp'},
			      occurrence = optional, opts = []},
		       #field{name = notify_resp, fnum = 8, rnum = 2,
			      type = {msg, 'NotifyResp'}, occurrence = optional,
			      opts = []},
		       #field{name = get_supported_protocol_resp, fnum = 9,
			      rnum = 2,
			      type = {msg, 'GetSupportedProtocolResp'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'Error.ParamError'},
      [#field{name = param_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Error'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_errs, fnum = 3, rnum = 4,
	      type = {msg, 'Error.ParamError'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Get'},
      [#field{name = param_paths, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'GetResp.RequestedPathResult'},
      [#field{name = requested_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = resolved_path_results, fnum = 4, rnum = 5,
	      type = {msg, 'GetResp.ResolvedPathResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetResp.ResolvedPathResult'},
      [#field{name = resolved_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = result_params, fnum = 2, rnum = 3,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'GetResp'},
      [#field{name = req_path_results, fnum = 1, rnum = 2,
	      type = {msg, 'GetResp.RequestedPathResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetSupportedDM'},
      [#field{name = obj_paths, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []},
       #field{name = first_level_only, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []},
       #field{name = return_commands, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional, opts = []},
       #field{name = return_events, fnum = 4, rnum = 5,
	      type = bool, occurrence = optional, opts = []},
       #field{name = return_params, fnum = 5, rnum = 6,
	      type = bool, occurrence = optional, opts = []}]},
     {{msg, 'GetSupportedDMResp.RequestedObjectResult'},
      [#field{name = req_obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = data_model_inst_uri, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = supported_objs, fnum = 5, rnum = 6,
	      type =
		  {msg, 'GetSupportedDMResp.SupportedObjectResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetSupportedDMResp.SupportedObjectResult'},
      [#field{name = supported_obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = access, fnum = 2, rnum = 3,
	      type = {enum, 'GetSupportedDMResp.ObjAccessType'},
	      occurrence = optional, opts = []},
       #field{name = is_multi_instance, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional, opts = []},
       #field{name = supported_commands, fnum = 4, rnum = 5,
	      type =
		  {msg, 'GetSupportedDMResp.SupportedCommandResult'},
	      occurrence = repeated, opts = []},
       #field{name = supported_events, fnum = 5, rnum = 6,
	      type = {msg, 'GetSupportedDMResp.SupportedEventResult'},
	      occurrence = repeated, opts = []},
       #field{name = supported_params, fnum = 6, rnum = 7,
	      type = {msg, 'GetSupportedDMResp.SupportedParamResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetSupportedDMResp.SupportedParamResult'},
      [#field{name = param_name, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = access, fnum = 2, rnum = 3,
	      type = {enum, 'GetSupportedDMResp.ParamAccessType'},
	      occurrence = optional, opts = []}]},
     {{msg, 'GetSupportedDMResp.SupportedCommandResult'},
      [#field{name = command_name, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = input_arg_names, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated, opts = []},
       #field{name = output_arg_names, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'GetSupportedDMResp.SupportedEventResult'},
      [#field{name = event_name, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = arg_names, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'GetSupportedDMResp'},
      [#field{name = req_obj_results, fnum = 1, rnum = 2,
	      type =
		  {msg, 'GetSupportedDMResp.RequestedObjectResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetInstances'},
      [#field{name = obj_paths, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []},
       #field{name = first_level_only, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []}]},
     {{msg, 'GetInstancesResp.RequestedPathResult'},
      [#field{name = requested_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = curr_insts, fnum = 4, rnum = 5,
	      type = {msg, 'GetInstancesResp.CurrInstance'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetInstancesResp.CurrInstance'},
      [#field{name = instantiated_obj_path, fnum = 1,
	      rnum = 2, type = string, occurrence = optional,
	      opts = []},
       #field{name = unique_keys, fnum = 2, rnum = 3,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'GetInstancesResp'},
      [#field{name = req_path_results, fnum = 1, rnum = 2,
	      type = {msg, 'GetInstancesResp.RequestedPathResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GetSupportedProtocol'},
      [#field{name = controller_supported_protocol_versions,
	      fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'GetSupportedProtocolResp'},
      [#field{name = agent_supported_protocol_versions,
	      fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Add.CreateObject'},
      [#field{name = obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_settings, fnum = 2, rnum = 3,
	      type = {msg, 'Add.CreateParamSetting'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Add.CreateParamSetting'},
      [#field{name = param, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = required, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'Add'},
      [#field{name = allow_partial, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = create_objs, fnum = 2, rnum = 3,
	      type = {msg, 'Add.CreateObject'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'AddResp.CreatedObjectResult'},
      [#field{name = requested_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = oper_status, fnum = 2, rnum = 3,
	      type =
		  {msg, 'AddResp.CreatedObjectResult.OperationStatus'},
	      occurrence = optional, opts = []}]},
     {{msg,
       'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg,
       'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'},
      [#field{name = instantiated_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_errs, fnum = 2, rnum = 3,
	      type = {msg, 'AddResp.ParameterError'},
	      occurrence = repeated, opts = []},
       #field{name = unique_keys, fnum = 3, rnum = 4,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'AddResp.CreatedObjectResult.OperationStatus'},
      [#gpb_oneof{name = oper_status, rnum = 2,
		  fields =
		      [#field{name = oper_failure, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'},
			      occurrence = optional, opts = []},
		       #field{name = oper_success, fnum = 2, rnum = 2,
			      type =
				  {msg,
				   'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'AddResp.ParameterError'},
      [#field{name = param, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'AddResp'},
      [#field{name = created_obj_results, fnum = 1, rnum = 2,
	      type = {msg, 'AddResp.CreatedObjectResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Delete'},
      [#field{name = allow_partial, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = obj_paths, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'DeleteResp.DeletedObjectResult'},
      [#field{name = requested_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = oper_status, fnum = 2, rnum = 3,
	      type =
		  {msg, 'DeleteResp.DeletedObjectResult.OperationStatus'},
	      occurrence = optional, opts = []}]},
     {{msg,
       'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg,
       'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'},
      [#field{name = affected_paths, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []},
       #field{name = unaffected_path_errs, fnum = 2, rnum = 3,
	      type = {msg, 'DeleteResp.UnaffectedPathError'},
	      occurrence = repeated, opts = []}]},
     {{msg,
       'DeleteResp.DeletedObjectResult.OperationStatus'},
      [#gpb_oneof{name = oper_status, rnum = 2,
		  fields =
		      [#field{name = oper_failure, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'},
			      occurrence = optional, opts = []},
		       #field{name = oper_success, fnum = 2, rnum = 2,
			      type =
				  {msg,
				   'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'DeleteResp.UnaffectedPathError'},
      [#field{name = unaffected_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'DeleteResp'},
      [#field{name = deleted_obj_results, fnum = 1, rnum = 2,
	      type = {msg, 'DeleteResp.DeletedObjectResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Set.UpdateObject'},
      [#field{name = obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_settings, fnum = 2, rnum = 3,
	      type = {msg, 'Set.UpdateParamSetting'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Set.UpdateParamSetting'},
      [#field{name = param, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = required, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'Set'},
      [#field{name = allow_partial, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = update_objs, fnum = 2, rnum = 3,
	      type = {msg, 'Set.UpdateObject'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'SetResp.UpdatedObjectResult'},
      [#field{name = requested_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = oper_status, fnum = 2, rnum = 3,
	      type =
		  {msg, 'SetResp.UpdatedObjectResult.OperationStatus'},
	      occurrence = optional, opts = []}]},
     {{msg,
       'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = updated_inst_failures, fnum = 3, rnum = 4,
	      type = {msg, 'SetResp.UpdatedInstanceFailure'},
	      occurrence = repeated, opts = []}]},
     {{msg,
       'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'},
      [#field{name = updated_inst_results, fnum = 1, rnum = 2,
	      type = {msg, 'SetResp.UpdatedInstanceResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'SetResp.UpdatedObjectResult.OperationStatus'},
      [#gpb_oneof{name = oper_status, rnum = 2,
		  fields =
		      [#field{name = oper_failure, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'},
			      occurrence = optional, opts = []},
		       #field{name = oper_success, fnum = 2, rnum = 2,
			      type =
				  {msg,
				   'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'SetResp.UpdatedInstanceFailure'},
      [#field{name = affected_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_errs, fnum = 2, rnum = 3,
	      type = {msg, 'SetResp.ParameterError'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'SetResp.UpdatedInstanceResult'},
      [#field{name = affected_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_errs, fnum = 2, rnum = 3,
	      type = {msg, 'SetResp.ParameterError'},
	      occurrence = repeated, opts = []},
       #field{name = updated_params, fnum = 3, rnum = 4,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'SetResp.ParameterError'},
      [#field{name = param, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = err_code, fnum = 2, rnum = 3,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'SetResp'},
      [#field{name = updated_obj_results, fnum = 1, rnum = 2,
	      type = {msg, 'SetResp.UpdatedObjectResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Operate'},
      [#field{name = command, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = command_key, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = send_resp, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional, opts = []},
       #field{name = input_args, fnum = 4, rnum = 5,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'OperateResp.OperationResult'},
      [#field{name = executed_command, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #gpb_oneof{name = operation_resp, rnum = 3,
		  fields =
		      [#field{name = req_obj_path, fnum = 2, rnum = 3,
			      type = string, occurrence = optional, opts = []},
		       #field{name = req_output_args, fnum = 3, rnum = 3,
			      type =
				  {msg,
				   'OperateResp.OperationResult.OutputArgs'},
			      occurrence = optional, opts = []},
		       #field{name = cmd_failure, fnum = 4, rnum = 3,
			      type =
				  {msg,
				   'OperateResp.OperationResult.CommandFailure'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'OperateResp.OperationResult.CommandFailure'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'OperateResp.OperationResult.OutputArgs'},
      [#field{name = output_args, fnum = 1, rnum = 2,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'OperateResp'},
      [#field{name = operation_results, fnum = 1, rnum = 2,
	      type = {msg, 'OperateResp.OperationResult'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Notify.Event'},
      [#field{name = obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = event_name, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = params, fnum = 3, rnum = 4,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Notify.ValueChange'},
      [#field{name = param_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = param_value, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Notify.ObjectCreation'},
      [#field{name = obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = unique_keys, fnum = 2, rnum = 3,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Notify.ObjectDeletion'},
      [#field{name = obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Notify.OperationComplete'},
      [#field{name = obj_path, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = command_name, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = command_key, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #gpb_oneof{name = operation_resp, rnum = 5,
		  fields =
		      [#field{name = req_output_args, fnum = 4, rnum = 5,
			      type =
				  {msg, 'Notify.OperationComplete.OutputArgs'},
			      occurrence = optional, opts = []},
		       #field{name = cmd_failure, fnum = 5, rnum = 5,
			      type =
				  {msg,
				   'Notify.OperationComplete.CommandFailure'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'Notify.OperationComplete.CommandFailure'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = fixed32, occurrence = optional, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Notify.OperationComplete.OutputArgs'},
      [#field{name = output_args, fnum = 1, rnum = 2,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Notify.OnBoardRequest'},
      [#field{name = oui, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = product_class, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = serial_number, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = agent_supported_protocol_versions,
	      fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Notify'},
      [#field{name = subscription_id, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = send_resp, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []},
       #gpb_oneof{name = notification, rnum = 4,
		  fields =
		      [#field{name = event, fnum = 3, rnum = 4,
			      type = {msg, 'Notify.Event'},
			      occurrence = optional, opts = []},
		       #field{name = value_change, fnum = 4, rnum = 4,
			      type = {msg, 'Notify.ValueChange'},
			      occurrence = optional, opts = []},
		       #field{name = obj_creation, fnum = 5, rnum = 4,
			      type = {msg, 'Notify.ObjectCreation'},
			      occurrence = optional, opts = []},
		       #field{name = obj_deletion, fnum = 6, rnum = 4,
			      type = {msg, 'Notify.ObjectDeletion'},
			      occurrence = optional, opts = []},
		       #field{name = oper_complete, fnum = 7, rnum = 4,
			      type = {msg, 'Notify.OperationComplete'},
			      occurrence = optional, opts = []},
		       #field{name = on_board_req, fnum = 8, rnum = 4,
			      type = {msg, 'Notify.OnBoardRequest'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'NotifyResp'},
      [#field{name = subscription_id, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'DoubleValue'},
      [#field{name = value, fnum = 1, rnum = 2, type = double,
	      occurrence = optional, opts = []}]},
     {{msg, 'FloatValue'},
      [#field{name = value, fnum = 1, rnum = 2, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, 'Int64Value'},
      [#field{name = value, fnum = 1, rnum = 2, type = int64,
	      occurrence = optional, opts = []}]},
     {{msg, 'UInt64Value'},
      [#field{name = value, fnum = 1, rnum = 2, type = uint64,
	      occurrence = optional, opts = []}]},
     {{msg, 'Int32Value'},
      [#field{name = value, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'UInt32Value'},
      [#field{name = value, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'BoolValue'},
      [#field{name = value, fnum = 1, rnum = 2, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'StringValue'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'BytesValue'},
      [#field{name = value, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Record', 'NoSessionContextRecord',
     'SessionContextRecord', 'Msg', 'Header', 'Body',
     'Request', 'Response', 'Error.ParamError', 'Error',
     'Get', 'GetResp.RequestedPathResult',
     'GetResp.ResolvedPathResult', 'GetResp',
     'GetSupportedDM',
     'GetSupportedDMResp.RequestedObjectResult',
     'GetSupportedDMResp.SupportedObjectResult',
     'GetSupportedDMResp.SupportedParamResult',
     'GetSupportedDMResp.SupportedCommandResult',
     'GetSupportedDMResp.SupportedEventResult',
     'GetSupportedDMResp', 'GetInstances',
     'GetInstancesResp.RequestedPathResult',
     'GetInstancesResp.CurrInstance', 'GetInstancesResp',
     'GetSupportedProtocol', 'GetSupportedProtocolResp',
     'Add.CreateObject', 'Add.CreateParamSetting', 'Add',
     'AddResp.CreatedObjectResult',
     'AddResp.CreatedObjectResult.OperationStatus.OperationFailure',
     'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess',
     'AddResp.CreatedObjectResult.OperationStatus',
     'AddResp.ParameterError', 'AddResp', 'Delete',
     'DeleteResp.DeletedObjectResult',
     'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure',
     'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess',
     'DeleteResp.DeletedObjectResult.OperationStatus',
     'DeleteResp.UnaffectedPathError', 'DeleteResp',
     'Set.UpdateObject', 'Set.UpdateParamSetting', 'Set',
     'SetResp.UpdatedObjectResult',
     'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure',
     'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess',
     'SetResp.UpdatedObjectResult.OperationStatus',
     'SetResp.UpdatedInstanceFailure',
     'SetResp.UpdatedInstanceResult',
     'SetResp.ParameterError', 'SetResp', 'Operate',
     'OperateResp.OperationResult',
     'OperateResp.OperationResult.CommandFailure',
     'OperateResp.OperationResult.OutputArgs', 'OperateResp',
     'Notify.Event', 'Notify.ValueChange',
     'Notify.ObjectCreation', 'Notify.ObjectDeletion',
     'Notify.OperationComplete',
     'Notify.OperationComplete.CommandFailure',
     'Notify.OperationComplete.OutputArgs',
     'Notify.OnBoardRequest', 'Notify', 'NotifyResp',
     'DoubleValue', 'FloatValue', 'Int64Value',
     'UInt64Value', 'Int32Value', 'UInt32Value', 'BoolValue',
     'StringValue', 'BytesValue'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Record', 'NoSessionContextRecord',
     'SessionContextRecord', 'Msg', 'Header', 'Body',
     'Request', 'Response', 'Error.ParamError', 'Error',
     'Get', 'GetResp.RequestedPathResult',
     'GetResp.ResolvedPathResult', 'GetResp',
     'GetSupportedDM',
     'GetSupportedDMResp.RequestedObjectResult',
     'GetSupportedDMResp.SupportedObjectResult',
     'GetSupportedDMResp.SupportedParamResult',
     'GetSupportedDMResp.SupportedCommandResult',
     'GetSupportedDMResp.SupportedEventResult',
     'GetSupportedDMResp', 'GetInstances',
     'GetInstancesResp.RequestedPathResult',
     'GetInstancesResp.CurrInstance', 'GetInstancesResp',
     'GetSupportedProtocol', 'GetSupportedProtocolResp',
     'Add.CreateObject', 'Add.CreateParamSetting', 'Add',
     'AddResp.CreatedObjectResult',
     'AddResp.CreatedObjectResult.OperationStatus.OperationFailure',
     'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess',
     'AddResp.CreatedObjectResult.OperationStatus',
     'AddResp.ParameterError', 'AddResp', 'Delete',
     'DeleteResp.DeletedObjectResult',
     'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure',
     'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess',
     'DeleteResp.DeletedObjectResult.OperationStatus',
     'DeleteResp.UnaffectedPathError', 'DeleteResp',
     'Set.UpdateObject', 'Set.UpdateParamSetting', 'Set',
     'SetResp.UpdatedObjectResult',
     'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure',
     'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess',
     'SetResp.UpdatedObjectResult.OperationStatus',
     'SetResp.UpdatedInstanceFailure',
     'SetResp.UpdatedInstanceResult',
     'SetResp.ParameterError', 'SetResp', 'Operate',
     'OperateResp.OperationResult',
     'OperateResp.OperationResult.CommandFailure',
     'OperateResp.OperationResult.OutputArgs', 'OperateResp',
     'Notify.Event', 'Notify.ValueChange',
     'Notify.ObjectCreation', 'Notify.ObjectDeletion',
     'Notify.OperationComplete',
     'Notify.OperationComplete.CommandFailure',
     'Notify.OperationComplete.OutputArgs',
     'Notify.OnBoardRequest', 'Notify', 'NotifyResp',
     'DoubleValue', 'FloatValue', 'Int64Value',
     'UInt64Value', 'Int32Value', 'UInt32Value', 'BoolValue',
     'StringValue', 'BytesValue'].


get_enum_names() ->
    ['Record.PayloadSecurity',
     'SessionContextRecord.PayloadSARState',
     'Header.MsgType', 'GetSupportedDMResp.ParamAccessType',
     'GetSupportedDMResp.ObjAccessType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Record') ->
    [#field{name = version, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = to_id, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = from_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = payload_security, fnum = 4, rnum = 5,
	    type = {enum, 'Record.PayloadSecurity'},
	    occurrence = optional, opts = []},
     #field{name = mac_signature, fnum = 5, rnum = 6,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = sender_cert, fnum = 6, rnum = 7,
	    type = bytes, occurrence = optional, opts = []},
     #gpb_oneof{name = record_type, rnum = 8,
		fields =
		    [#field{name = no_session_context, fnum = 7, rnum = 8,
			    type = {msg, 'NoSessionContextRecord'},
			    occurrence = optional, opts = []},
		     #field{name = session_context, fnum = 8, rnum = 8,
			    type = {msg, 'SessionContextRecord'},
			    occurrence = optional, opts = []}]}];
find_msg_def('NoSessionContextRecord') ->
    [#field{name = payload, fnum = 2, rnum = 2,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('SessionContextRecord') ->
    [#field{name = session_id, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = sequence_id, fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = expected_id, fnum = 3, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = retransmit_id, fnum = 4, rnum = 5,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = payload_sar_state, fnum = 5, rnum = 6,
	    type = {enum, 'SessionContextRecord.PayloadSARState'},
	    occurrence = optional, opts = []},
     #field{name = payloadrec_sar_state, fnum = 6, rnum = 7,
	    type = {enum, 'SessionContextRecord.PayloadSARState'},
	    occurrence = optional, opts = []},
     #field{name = payload, fnum = 7, rnum = 8, type = bytes,
	    occurrence = repeated, opts = []}];
find_msg_def('Msg') ->
    [#field{name = header, fnum = 1, rnum = 2,
	    type = {msg, 'Header'}, occurrence = optional,
	    opts = []},
     #field{name = body, fnum = 2, rnum = 3,
	    type = {msg, 'Body'}, occurrence = optional,
	    opts = []}];
find_msg_def('Header') ->
    [#field{name = msg_id, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = msg_type, fnum = 2, rnum = 3,
	    type = {enum, 'Header.MsgType'}, occurrence = optional,
	    opts = []}];
find_msg_def('Body') ->
    [#gpb_oneof{name = msg_body, rnum = 2,
		fields =
		    [#field{name = request, fnum = 1, rnum = 2,
			    type = {msg, 'Request'}, occurrence = optional,
			    opts = []},
		     #field{name = response, fnum = 2, rnum = 2,
			    type = {msg, 'Response'}, occurrence = optional,
			    opts = []},
		     #field{name = error, fnum = 3, rnum = 2,
			    type = {msg, 'Error'}, occurrence = optional,
			    opts = []}]}];
find_msg_def('Request') ->
    [#gpb_oneof{name = req_type, rnum = 2,
		fields =
		    [#field{name = get, fnum = 1, rnum = 2,
			    type = {msg, 'Get'}, occurrence = optional,
			    opts = []},
		     #field{name = get_supported_dm, fnum = 2, rnum = 2,
			    type = {msg, 'GetSupportedDM'},
			    occurrence = optional, opts = []},
		     #field{name = get_instances, fnum = 3, rnum = 2,
			    type = {msg, 'GetInstances'}, occurrence = optional,
			    opts = []},
		     #field{name = set, fnum = 4, rnum = 2,
			    type = {msg, 'Set'}, occurrence = optional,
			    opts = []},
		     #field{name = add, fnum = 5, rnum = 2,
			    type = {msg, 'Add'}, occurrence = optional,
			    opts = []},
		     #field{name = delete, fnum = 6, rnum = 2,
			    type = {msg, 'Delete'}, occurrence = optional,
			    opts = []},
		     #field{name = operate, fnum = 7, rnum = 2,
			    type = {msg, 'Operate'}, occurrence = optional,
			    opts = []},
		     #field{name = notify, fnum = 8, rnum = 2,
			    type = {msg, 'Notify'}, occurrence = optional,
			    opts = []},
		     #field{name = get_supported_protocol, fnum = 9,
			    rnum = 2, type = {msg, 'GetSupportedProtocol'},
			    occurrence = optional, opts = []}]}];
find_msg_def('Response') ->
    [#gpb_oneof{name = resp_type, rnum = 2,
		fields =
		    [#field{name = get_resp, fnum = 1, rnum = 2,
			    type = {msg, 'GetResp'}, occurrence = optional,
			    opts = []},
		     #field{name = get_supported_dm_resp, fnum = 2, rnum = 2,
			    type = {msg, 'GetSupportedDMResp'},
			    occurrence = optional, opts = []},
		     #field{name = get_instances_resp, fnum = 3, rnum = 2,
			    type = {msg, 'GetInstancesResp'},
			    occurrence = optional, opts = []},
		     #field{name = set_resp, fnum = 4, rnum = 2,
			    type = {msg, 'SetResp'}, occurrence = optional,
			    opts = []},
		     #field{name = add_resp, fnum = 5, rnum = 2,
			    type = {msg, 'AddResp'}, occurrence = optional,
			    opts = []},
		     #field{name = delete_resp, fnum = 6, rnum = 2,
			    type = {msg, 'DeleteResp'}, occurrence = optional,
			    opts = []},
		     #field{name = operate_resp, fnum = 7, rnum = 2,
			    type = {msg, 'OperateResp'}, occurrence = optional,
			    opts = []},
		     #field{name = notify_resp, fnum = 8, rnum = 2,
			    type = {msg, 'NotifyResp'}, occurrence = optional,
			    opts = []},
		     #field{name = get_supported_protocol_resp, fnum = 9,
			    rnum = 2, type = {msg, 'GetSupportedProtocolResp'},
			    occurrence = optional, opts = []}]}];
find_msg_def('Error.ParamError') ->
    [#field{name = param_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Error') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_errs, fnum = 3, rnum = 4,
	    type = {msg, 'Error.ParamError'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Get') ->
    [#field{name = param_paths, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('GetResp.RequestedPathResult') ->
    [#field{name = requested_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = resolved_path_results, fnum = 4, rnum = 5,
	    type = {msg, 'GetResp.ResolvedPathResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetResp.ResolvedPathResult') ->
    [#field{name = resolved_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = result_params, fnum = 2, rnum = 3,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('GetResp') ->
    [#field{name = req_path_results, fnum = 1, rnum = 2,
	    type = {msg, 'GetResp.RequestedPathResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetSupportedDM') ->
    [#field{name = obj_paths, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []},
     #field{name = first_level_only, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []},
     #field{name = return_commands, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional, opts = []},
     #field{name = return_events, fnum = 4, rnum = 5,
	    type = bool, occurrence = optional, opts = []},
     #field{name = return_params, fnum = 5, rnum = 6,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def('GetSupportedDMResp.RequestedObjectResult') ->
    [#field{name = req_obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = data_model_inst_uri, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = supported_objs, fnum = 5, rnum = 6,
	    type =
		{msg, 'GetSupportedDMResp.SupportedObjectResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetSupportedDMResp.SupportedObjectResult') ->
    [#field{name = supported_obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = access, fnum = 2, rnum = 3,
	    type = {enum, 'GetSupportedDMResp.ObjAccessType'},
	    occurrence = optional, opts = []},
     #field{name = is_multi_instance, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional, opts = []},
     #field{name = supported_commands, fnum = 4, rnum = 5,
	    type =
		{msg, 'GetSupportedDMResp.SupportedCommandResult'},
	    occurrence = repeated, opts = []},
     #field{name = supported_events, fnum = 5, rnum = 6,
	    type = {msg, 'GetSupportedDMResp.SupportedEventResult'},
	    occurrence = repeated, opts = []},
     #field{name = supported_params, fnum = 6, rnum = 7,
	    type = {msg, 'GetSupportedDMResp.SupportedParamResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetSupportedDMResp.SupportedParamResult') ->
    [#field{name = param_name, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = access, fnum = 2, rnum = 3,
	    type = {enum, 'GetSupportedDMResp.ParamAccessType'},
	    occurrence = optional, opts = []}];
find_msg_def('GetSupportedDMResp.SupportedCommandResult') ->
    [#field{name = command_name, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = input_arg_names, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = []},
     #field{name = output_arg_names, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('GetSupportedDMResp.SupportedEventResult') ->
    [#field{name = event_name, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = arg_names, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('GetSupportedDMResp') ->
    [#field{name = req_obj_results, fnum = 1, rnum = 2,
	    type =
		{msg, 'GetSupportedDMResp.RequestedObjectResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetInstances') ->
    [#field{name = obj_paths, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []},
     #field{name = first_level_only, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def('GetInstancesResp.RequestedPathResult') ->
    [#field{name = requested_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = curr_insts, fnum = 4, rnum = 5,
	    type = {msg, 'GetInstancesResp.CurrInstance'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetInstancesResp.CurrInstance') ->
    [#field{name = instantiated_obj_path, fnum = 1,
	    rnum = 2, type = string, occurrence = optional,
	    opts = []},
     #field{name = unique_keys, fnum = 2, rnum = 3,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('GetInstancesResp') ->
    [#field{name = req_path_results, fnum = 1, rnum = 2,
	    type = {msg, 'GetInstancesResp.RequestedPathResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('GetSupportedProtocol') ->
    [#field{name = controller_supported_protocol_versions,
	    fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('GetSupportedProtocolResp') ->
    [#field{name = agent_supported_protocol_versions,
	    fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Add.CreateObject') ->
    [#field{name = obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_settings, fnum = 2, rnum = 3,
	    type = {msg, 'Add.CreateParamSetting'},
	    occurrence = repeated, opts = []}];
find_msg_def('Add.CreateParamSetting') ->
    [#field{name = param, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = required, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('Add') ->
    [#field{name = allow_partial, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = create_objs, fnum = 2, rnum = 3,
	    type = {msg, 'Add.CreateObject'}, occurrence = repeated,
	    opts = []}];
find_msg_def('AddResp.CreatedObjectResult') ->
    [#field{name = requested_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = oper_status, fnum = 2, rnum = 3,
	    type =
		{msg, 'AddResp.CreatedObjectResult.OperationStatus'},
	    occurrence = optional, opts = []}];
find_msg_def('AddResp.CreatedObjectResult.OperationStatus.OperationFailure') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('AddResp.CreatedObjectResult.OperationStatus.OperationSuccess') ->
    [#field{name = instantiated_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_errs, fnum = 2, rnum = 3,
	    type = {msg, 'AddResp.ParameterError'},
	    occurrence = repeated, opts = []},
     #field{name = unique_keys, fnum = 3, rnum = 4,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('AddResp.CreatedObjectResult.OperationStatus') ->
    [#gpb_oneof{name = oper_status, rnum = 2,
		fields =
		    [#field{name = oper_failure, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'AddResp.CreatedObjectResult.OperationStatus.OperationFailure'},
			    occurrence = optional, opts = []},
		     #field{name = oper_success, fnum = 2, rnum = 2,
			    type =
				{msg,
				 'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess'},
			    occurrence = optional, opts = []}]}];
find_msg_def('AddResp.ParameterError') ->
    [#field{name = param, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('AddResp') ->
    [#field{name = created_obj_results, fnum = 1, rnum = 2,
	    type = {msg, 'AddResp.CreatedObjectResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('Delete') ->
    [#field{name = allow_partial, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = obj_paths, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('DeleteResp.DeletedObjectResult') ->
    [#field{name = requested_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = oper_status, fnum = 2, rnum = 3,
	    type =
		{msg, 'DeleteResp.DeletedObjectResult.OperationStatus'},
	    occurrence = optional, opts = []}];
find_msg_def('DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess') ->
    [#field{name = affected_paths, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []},
     #field{name = unaffected_path_errs, fnum = 2, rnum = 3,
	    type = {msg, 'DeleteResp.UnaffectedPathError'},
	    occurrence = repeated, opts = []}];
find_msg_def('DeleteResp.DeletedObjectResult.OperationStatus') ->
    [#gpb_oneof{name = oper_status, rnum = 2,
		fields =
		    [#field{name = oper_failure, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure'},
			    occurrence = optional, opts = []},
		     #field{name = oper_success, fnum = 2, rnum = 2,
			    type =
				{msg,
				 'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess'},
			    occurrence = optional, opts = []}]}];
find_msg_def('DeleteResp.UnaffectedPathError') ->
    [#field{name = unaffected_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('DeleteResp') ->
    [#field{name = deleted_obj_results, fnum = 1, rnum = 2,
	    type = {msg, 'DeleteResp.DeletedObjectResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('Set.UpdateObject') ->
    [#field{name = obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_settings, fnum = 2, rnum = 3,
	    type = {msg, 'Set.UpdateParamSetting'},
	    occurrence = repeated, opts = []}];
find_msg_def('Set.UpdateParamSetting') ->
    [#field{name = param, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = required, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('Set') ->
    [#field{name = allow_partial, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = update_objs, fnum = 2, rnum = 3,
	    type = {msg, 'Set.UpdateObject'}, occurrence = repeated,
	    opts = []}];
find_msg_def('SetResp.UpdatedObjectResult') ->
    [#field{name = requested_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = oper_status, fnum = 2, rnum = 3,
	    type =
		{msg, 'SetResp.UpdatedObjectResult.OperationStatus'},
	    occurrence = optional, opts = []}];
find_msg_def('SetResp.UpdatedObjectResult.OperationStatus.OperationFailure') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = updated_inst_failures, fnum = 3, rnum = 4,
	    type = {msg, 'SetResp.UpdatedInstanceFailure'},
	    occurrence = repeated, opts = []}];
find_msg_def('SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess') ->
    [#field{name = updated_inst_results, fnum = 1, rnum = 2,
	    type = {msg, 'SetResp.UpdatedInstanceResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('SetResp.UpdatedObjectResult.OperationStatus') ->
    [#gpb_oneof{name = oper_status, rnum = 2,
		fields =
		    [#field{name = oper_failure, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure'},
			    occurrence = optional, opts = []},
		     #field{name = oper_success, fnum = 2, rnum = 2,
			    type =
				{msg,
				 'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'},
			    occurrence = optional, opts = []}]}];
find_msg_def('SetResp.UpdatedInstanceFailure') ->
    [#field{name = affected_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_errs, fnum = 2, rnum = 3,
	    type = {msg, 'SetResp.ParameterError'},
	    occurrence = repeated, opts = []}];
find_msg_def('SetResp.UpdatedInstanceResult') ->
    [#field{name = affected_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_errs, fnum = 2, rnum = 3,
	    type = {msg, 'SetResp.ParameterError'},
	    occurrence = repeated, opts = []},
     #field{name = updated_params, fnum = 3, rnum = 4,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('SetResp.ParameterError') ->
    [#field{name = param, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = err_code, fnum = 2, rnum = 3,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('SetResp') ->
    [#field{name = updated_obj_results, fnum = 1, rnum = 2,
	    type = {msg, 'SetResp.UpdatedObjectResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('Operate') ->
    [#field{name = command, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = command_key, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = send_resp, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional, opts = []},
     #field{name = input_args, fnum = 4, rnum = 5,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('OperateResp.OperationResult') ->
    [#field{name = executed_command, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #gpb_oneof{name = operation_resp, rnum = 3,
		fields =
		    [#field{name = req_obj_path, fnum = 2, rnum = 3,
			    type = string, occurrence = optional, opts = []},
		     #field{name = req_output_args, fnum = 3, rnum = 3,
			    type =
				{msg, 'OperateResp.OperationResult.OutputArgs'},
			    occurrence = optional, opts = []},
		     #field{name = cmd_failure, fnum = 4, rnum = 3,
			    type =
				{msg,
				 'OperateResp.OperationResult.CommandFailure'},
			    occurrence = optional, opts = []}]}];
find_msg_def('OperateResp.OperationResult.CommandFailure') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('OperateResp.OperationResult.OutputArgs') ->
    [#field{name = output_args, fnum = 1, rnum = 2,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('OperateResp') ->
    [#field{name = operation_results, fnum = 1, rnum = 2,
	    type = {msg, 'OperateResp.OperationResult'},
	    occurrence = repeated, opts = []}];
find_msg_def('Notify.Event') ->
    [#field{name = obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = event_name, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = params, fnum = 3, rnum = 4,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('Notify.ValueChange') ->
    [#field{name = param_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = param_value, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Notify.ObjectCreation') ->
    [#field{name = obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = unique_keys, fnum = 2, rnum = 3,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('Notify.ObjectDeletion') ->
    [#field{name = obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Notify.OperationComplete') ->
    [#field{name = obj_path, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = command_name, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = command_key, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #gpb_oneof{name = operation_resp, rnum = 5,
		fields =
		    [#field{name = req_output_args, fnum = 4, rnum = 5,
			    type = {msg, 'Notify.OperationComplete.OutputArgs'},
			    occurrence = optional, opts = []},
		     #field{name = cmd_failure, fnum = 5, rnum = 5,
			    type =
				{msg,
				 'Notify.OperationComplete.CommandFailure'},
			    occurrence = optional, opts = []}]}];
find_msg_def('Notify.OperationComplete.CommandFailure') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = fixed32, occurrence = optional, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Notify.OperationComplete.OutputArgs') ->
    [#field{name = output_args, fnum = 1, rnum = 2,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []}];
find_msg_def('Notify.OnBoardRequest') ->
    [#field{name = oui, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = product_class, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = serial_number, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = agent_supported_protocol_versions,
	    fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Notify') ->
    [#field{name = subscription_id, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = send_resp, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []},
     #gpb_oneof{name = notification, rnum = 4,
		fields =
		    [#field{name = event, fnum = 3, rnum = 4,
			    type = {msg, 'Notify.Event'}, occurrence = optional,
			    opts = []},
		     #field{name = value_change, fnum = 4, rnum = 4,
			    type = {msg, 'Notify.ValueChange'},
			    occurrence = optional, opts = []},
		     #field{name = obj_creation, fnum = 5, rnum = 4,
			    type = {msg, 'Notify.ObjectCreation'},
			    occurrence = optional, opts = []},
		     #field{name = obj_deletion, fnum = 6, rnum = 4,
			    type = {msg, 'Notify.ObjectDeletion'},
			    occurrence = optional, opts = []},
		     #field{name = oper_complete, fnum = 7, rnum = 4,
			    type = {msg, 'Notify.OperationComplete'},
			    occurrence = optional, opts = []},
		     #field{name = on_board_req, fnum = 8, rnum = 4,
			    type = {msg, 'Notify.OnBoardRequest'},
			    occurrence = optional, opts = []}]}];
find_msg_def('NotifyResp') ->
    [#field{name = subscription_id, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('DoubleValue') ->
    [#field{name = value, fnum = 1, rnum = 2, type = double,
	    occurrence = optional, opts = []}];
find_msg_def('FloatValue') ->
    [#field{name = value, fnum = 1, rnum = 2, type = float,
	    occurrence = optional, opts = []}];
find_msg_def('Int64Value') ->
    [#field{name = value, fnum = 1, rnum = 2, type = int64,
	    occurrence = optional, opts = []}];
find_msg_def('UInt64Value') ->
    [#field{name = value, fnum = 1, rnum = 2, type = uint64,
	    occurrence = optional, opts = []}];
find_msg_def('Int32Value') ->
    [#field{name = value, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('UInt32Value') ->
    [#field{name = value, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('BoolValue') ->
    [#field{name = value, fnum = 1, rnum = 2, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('StringValue') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('BytesValue') ->
    [#field{name = value, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Record.PayloadSecurity') ->
    [{'PLAINTEXT', 0}, {'TLS12', 1}];
find_enum_def('SessionContextRecord.PayloadSARState') ->
    [{'NONE', 0}, {'BEGIN', 1}, {'INPROCESS', 2},
     {'COMPLETE', 3}];
find_enum_def('Header.MsgType') ->
    [{'ERROR', 0}, {'GET', 1}, {'GET_RESP', 2},
     {'NOTIFY', 3}, {'SET', 4}, {'SET_RESP', 5},
     {'OPERATE', 6}, {'OPERATE_RESP', 7}, {'ADD', 8},
     {'ADD_RESP', 9}, {'DELETE', 10}, {'DELETE_RESP', 11},
     {'GET_SUPPORTED_DM', 12}, {'GET_SUPPORTED_DM_RESP', 13},
     {'GET_INSTANCES', 14}, {'GET_INSTANCES_RESP', 15},
     {'NOTIFY_RESP', 16}, {'GET_SUPPORTED_PROTO', 17},
     {'GET_SUPPORTED_PROTO_RESP', 18}];
find_enum_def('GetSupportedDMResp.ParamAccessType') ->
    [{'PARAM_READ_ONLY', 0}, {'PARAM_READ_WRITE', 1},
     {'PARAM_WRITE_ONLY', 2}];
find_enum_def('GetSupportedDMResp.ObjAccessType') ->
    [{'OBJ_READ_ONLY', 0}, {'OBJ_ADD_DELETE', 1},
     {'OBJ_ADD_ONLY', 2}, {'OBJ_DELETE_ONLY', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('Record.PayloadSecurity', Value) ->
    'enum_symbol_by_value_Record.PayloadSecurity'(Value);
enum_symbol_by_value('SessionContextRecord.PayloadSARState',
		     Value) ->
    'enum_symbol_by_value_SessionContextRecord.PayloadSARState'(Value);
enum_symbol_by_value('Header.MsgType', Value) ->
    'enum_symbol_by_value_Header.MsgType'(Value);
enum_symbol_by_value('GetSupportedDMResp.ParamAccessType',
		     Value) ->
    'enum_symbol_by_value_GetSupportedDMResp.ParamAccessType'(Value);
enum_symbol_by_value('GetSupportedDMResp.ObjAccessType',
		     Value) ->
    'enum_symbol_by_value_GetSupportedDMResp.ObjAccessType'(Value).


enum_value_by_symbol('Record.PayloadSecurity', Sym) ->
    'enum_value_by_symbol_Record.PayloadSecurity'(Sym);
enum_value_by_symbol('SessionContextRecord.PayloadSARState',
		     Sym) ->
    'enum_value_by_symbol_SessionContextRecord.PayloadSARState'(Sym);
enum_value_by_symbol('Header.MsgType', Sym) ->
    'enum_value_by_symbol_Header.MsgType'(Sym);
enum_value_by_symbol('GetSupportedDMResp.ParamAccessType',
		     Sym) ->
    'enum_value_by_symbol_GetSupportedDMResp.ParamAccessType'(Sym);
enum_value_by_symbol('GetSupportedDMResp.ObjAccessType',
		     Sym) ->
    'enum_value_by_symbol_GetSupportedDMResp.ObjAccessType'(Sym).


'enum_symbol_by_value_Record.PayloadSecurity'(0) ->
    'PLAINTEXT';
'enum_symbol_by_value_Record.PayloadSecurity'(1) ->
    'TLS12'.


'enum_value_by_symbol_Record.PayloadSecurity'('PLAINTEXT') ->
    0;
'enum_value_by_symbol_Record.PayloadSecurity'('TLS12') ->
    1.

'enum_symbol_by_value_SessionContextRecord.PayloadSARState'(0) ->
    'NONE';
'enum_symbol_by_value_SessionContextRecord.PayloadSARState'(1) ->
    'BEGIN';
'enum_symbol_by_value_SessionContextRecord.PayloadSARState'(2) ->
    'INPROCESS';
'enum_symbol_by_value_SessionContextRecord.PayloadSARState'(3) ->
    'COMPLETE'.


'enum_value_by_symbol_SessionContextRecord.PayloadSARState'('NONE') ->
    0;
'enum_value_by_symbol_SessionContextRecord.PayloadSARState'('BEGIN') ->
    1;
'enum_value_by_symbol_SessionContextRecord.PayloadSARState'('INPROCESS') ->
    2;
'enum_value_by_symbol_SessionContextRecord.PayloadSARState'('COMPLETE') ->
    3.

'enum_symbol_by_value_Header.MsgType'(0) -> 'ERROR';
'enum_symbol_by_value_Header.MsgType'(1) -> 'GET';
'enum_symbol_by_value_Header.MsgType'(2) -> 'GET_RESP';
'enum_symbol_by_value_Header.MsgType'(3) -> 'NOTIFY';
'enum_symbol_by_value_Header.MsgType'(4) -> 'SET';
'enum_symbol_by_value_Header.MsgType'(5) -> 'SET_RESP';
'enum_symbol_by_value_Header.MsgType'(6) -> 'OPERATE';
'enum_symbol_by_value_Header.MsgType'(7) ->
    'OPERATE_RESP';
'enum_symbol_by_value_Header.MsgType'(8) -> 'ADD';
'enum_symbol_by_value_Header.MsgType'(9) -> 'ADD_RESP';
'enum_symbol_by_value_Header.MsgType'(10) -> 'DELETE';
'enum_symbol_by_value_Header.MsgType'(11) ->
    'DELETE_RESP';
'enum_symbol_by_value_Header.MsgType'(12) ->
    'GET_SUPPORTED_DM';
'enum_symbol_by_value_Header.MsgType'(13) ->
    'GET_SUPPORTED_DM_RESP';
'enum_symbol_by_value_Header.MsgType'(14) ->
    'GET_INSTANCES';
'enum_symbol_by_value_Header.MsgType'(15) ->
    'GET_INSTANCES_RESP';
'enum_symbol_by_value_Header.MsgType'(16) ->
    'NOTIFY_RESP';
'enum_symbol_by_value_Header.MsgType'(17) ->
    'GET_SUPPORTED_PROTO';
'enum_symbol_by_value_Header.MsgType'(18) ->
    'GET_SUPPORTED_PROTO_RESP'.


'enum_value_by_symbol_Header.MsgType'('ERROR') -> 0;
'enum_value_by_symbol_Header.MsgType'('GET') -> 1;
'enum_value_by_symbol_Header.MsgType'('GET_RESP') -> 2;
'enum_value_by_symbol_Header.MsgType'('NOTIFY') -> 3;
'enum_value_by_symbol_Header.MsgType'('SET') -> 4;
'enum_value_by_symbol_Header.MsgType'('SET_RESP') -> 5;
'enum_value_by_symbol_Header.MsgType'('OPERATE') -> 6;
'enum_value_by_symbol_Header.MsgType'('OPERATE_RESP') ->
    7;
'enum_value_by_symbol_Header.MsgType'('ADD') -> 8;
'enum_value_by_symbol_Header.MsgType'('ADD_RESP') -> 9;
'enum_value_by_symbol_Header.MsgType'('DELETE') -> 10;
'enum_value_by_symbol_Header.MsgType'('DELETE_RESP') ->
    11;
'enum_value_by_symbol_Header.MsgType'('GET_SUPPORTED_DM') ->
    12;
'enum_value_by_symbol_Header.MsgType'('GET_SUPPORTED_DM_RESP') ->
    13;
'enum_value_by_symbol_Header.MsgType'('GET_INSTANCES') ->
    14;
'enum_value_by_symbol_Header.MsgType'('GET_INSTANCES_RESP') ->
    15;
'enum_value_by_symbol_Header.MsgType'('NOTIFY_RESP') ->
    16;
'enum_value_by_symbol_Header.MsgType'('GET_SUPPORTED_PROTO') ->
    17;
'enum_value_by_symbol_Header.MsgType'('GET_SUPPORTED_PROTO_RESP') ->
    18.

'enum_symbol_by_value_GetSupportedDMResp.ParamAccessType'(0) ->
    'PARAM_READ_ONLY';
'enum_symbol_by_value_GetSupportedDMResp.ParamAccessType'(1) ->
    'PARAM_READ_WRITE';
'enum_symbol_by_value_GetSupportedDMResp.ParamAccessType'(2) ->
    'PARAM_WRITE_ONLY'.


'enum_value_by_symbol_GetSupportedDMResp.ParamAccessType'('PARAM_READ_ONLY') ->
    0;
'enum_value_by_symbol_GetSupportedDMResp.ParamAccessType'('PARAM_READ_WRITE') ->
    1;
'enum_value_by_symbol_GetSupportedDMResp.ParamAccessType'('PARAM_WRITE_ONLY') ->
    2.

'enum_symbol_by_value_GetSupportedDMResp.ObjAccessType'(0) ->
    'OBJ_READ_ONLY';
'enum_symbol_by_value_GetSupportedDMResp.ObjAccessType'(1) ->
    'OBJ_ADD_DELETE';
'enum_symbol_by_value_GetSupportedDMResp.ObjAccessType'(2) ->
    'OBJ_ADD_ONLY';
'enum_symbol_by_value_GetSupportedDMResp.ObjAccessType'(3) ->
    'OBJ_DELETE_ONLY'.


'enum_value_by_symbol_GetSupportedDMResp.ObjAccessType'('OBJ_READ_ONLY') ->
    0;
'enum_value_by_symbol_GetSupportedDMResp.ObjAccessType'('OBJ_ADD_DELETE') ->
    1;
'enum_value_by_symbol_GetSupportedDMResp.ObjAccessType'('OBJ_ADD_ONLY') ->
    2;
'enum_value_by_symbol_GetSupportedDMResp.ObjAccessType'('OBJ_DELETE_ONLY') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"usp_record.Record">>) -> 'Record';
fqbin_to_msg_name(<<"usp_record.NoSessionContextRecord">>) -> 'NoSessionContextRecord';
fqbin_to_msg_name(<<"usp_record.SessionContextRecord">>) -> 'SessionContextRecord';
fqbin_to_msg_name(<<"usp_record.Msg">>) -> 'Msg';
fqbin_to_msg_name(<<"usp_record.Header">>) -> 'Header';
fqbin_to_msg_name(<<"usp_record.Body">>) -> 'Body';
fqbin_to_msg_name(<<"usp_record.Request">>) -> 'Request';
fqbin_to_msg_name(<<"usp_record.Response">>) -> 'Response';
fqbin_to_msg_name(<<"usp_record.Error.ParamError">>) -> 'Error.ParamError';
fqbin_to_msg_name(<<"usp_record.Error">>) -> 'Error';
fqbin_to_msg_name(<<"usp_record.Get">>) -> 'Get';
fqbin_to_msg_name(<<"usp_record.GetResp.RequestedPathResult">>) ->
    'GetResp.RequestedPathResult';
fqbin_to_msg_name(<<"usp_record.GetResp.ResolvedPathResult">>) ->
    'GetResp.ResolvedPathResult';
fqbin_to_msg_name(<<"usp_record.GetResp">>) -> 'GetResp';
fqbin_to_msg_name(<<"usp_record.GetSupportedDM">>) -> 'GetSupportedDM';
fqbin_to_msg_name(<<"usp_record.GetSupportedDMResp.RequestedObjectResult">>) ->
    'GetSupportedDMResp.RequestedObjectResult';
fqbin_to_msg_name(<<"usp_record.GetSupportedDMResp.SupportedObjectResult">>) ->
    'GetSupportedDMResp.SupportedObjectResult';
fqbin_to_msg_name(<<"usp_record.GetSupportedDMResp.SupportedParamResult">>) ->
    'GetSupportedDMResp.SupportedParamResult';
fqbin_to_msg_name(<<"usp_record.GetSupportedDMResp.SupportedCommandResult">>) ->
    'GetSupportedDMResp.SupportedCommandResult';
fqbin_to_msg_name(<<"usp_record.GetSupportedDMResp.SupportedEventResult">>) ->
    'GetSupportedDMResp.SupportedEventResult';
fqbin_to_msg_name(<<"usp_record.GetSupportedDMResp">>) -> 'GetSupportedDMResp';
fqbin_to_msg_name(<<"usp_record.GetInstances">>) -> 'GetInstances';
fqbin_to_msg_name(<<"usp_record.GetInstancesResp.RequestedPathResult">>) ->
    'GetInstancesResp.RequestedPathResult';
fqbin_to_msg_name(<<"usp_record.GetInstancesResp.CurrInstance">>) ->
    'GetInstancesResp.CurrInstance';
fqbin_to_msg_name(<<"usp_record.GetInstancesResp">>) -> 'GetInstancesResp';
fqbin_to_msg_name(<<"usp_record.GetSupportedProtocol">>) -> 'GetSupportedProtocol';
fqbin_to_msg_name(<<"usp_record.GetSupportedProtocolResp">>) ->
    'GetSupportedProtocolResp';
fqbin_to_msg_name(<<"usp_record.Add.CreateObject">>) -> 'Add.CreateObject';
fqbin_to_msg_name(<<"usp_record.Add.CreateParamSetting">>) -> 'Add.CreateParamSetting';
fqbin_to_msg_name(<<"usp_record.Add">>) -> 'Add';
fqbin_to_msg_name(<<"usp_record.AddResp.CreatedObjectResult">>) ->
    'AddResp.CreatedObjectResult';
fqbin_to_msg_name(<<"usp_record.AddResp.CreatedObjectResult.OperationStatus.OperationFailure">>) ->
    'AddResp.CreatedObjectResult.OperationStatus.OperationFailure';
fqbin_to_msg_name(<<"usp_record.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess">>) ->
    'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess';
fqbin_to_msg_name(<<"usp_record.AddResp.CreatedObjectResult.OperationStatus">>) ->
    'AddResp.CreatedObjectResult.OperationStatus';
fqbin_to_msg_name(<<"usp_record.AddResp.ParameterError">>) -> 'AddResp.ParameterError';
fqbin_to_msg_name(<<"usp_record.AddResp">>) -> 'AddResp';
fqbin_to_msg_name(<<"usp_record.Delete">>) -> 'Delete';
fqbin_to_msg_name(<<"usp_record.DeleteResp.DeletedObjectResult">>) ->
    'DeleteResp.DeletedObjectResult';
fqbin_to_msg_name(<<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure">>) ->
    'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure';
fqbin_to_msg_name(<<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess">>) ->
    'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess';
fqbin_to_msg_name(<<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus">>) ->
    'DeleteResp.DeletedObjectResult.OperationStatus';
fqbin_to_msg_name(<<"usp_record.DeleteResp.UnaffectedPathError">>) ->
    'DeleteResp.UnaffectedPathError';
fqbin_to_msg_name(<<"usp_record.DeleteResp">>) -> 'DeleteResp';
fqbin_to_msg_name(<<"usp_record.Set.UpdateObject">>) -> 'Set.UpdateObject';
fqbin_to_msg_name(<<"usp_record.Set.UpdateParamSetting">>) -> 'Set.UpdateParamSetting';
fqbin_to_msg_name(<<"usp_record.Set">>) -> 'Set';
fqbin_to_msg_name(<<"usp_record.SetResp.UpdatedObjectResult">>) ->
    'SetResp.UpdatedObjectResult';
fqbin_to_msg_name(<<"usp_record.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure">>) ->
    'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure';
fqbin_to_msg_name(<<"usp_record.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess">>) ->
    'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess';
fqbin_to_msg_name(<<"usp_record.SetResp.UpdatedObjectResult.OperationStatus">>) ->
    'SetResp.UpdatedObjectResult.OperationStatus';
fqbin_to_msg_name(<<"usp_record.SetResp.UpdatedInstanceFailure">>) ->
    'SetResp.UpdatedInstanceFailure';
fqbin_to_msg_name(<<"usp_record.SetResp.UpdatedInstanceResult">>) ->
    'SetResp.UpdatedInstanceResult';
fqbin_to_msg_name(<<"usp_record.SetResp.ParameterError">>) -> 'SetResp.ParameterError';
fqbin_to_msg_name(<<"usp_record.SetResp">>) -> 'SetResp';
fqbin_to_msg_name(<<"usp_record.Operate">>) -> 'Operate';
fqbin_to_msg_name(<<"usp_record.OperateResp.OperationResult">>) ->
    'OperateResp.OperationResult';
fqbin_to_msg_name(<<"usp_record.OperateResp.OperationResult.CommandFailure">>) ->
    'OperateResp.OperationResult.CommandFailure';
fqbin_to_msg_name(<<"usp_record.OperateResp.OperationResult.OutputArgs">>) ->
    'OperateResp.OperationResult.OutputArgs';
fqbin_to_msg_name(<<"usp_record.OperateResp">>) -> 'OperateResp';
fqbin_to_msg_name(<<"usp_record.Notify.Event">>) -> 'Notify.Event';
fqbin_to_msg_name(<<"usp_record.Notify.ValueChange">>) -> 'Notify.ValueChange';
fqbin_to_msg_name(<<"usp_record.Notify.ObjectCreation">>) -> 'Notify.ObjectCreation';
fqbin_to_msg_name(<<"usp_record.Notify.ObjectDeletion">>) -> 'Notify.ObjectDeletion';
fqbin_to_msg_name(<<"usp_record.Notify.OperationComplete">>) ->
    'Notify.OperationComplete';
fqbin_to_msg_name(<<"usp_record.Notify.OperationComplete.CommandFailure">>) ->
    'Notify.OperationComplete.CommandFailure';
fqbin_to_msg_name(<<"usp_record.Notify.OperationComplete.OutputArgs">>) ->
    'Notify.OperationComplete.OutputArgs';
fqbin_to_msg_name(<<"usp_record.Notify.OnBoardRequest">>) -> 'Notify.OnBoardRequest';
fqbin_to_msg_name(<<"usp_record.Notify">>) -> 'Notify';
fqbin_to_msg_name(<<"usp_record.NotifyResp">>) -> 'NotifyResp';
fqbin_to_msg_name(<<"usp_record.DoubleValue">>) -> 'DoubleValue';
fqbin_to_msg_name(<<"usp_record.FloatValue">>) -> 'FloatValue';
fqbin_to_msg_name(<<"usp_record.Int64Value">>) -> 'Int64Value';
fqbin_to_msg_name(<<"usp_record.UInt64Value">>) -> 'UInt64Value';
fqbin_to_msg_name(<<"usp_record.Int32Value">>) -> 'Int32Value';
fqbin_to_msg_name(<<"usp_record.UInt32Value">>) -> 'UInt32Value';
fqbin_to_msg_name(<<"usp_record.BoolValue">>) -> 'BoolValue';
fqbin_to_msg_name(<<"usp_record.StringValue">>) -> 'StringValue';
fqbin_to_msg_name(<<"usp_record.BytesValue">>) -> 'BytesValue';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Record') -> <<"usp_record.Record">>;
msg_name_to_fqbin('NoSessionContextRecord') -> <<"usp_record.NoSessionContextRecord">>;
msg_name_to_fqbin('SessionContextRecord') -> <<"usp_record.SessionContextRecord">>;
msg_name_to_fqbin('Msg') -> <<"usp_record.Msg">>;
msg_name_to_fqbin('Header') -> <<"usp_record.Header">>;
msg_name_to_fqbin('Body') -> <<"usp_record.Body">>;
msg_name_to_fqbin('Request') -> <<"usp_record.Request">>;
msg_name_to_fqbin('Response') -> <<"usp_record.Response">>;
msg_name_to_fqbin('Error.ParamError') -> <<"usp_record.Error.ParamError">>;
msg_name_to_fqbin('Error') -> <<"usp_record.Error">>;
msg_name_to_fqbin('Get') -> <<"usp_record.Get">>;
msg_name_to_fqbin('GetResp.RequestedPathResult') ->
    <<"usp_record.GetResp.RequestedPathResult">>;
msg_name_to_fqbin('GetResp.ResolvedPathResult') ->
    <<"usp_record.GetResp.ResolvedPathResult">>;
msg_name_to_fqbin('GetResp') -> <<"usp_record.GetResp">>;
msg_name_to_fqbin('GetSupportedDM') -> <<"usp_record.GetSupportedDM">>;
msg_name_to_fqbin('GetSupportedDMResp.RequestedObjectResult') ->
    <<"usp_record.GetSupportedDMResp.RequestedObjectResult">>;
msg_name_to_fqbin('GetSupportedDMResp.SupportedObjectResult') ->
    <<"usp_record.GetSupportedDMResp.SupportedObjectResult">>;
msg_name_to_fqbin('GetSupportedDMResp.SupportedParamResult') ->
    <<"usp_record.GetSupportedDMResp.SupportedParamResult">>;
msg_name_to_fqbin('GetSupportedDMResp.SupportedCommandResult') ->
    <<"usp_record.GetSupportedDMResp.SupportedCommandResult">>;
msg_name_to_fqbin('GetSupportedDMResp.SupportedEventResult') ->
    <<"usp_record.GetSupportedDMResp.SupportedEventResult">>;
msg_name_to_fqbin('GetSupportedDMResp') -> <<"usp_record.GetSupportedDMResp">>;
msg_name_to_fqbin('GetInstances') -> <<"usp_record.GetInstances">>;
msg_name_to_fqbin('GetInstancesResp.RequestedPathResult') ->
    <<"usp_record.GetInstancesResp.RequestedPathResult">>;
msg_name_to_fqbin('GetInstancesResp.CurrInstance') ->
    <<"usp_record.GetInstancesResp.CurrInstance">>;
msg_name_to_fqbin('GetInstancesResp') -> <<"usp_record.GetInstancesResp">>;
msg_name_to_fqbin('GetSupportedProtocol') -> <<"usp_record.GetSupportedProtocol">>;
msg_name_to_fqbin('GetSupportedProtocolResp') ->
    <<"usp_record.GetSupportedProtocolResp">>;
msg_name_to_fqbin('Add.CreateObject') -> <<"usp_record.Add.CreateObject">>;
msg_name_to_fqbin('Add.CreateParamSetting') -> <<"usp_record.Add.CreateParamSetting">>;
msg_name_to_fqbin('Add') -> <<"usp_record.Add">>;
msg_name_to_fqbin('AddResp.CreatedObjectResult') ->
    <<"usp_record.AddResp.CreatedObjectResult">>;
msg_name_to_fqbin('AddResp.CreatedObjectResult.OperationStatus.OperationFailure') ->
    <<"usp_record.AddResp.CreatedObjectResult.OperationStatus.OperationFailure">>;
msg_name_to_fqbin('AddResp.CreatedObjectResult.OperationStatus.OperationSuccess') ->
    <<"usp_record.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess">>;
msg_name_to_fqbin('AddResp.CreatedObjectResult.OperationStatus') ->
    <<"usp_record.AddResp.CreatedObjectResult.OperationStatus">>;
msg_name_to_fqbin('AddResp.ParameterError') -> <<"usp_record.AddResp.ParameterError">>;
msg_name_to_fqbin('AddResp') -> <<"usp_record.AddResp">>;
msg_name_to_fqbin('Delete') -> <<"usp_record.Delete">>;
msg_name_to_fqbin('DeleteResp.DeletedObjectResult') ->
    <<"usp_record.DeleteResp.DeletedObjectResult">>;
msg_name_to_fqbin('DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure') ->
    <<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure">>;
msg_name_to_fqbin('DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess') ->
    <<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess">>;
msg_name_to_fqbin('DeleteResp.DeletedObjectResult.OperationStatus') ->
    <<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus">>;
msg_name_to_fqbin('DeleteResp.UnaffectedPathError') ->
    <<"usp_record.DeleteResp.UnaffectedPathError">>;
msg_name_to_fqbin('DeleteResp') -> <<"usp_record.DeleteResp">>;
msg_name_to_fqbin('Set.UpdateObject') -> <<"usp_record.Set.UpdateObject">>;
msg_name_to_fqbin('Set.UpdateParamSetting') -> <<"usp_record.Set.UpdateParamSetting">>;
msg_name_to_fqbin('Set') -> <<"usp_record.Set">>;
msg_name_to_fqbin('SetResp.UpdatedObjectResult') ->
    <<"usp_record.SetResp.UpdatedObjectResult">>;
msg_name_to_fqbin('SetResp.UpdatedObjectResult.OperationStatus.OperationFailure') ->
    <<"usp_record.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure">>;
msg_name_to_fqbin('SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess') ->
    <<"usp_record.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess">>;
msg_name_to_fqbin('SetResp.UpdatedObjectResult.OperationStatus') ->
    <<"usp_record.SetResp.UpdatedObjectResult.OperationStatus">>;
msg_name_to_fqbin('SetResp.UpdatedInstanceFailure') ->
    <<"usp_record.SetResp.UpdatedInstanceFailure">>;
msg_name_to_fqbin('SetResp.UpdatedInstanceResult') ->
    <<"usp_record.SetResp.UpdatedInstanceResult">>;
msg_name_to_fqbin('SetResp.ParameterError') -> <<"usp_record.SetResp.ParameterError">>;
msg_name_to_fqbin('SetResp') -> <<"usp_record.SetResp">>;
msg_name_to_fqbin('Operate') -> <<"usp_record.Operate">>;
msg_name_to_fqbin('OperateResp.OperationResult') ->
    <<"usp_record.OperateResp.OperationResult">>;
msg_name_to_fqbin('OperateResp.OperationResult.CommandFailure') ->
    <<"usp_record.OperateResp.OperationResult.CommandFailure">>;
msg_name_to_fqbin('OperateResp.OperationResult.OutputArgs') ->
    <<"usp_record.OperateResp.OperationResult.OutputArgs">>;
msg_name_to_fqbin('OperateResp') -> <<"usp_record.OperateResp">>;
msg_name_to_fqbin('Notify.Event') -> <<"usp_record.Notify.Event">>;
msg_name_to_fqbin('Notify.ValueChange') -> <<"usp_record.Notify.ValueChange">>;
msg_name_to_fqbin('Notify.ObjectCreation') -> <<"usp_record.Notify.ObjectCreation">>;
msg_name_to_fqbin('Notify.ObjectDeletion') -> <<"usp_record.Notify.ObjectDeletion">>;
msg_name_to_fqbin('Notify.OperationComplete') ->
    <<"usp_record.Notify.OperationComplete">>;
msg_name_to_fqbin('Notify.OperationComplete.CommandFailure') ->
    <<"usp_record.Notify.OperationComplete.CommandFailure">>;
msg_name_to_fqbin('Notify.OperationComplete.OutputArgs') ->
    <<"usp_record.Notify.OperationComplete.OutputArgs">>;
msg_name_to_fqbin('Notify.OnBoardRequest') -> <<"usp_record.Notify.OnBoardRequest">>;
msg_name_to_fqbin('Notify') -> <<"usp_record.Notify">>;
msg_name_to_fqbin('NotifyResp') -> <<"usp_record.NotifyResp">>;
msg_name_to_fqbin('DoubleValue') -> <<"usp_record.DoubleValue">>;
msg_name_to_fqbin('FloatValue') -> <<"usp_record.FloatValue">>;
msg_name_to_fqbin('Int64Value') -> <<"usp_record.Int64Value">>;
msg_name_to_fqbin('UInt64Value') -> <<"usp_record.UInt64Value">>;
msg_name_to_fqbin('Int32Value') -> <<"usp_record.Int32Value">>;
msg_name_to_fqbin('UInt32Value') -> <<"usp_record.UInt32Value">>;
msg_name_to_fqbin('BoolValue') -> <<"usp_record.BoolValue">>;
msg_name_to_fqbin('StringValue') -> <<"usp_record.StringValue">>;
msg_name_to_fqbin('BytesValue') -> <<"usp_record.BytesValue">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"usp_record.Record.PayloadSecurity">>) -> 'Record.PayloadSecurity';
fqbin_to_enum_name(<<"usp_record.SessionContextRecord.PayloadSARState">>) ->
    'SessionContextRecord.PayloadSARState';
fqbin_to_enum_name(<<"usp_record.Header.MsgType">>) -> 'Header.MsgType';
fqbin_to_enum_name(<<"usp_record.GetSupportedDMResp.ParamAccessType">>) ->
    'GetSupportedDMResp.ParamAccessType';
fqbin_to_enum_name(<<"usp_record.GetSupportedDMResp.ObjAccessType">>) ->
    'GetSupportedDMResp.ObjAccessType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Record.PayloadSecurity') -> <<"usp_record.Record.PayloadSecurity">>;
enum_name_to_fqbin('SessionContextRecord.PayloadSARState') ->
    <<"usp_record.SessionContextRecord.PayloadSARState">>;
enum_name_to_fqbin('Header.MsgType') -> <<"usp_record.Header.MsgType">>;
enum_name_to_fqbin('GetSupportedDMResp.ParamAccessType') ->
    <<"usp_record.GetSupportedDMResp.ParamAccessType">>;
enum_name_to_fqbin('GetSupportedDMResp.ObjAccessType') ->
    <<"usp_record.GetSupportedDMResp.ObjAccessType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> usp_record.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "usp_record_1_1.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["usp_record_1_1.proto", "usp_msg_1_1.proto",
     "wrappers.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["usp_record_1_1", "usp_msg_1_1", "wrappers"].


get_msg_containment("usp_record_1_1") ->
    ['NoSessionContextRecord', 'Record',
     'SessionContextRecord'];
get_msg_containment("usp_msg_1_1") ->
    ['Add', 'Add.CreateObject', 'Add.CreateParamSetting',
     'AddResp', 'AddResp.CreatedObjectResult',
     'AddResp.CreatedObjectResult.OperationStatus',
     'AddResp.CreatedObjectResult.OperationStatus.OperationFailure',
     'AddResp.CreatedObjectResult.OperationStatus.OperationSuccess',
     'AddResp.ParameterError', 'Body', 'Delete',
     'DeleteResp', 'DeleteResp.DeletedObjectResult',
     'DeleteResp.DeletedObjectResult.OperationStatus',
     'DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure',
     'DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess',
     'DeleteResp.UnaffectedPathError', 'Error',
     'Error.ParamError', 'Get', 'GetInstances',
     'GetInstancesResp', 'GetInstancesResp.CurrInstance',
     'GetInstancesResp.RequestedPathResult', 'GetResp',
     'GetResp.RequestedPathResult',
     'GetResp.ResolvedPathResult', 'GetSupportedDM',
     'GetSupportedDMResp',
     'GetSupportedDMResp.RequestedObjectResult',
     'GetSupportedDMResp.SupportedCommandResult',
     'GetSupportedDMResp.SupportedEventResult',
     'GetSupportedDMResp.SupportedObjectResult',
     'GetSupportedDMResp.SupportedParamResult',
     'GetSupportedProtocol', 'GetSupportedProtocolResp',
     'Header', 'Msg', 'Notify', 'Notify.Event',
     'Notify.ObjectCreation', 'Notify.ObjectDeletion',
     'Notify.OnBoardRequest', 'Notify.OperationComplete',
     'Notify.OperationComplete.CommandFailure',
     'Notify.OperationComplete.OutputArgs',
     'Notify.ValueChange', 'NotifyResp', 'Operate',
     'OperateResp', 'OperateResp.OperationResult',
     'OperateResp.OperationResult.CommandFailure',
     'OperateResp.OperationResult.OutputArgs', 'Request',
     'Response', 'Set', 'Set.UpdateObject',
     'Set.UpdateParamSetting', 'SetResp',
     'SetResp.ParameterError',
     'SetResp.UpdatedInstanceFailure',
     'SetResp.UpdatedInstanceResult',
     'SetResp.UpdatedObjectResult',
     'SetResp.UpdatedObjectResult.OperationStatus',
     'SetResp.UpdatedObjectResult.OperationStatus.OperationFailure',
     'SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess'];
get_msg_containment("wrappers") ->
    ['BoolValue', 'BytesValue', 'DoubleValue', 'FloatValue',
     'Int32Value', 'Int64Value', 'StringValue',
     'UInt32Value', 'UInt64Value'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("usp_record_1_1") -> undefined;
get_pkg_containment("usp_msg_1_1") -> undefined;
get_pkg_containment("wrappers") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("usp_record_1_1") -> [];
get_service_containment("usp_msg_1_1") -> [];
get_service_containment("wrappers") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("usp_record_1_1") -> [];
get_rpc_containment("usp_msg_1_1") -> [];
get_rpc_containment("wrappers") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("usp_record_1_1") ->
    ['Record.PayloadSecurity',
     'SessionContextRecord.PayloadSARState'];
get_enum_containment("usp_msg_1_1") ->
    ['GetSupportedDMResp.ObjAccessType',
     'GetSupportedDMResp.ParamAccessType', 'Header.MsgType'];
get_enum_containment("wrappers") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.OperateResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.NotifyResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedProtocolResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDMResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetInstancesResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DeleteResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.AddResp">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.ParameterError">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Header">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Error.ParamError">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Error">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DeleteResp.UnaffectedPathError">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.AddResp.ParameterError">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.UpdatedObjectResult.OperationStatus.OperationSuccess">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.UpdatedObjectResult.OperationStatus">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.OperateResp.OperationResult.OutputArgs">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.OperationComplete.OutputArgs">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetInstances">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus.OperationSuccess">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.AddResp.CreatedObjectResult.OperationStatus.OperationSuccess">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.AddResp.CreatedObjectResult.OperationStatus">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.UpdatedObjectResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.UpdatedInstanceResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Set.UpdateObject">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Set">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Request">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.OperateResp.OperationResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.OnBoardRequest">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.Event">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDMResp.SupportedParamResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDMResp.SupportedObjectResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDMResp.SupportedEventResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDMResp.SupportedCommandResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDMResp.RequestedObjectResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetResp.ResolvedPathResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetResp.RequestedPathResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetInstancesResp.RequestedPathResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Get">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DeleteResp.DeletedObjectResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.AddResp.CreatedObjectResult">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Add.CreateObject">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Add">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SessionContextRecord">>) ->
    "usp_record_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Record">>) ->
    "usp_record_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.NoSessionContextRecord">>) ->
    "usp_record_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.UInt64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.UInt32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.StringValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Int64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Int32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.FloatValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DoubleValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.BytesValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.BoolValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.UpdatedObjectResult.OperationStatus.OperationFailure">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.SetResp.UpdatedInstanceFailure">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Response">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.OperateResp.OperationResult.CommandFailure">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Operate">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.ValueChange">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.OperationComplete.CommandFailure">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.OperationComplete">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetInstancesResp.CurrInstance">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.DeleteResp.DeletedObjectResult.OperationStatus.OperationFailure">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Delete">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.AddResp.CreatedObjectResult.OperationStatus.OperationFailure">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Set.UpdateParamSetting">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Msg">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Add.CreateParamSetting">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Body">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedProtocol">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.GetSupportedDM">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.ObjectDeletion">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(<<"usp_record.Notify.ObjectCreation">>) ->
    "usp_msg_1_1";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"usp_record.Header.MsgType">>) ->
    "usp_msg_1_1";
get_proto_by_enum_name_as_fqbin(<<"usp_record.GetSupportedDMResp.ParamAccessType">>) ->
    "usp_msg_1_1";
get_proto_by_enum_name_as_fqbin(<<"usp_record.GetSupportedDMResp.ObjAccessType">>) ->
    "usp_msg_1_1";
get_proto_by_enum_name_as_fqbin(<<"usp_record.SessionContextRecord.PayloadSARState">>) ->
    "usp_record_1_1";
get_proto_by_enum_name_as_fqbin(<<"usp_record.Record.PayloadSecurity">>) ->
    "usp_record_1_1";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
